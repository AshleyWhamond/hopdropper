
c:/Users/ashkl/Desktop/Deakin_22/SIT_210/Project/hopdropper/hopdropper/target/2.3.0/photon/hopdropper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002864  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a2880  080a2880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a2888  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080a288c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000057c  2000006c  2000006c  0003006c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a28f8  080a28f8  000228f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a2920  080a2920  00022920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000ffdf6  00000000  00000000  00022924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013053  00000000  00000000  0012271a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000198a7  00000000  00000000  0013576d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001c18  00000000  00000000  0014f014  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004a28  00000000  00000000  00150c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000267ef  00000000  00000000  00155654  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002a251  00000000  00000000  0017be43  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b3301  00000000  00000000  001a6094  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00004b98  00000000  00000000  00259398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fa7f 	bl	80a2530 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fa87 	bl	80a254c <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a288c 	.word	0x080a288c
 80a004c:	2000006c 	.word	0x2000006c
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	200005e5 	.word	0x200005e5
 80a0058:	200005e5 	.word	0x200005e5

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fe11 	bl	80a0c84 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a285c 	.word	0x080a285c
 80a0080:	080a287c 	.word	0x080a287c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f000 b824 	b.w	80a00d0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f000 f853 	bl	80a0134 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f000 bdaf 	b.w	80a0bf4 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f000 bb67 	b.w	80a0768 <malloc>

080a009a <_Znaj>:
 80a009a:	f000 bb65 	b.w	80a0768 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f000 bb6b 	b.w	80a0778 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a00b4:	b513      	push	{r0, r1, r4, lr}
 80a00b6:	4604      	mov	r4, r0
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
 80a00b8:	4b04      	ldr	r3, [pc, #16]	; (80a00cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
 80a00ba:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a00bc:	f88d 3000 	strb.w	r3, [sp]
 80a00c0:	233c      	movs	r3, #60	; 0x3c
 80a00c2:	f000 ff37 	bl	80a0f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
 80a00c6:	4620      	mov	r0, r4
 80a00c8:	b002      	add	sp, #8
 80a00ca:	bd10      	pop	{r4, pc}
 80a00cc:	2000006c 	.word	0x2000006c

080a00d0 <setup>:
#include "../lib/SparkFun_SCD30_Arduino_Library/src/SparkFun_SCD30_Arduino_Library.h" 

SCD30 airSensor;

void setup()
{
 80a00d0:	b508      	push	{r3, lr}
  Wire.begin();
 80a00d2:	f001 fbcb 	bl	80a186c <_Z19__fetch_global_Wirev>
 80a00d6:	f001 fa99 	bl	80a160c <_ZN7TwoWire5beginEv>

  Serial.begin(115200);
 80a00da:	f001 f971 	bl	80a13c0 <_Z16_fetch_usbserialv>
 80a00de:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a00e2:	f001 f953 	bl	80a138c <_ZN9USBSerial5beginEl>
  Serial.println("SCD30 Example");
 80a00e6:	f001 f96b 	bl	80a13c0 <_Z16_fetch_usbserialv>
 80a00ea:	4905      	ldr	r1, [pc, #20]	; (80a0100 <setup+0x30>)
 80a00ec:	f000 fce2 	bl	80a0ab4 <_ZN5Print7printlnEPKc>

  airSensor.begin(); //This will cause readings to occur every two seconds
 80a00f0:	f001 fbbc 	bl	80a186c <_Z19__fetch_global_Wirev>
}
 80a00f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  airSensor.begin(); //This will cause readings to occur every two seconds
 80a00f8:	4601      	mov	r1, r0
 80a00fa:	4802      	ldr	r0, [pc, #8]	; (80a0104 <setup+0x34>)
 80a00fc:	f000 b995 	b.w	80a042a <_ZN5SCD305beginER7TwoWire>
 80a0100:	080a26d0 	.word	0x080a26d0
 80a0104:	20000070 	.word	0x20000070

080a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0108:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a010a:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 80a010c:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 80a010e:	b17c      	cbz	r4, 80a0130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 80a0110:	6863      	ldr	r3, [r4, #4]
 80a0112:	3b01      	subs	r3, #1
 80a0114:	6063      	str	r3, [r4, #4]
 80a0116:	b95b      	cbnz	r3, 80a0130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 80a0118:	6823      	ldr	r3, [r4, #0]
 80a011a:	4620      	mov	r0, r4
 80a011c:	689b      	ldr	r3, [r3, #8]
 80a011e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0120:	68a3      	ldr	r3, [r4, #8]
 80a0122:	3b01      	subs	r3, #1
 80a0124:	60a3      	str	r3, [r4, #8]
 80a0126:	b91b      	cbnz	r3, 80a0130 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0128:	6823      	ldr	r3, [r4, #0]
 80a012a:	4620      	mov	r0, r4
 80a012c:	68db      	ldr	r3, [r3, #12]
 80a012e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 80a0130:	4628      	mov	r0, r5
 80a0132:	bd38      	pop	{r3, r4, r5, pc}

080a0134 <loop>:

void loop()
{
 80a0134:	b570      	push	{r4, r5, r6, lr}

  uint16_t co2 = airSensor.getCO2();
 80a0136:	482b      	ldr	r0, [pc, #172]	; (80a01e4 <loop+0xb0>)
{
 80a0138:	b088      	sub	sp, #32
  uint16_t co2 = airSensor.getCO2();
 80a013a:	f000 f905 	bl	80a0348 <_ZN5SCD306getCO2Ev>
 80a013e:	4606      	mov	r6, r0
  float t = airSensor.getTemperature();
 80a0140:	4828      	ldr	r0, [pc, #160]	; (80a01e4 <loop+0xb0>)
 80a0142:	f000 f918 	bl	80a0376 <_ZN5SCD3014getTemperatureEv>
 80a0146:	4605      	mov	r5, r0
  float h = airSensor.getHumidity();
 80a0148:	4826      	ldr	r0, [pc, #152]	; (80a01e4 <loop+0xb0>)
 80a014a:	f000 f90a 	bl	80a0362 <_ZN5SCD3011getHumidityEv>
 80a014e:	4604      	mov	r4, r0


  if (airSensor.dataAvailable())
 80a0150:	4824      	ldr	r0, [pc, #144]	; (80a01e4 <loop+0xb0>)
 80a0152:	f000 f899 	bl	80a0288 <_ZN5SCD3013dataAvailableEv>
 80a0156:	4602      	mov	r2, r0
 80a0158:	2800      	cmp	r0, #0
 80a015a:	d035      	beq.n	80a01c8 <loop+0x94>
  {
    Particle.publish("co2(ppm):", String(co2));
 80a015c:	220a      	movs	r2, #10
 80a015e:	4631      	mov	r1, r6
 80a0160:	a804      	add	r0, sp, #16
 80a0162:	f000 fc48 	bl	80a09f6 <_ZN6StringC1Eih>
 80a0166:	9a04      	ldr	r2, [sp, #16]
 80a0168:	491f      	ldr	r1, [pc, #124]	; (80a01e8 <loop+0xb4>)
 80a016a:	a802      	add	r0, sp, #8
 80a016c:	f7ff ffa2 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0170:	a803      	add	r0, sp, #12
 80a0172:	f7ff ffc9 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0176:	a804      	add	r0, sp, #16
 80a0178:	f000 fbe2 	bl	80a0940 <_ZN6StringD1Ev>
  
    Particle.publish(" temp(C):", String(t));
 80a017c:	2206      	movs	r2, #6
 80a017e:	4629      	mov	r1, r5
 80a0180:	a804      	add	r0, sp, #16
 80a0182:	f000 fc4b 	bl	80a0a1c <_ZN6StringC1Efi>
 80a0186:	9a04      	ldr	r2, [sp, #16]
 80a0188:	4918      	ldr	r1, [pc, #96]	; (80a01ec <loop+0xb8>)
 80a018a:	a802      	add	r0, sp, #8
 80a018c:	f7ff ff92 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a0190:	a803      	add	r0, sp, #12
 80a0192:	f7ff ffb9 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0196:	a804      	add	r0, sp, #16
 80a0198:	f000 fbd2 	bl	80a0940 <_ZN6StringD1Ev>

    Particle.publish(" humidity(%):", String(h));
 80a019c:	2206      	movs	r2, #6
 80a019e:	4621      	mov	r1, r4
 80a01a0:	a804      	add	r0, sp, #16
 80a01a2:	f000 fc3b 	bl	80a0a1c <_ZN6StringC1Efi>
 80a01a6:	9a04      	ldr	r2, [sp, #16]
 80a01a8:	4911      	ldr	r1, [pc, #68]	; (80a01f0 <loop+0xbc>)
 80a01aa:	a802      	add	r0, sp, #8
 80a01ac:	f7ff ff82 	bl	80a00b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
 80a01b0:	a803      	add	r0, sp, #12
 80a01b2:	f7ff ffa9 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a01b6:	a804      	add	r0, sp, #16
 80a01b8:	f000 fbc2 	bl	80a0940 <_ZN6StringD1Ev>

  }
  else
    Particle.publish("No data");

  delay(1000);
 80a01bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a01c0:	f000 fcbe 	bl	80a0b40 <delay>
}
 80a01c4:	b008      	add	sp, #32
 80a01c6:	bd70      	pop	{r4, r5, r6, pc}
 80a01c8:	4b0a      	ldr	r3, [pc, #40]	; (80a01f4 <loop+0xc0>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a01ca:	a804      	add	r0, sp, #16
 80a01cc:	781b      	ldrb	r3, [r3, #0]
 80a01ce:	490a      	ldr	r1, [pc, #40]	; (80a01f8 <loop+0xc4>)
 80a01d0:	f88d 3000 	strb.w	r3, [sp]
 80a01d4:	233c      	movs	r3, #60	; 0x3c
 80a01d6:	f000 fead 	bl	80a0f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a01da:	a805      	add	r0, sp, #20
 80a01dc:	f7ff ff94 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a01e0:	e7ec      	b.n	80a01bc <loop+0x88>
 80a01e2:	bf00      	nop
 80a01e4:	20000070 	.word	0x20000070
 80a01e8:	080a26de 	.word	0x080a26de
 80a01ec:	080a26e8 	.word	0x080a26e8
 80a01f0:	080a26f2 	.word	0x080a26f2
 80a01f4:	2000006c 	.word	0x2000006c
 80a01f8:	080a2700 	.word	0x080a2700

080a01fc <_GLOBAL__sub_I_airSensor>:
        val_(val) {
 80a01fc:	2200      	movs	r2, #0
 80a01fe:	4b02      	ldr	r3, [pc, #8]	; (80a0208 <_GLOBAL__sub_I_airSensor+0xc>)
SCD30 airSensor;
 80a0200:	4802      	ldr	r0, [pc, #8]	; (80a020c <_GLOBAL__sub_I_airSensor+0x10>)
 80a0202:	701a      	strb	r2, [r3, #0]
 80a0204:	f000 b808 	b.w	80a0218 <_ZN5SCD30C1Ev>
 80a0208:	2000006c 	.word	0x2000006c
 80a020c:	20000070 	.word	0x20000070

080a0210 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0210:	6803      	ldr	r3, [r0, #0]
 80a0212:	b2c9      	uxtb	r1, r1
 80a0214:	689b      	ldr	r3, [r3, #8]
 80a0216:	4718      	bx	r3

080a0218 <_ZN5SCD30C1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_SCD30_Arduino_Library.h"

SCD30::SCD30(void)
 80a0218:	2200      	movs	r2, #0
 80a021a:	6042      	str	r2, [r0, #4]
 80a021c:	6082      	str	r2, [r0, #8]
 80a021e:	60c2      	str	r2, [r0, #12]
 80a0220:	f240 1201 	movw	r2, #257	; 0x101
 80a0224:	8202      	strh	r2, [r0, #16]
 80a0226:	2201      	movs	r2, #1
 80a0228:	7482      	strb	r2, [r0, #18]
{
  // Constructor
}
 80a022a:	4770      	bx	lr

080a022c <_ZN5SCD3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SCD30::readRegister(uint16_t registerAddress)
{
 80a022c:	b538      	push	{r3, r4, r5, lr}
 80a022e:	4604      	mov	r4, r0
 80a0230:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(SCD30_ADDRESS);
 80a0232:	6800      	ldr	r0, [r0, #0]
 80a0234:	2161      	movs	r1, #97	; 0x61
 80a0236:	f001 fa1f 	bl	80a1678 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8); //MSB
 80a023a:	0a29      	lsrs	r1, r5, #8
 80a023c:	6820      	ldr	r0, [r4, #0]
 80a023e:	f7ff ffe7 	bl	80a0210 <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
 80a0242:	6820      	ldr	r0, [r4, #0]
 80a0244:	b2e9      	uxtb	r1, r5
 80a0246:	f7ff ffe3 	bl	80a0210 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
 80a024a:	6820      	ldr	r0, [r4, #0]
 80a024c:	f001 fa1b 	bl	80a1686 <_ZN7TwoWire15endTransmissionEv>
 80a0250:	b108      	cbz	r0, 80a0256 <_ZN5SCD3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
 80a0252:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    uint8_t lsb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }
  return (0); //Sensor did not respond
}
 80a0254:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)2);
 80a0256:	2202      	movs	r2, #2
 80a0258:	2161      	movs	r1, #97	; 0x61
 80a025a:	6820      	ldr	r0, [r4, #0]
 80a025c:	f001 fa05 	bl	80a166a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
 80a0260:	6820      	ldr	r0, [r4, #0]
 80a0262:	6803      	ldr	r3, [r0, #0]
 80a0264:	691b      	ldr	r3, [r3, #16]
 80a0266:	4798      	blx	r3
 80a0268:	2800      	cmp	r0, #0
 80a026a:	d0f2      	beq.n	80a0252 <_ZN5SCD3012readRegisterEt+0x26>
    uint8_t msb = _i2cPort->read();
 80a026c:	6820      	ldr	r0, [r4, #0]
 80a026e:	6803      	ldr	r3, [r0, #0]
 80a0270:	695b      	ldr	r3, [r3, #20]
 80a0272:	4798      	blx	r3
 80a0274:	4605      	mov	r5, r0
    uint8_t lsb = _i2cPort->read();
 80a0276:	6820      	ldr	r0, [r4, #0]
 80a0278:	6803      	ldr	r3, [r0, #0]
 80a027a:	695b      	ldr	r3, [r3, #20]
 80a027c:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
 80a027e:	b2c0      	uxtb	r0, r0
 80a0280:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a0284:	b280      	uxth	r0, r0
 80a0286:	e7e5      	b.n	80a0254 <_ZN5SCD3012readRegisterEt+0x28>

080a0288 <_ZN5SCD3013dataAvailableEv>:
{
 80a0288:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
 80a028a:	f240 2102 	movw	r1, #514	; 0x202
 80a028e:	f7ff ffcd 	bl	80a022c <_ZN5SCD3012readRegisterEt>
}
 80a0292:	1e43      	subs	r3, r0, #1
 80a0294:	4258      	negs	r0, r3
 80a0296:	4158      	adcs	r0, r3
 80a0298:	bd08      	pop	{r3, pc}

080a029a <_ZN5SCD3015readMeasurementEv>:
{
 80a029a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a029e:	4604      	mov	r4, r0
  if (dataAvailable() == false)
 80a02a0:	f7ff fff2 	bl	80a0288 <_ZN5SCD3013dataAvailableEv>
 80a02a4:	4607      	mov	r7, r0
 80a02a6:	b918      	cbnz	r0, 80a02b0 <_ZN5SCD3015readMeasurementEv+0x16>
    return (false);
 80a02a8:	2700      	movs	r7, #0
}
 80a02aa:	4638      	mov	r0, r7
 80a02ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission(SCD30_ADDRESS);
 80a02b0:	2161      	movs	r1, #97	; 0x61
 80a02b2:	6820      	ldr	r0, [r4, #0]
 80a02b4:	f001 f9e0 	bl	80a1678 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8); //MSB
 80a02b8:	2103      	movs	r1, #3
 80a02ba:	6820      	ldr	r0, [r4, #0]
 80a02bc:	f7ff ffa8 	bl	80a0210 <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
 80a02c0:	2100      	movs	r1, #0
 80a02c2:	6820      	ldr	r0, [r4, #0]
 80a02c4:	f7ff ffa4 	bl	80a0210 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
 80a02c8:	6820      	ldr	r0, [r4, #0]
 80a02ca:	f001 f9dc 	bl	80a1686 <_ZN7TwoWire15endTransmissionEv>
 80a02ce:	4605      	mov	r5, r0
 80a02d0:	2800      	cmp	r0, #0
 80a02d2:	d1e9      	bne.n	80a02a8 <_ZN5SCD3015readMeasurementEv+0xe>
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)18);
 80a02d4:	2212      	movs	r2, #18
 80a02d6:	2161      	movs	r1, #97	; 0x61
 80a02d8:	6820      	ldr	r0, [r4, #0]
 80a02da:	f001 f9c6 	bl	80a166a <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
 80a02de:	6820      	ldr	r0, [r4, #0]
 80a02e0:	6803      	ldr	r3, [r0, #0]
 80a02e2:	691b      	ldr	r3, [r3, #16]
 80a02e4:	4798      	blx	r3
 80a02e6:	4606      	mov	r6, r0
 80a02e8:	b358      	cbz	r0, 80a0342 <_ZN5SCD3015readMeasurementEv+0xa8>
  uint32_t tempHumidity = 0;
 80a02ea:	46a8      	mov	r8, r5
  uint32_t tempTemperature = 0;
 80a02ec:	462e      	mov	r6, r5
  uint32_t tempCO2 = 0;
 80a02ee:	46a9      	mov	r9, r5
      byte incoming = _i2cPort->read();
 80a02f0:	6820      	ldr	r0, [r4, #0]
 80a02f2:	6803      	ldr	r3, [r0, #0]
 80a02f4:	695b      	ldr	r3, [r3, #20]
 80a02f6:	4798      	blx	r3
      switch (x)
 80a02f8:	b2eb      	uxtb	r3, r5
 80a02fa:	2b10      	cmp	r3, #16
 80a02fc:	d80d      	bhi.n	80a031a <_ZN5SCD3015readMeasurementEv+0x80>
 80a02fe:	e8df f003 	tbb	[pc, r3]
 80a0302:	0909      	.short	0x0909
 80a0304:	0c09090c 	.word	0x0c09090c
 80a0308:	180c1818 	.word	0x180c1818
 80a030c:	1c1c0c18 	.word	0x1c1c0c18
 80a0310:	1c0c      	.short	0x1c0c
 80a0312:	1c          	.byte	0x1c
 80a0313:	00          	.byte	0x00
          tempCO2 |= incoming;
 80a0314:	b2c3      	uxtb	r3, r0
 80a0316:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    for (byte x = 0 ; x < 18 ; x++)
 80a031a:	3501      	adds	r5, #1
 80a031c:	2d12      	cmp	r5, #18
 80a031e:	d1e7      	bne.n	80a02f0 <_ZN5SCD3015readMeasurementEv+0x56>
  co2HasBeenReported = false;
 80a0320:	2300      	movs	r3, #0
  memcpy(&co2, &tempCO2, sizeof(co2));
 80a0322:	f8c4 9004 	str.w	r9, [r4, #4]
  memcpy(&temperature, &tempTemperature, sizeof(temperature));
 80a0326:	60a6      	str	r6, [r4, #8]
  memcpy(&humidity, &tempHumidity, sizeof(humidity));
 80a0328:	f8c4 800c 	str.w	r8, [r4, #12]
  co2HasBeenReported = false;
 80a032c:	8223      	strh	r3, [r4, #16]
  temperatureHasBeenReported = false;
 80a032e:	74a3      	strb	r3, [r4, #18]
  return (true); //Success! New data available in globals.
 80a0330:	e7bb      	b.n	80a02aa <_ZN5SCD3015readMeasurementEv+0x10>
          tempTemperature |= incoming;
 80a0332:	b2c3      	uxtb	r3, r0
 80a0334:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
          break;
 80a0338:	e7ef      	b.n	80a031a <_ZN5SCD3015readMeasurementEv+0x80>
          tempHumidity |= incoming;
 80a033a:	b2c3      	uxtb	r3, r0
 80a033c:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
          break;
 80a0340:	e7eb      	b.n	80a031a <_ZN5SCD3015readMeasurementEv+0x80>
  uint32_t tempHumidity = 0;
 80a0342:	4680      	mov	r8, r0
  uint32_t tempCO2 = 0;
 80a0344:	4681      	mov	r9, r0
 80a0346:	e7eb      	b.n	80a0320 <_ZN5SCD3015readMeasurementEv+0x86>

080a0348 <_ZN5SCD306getCO2Ev>:
{
 80a0348:	b510      	push	{r4, lr}
  if (co2HasBeenReported == true) //Trigger a new read
 80a034a:	7c03      	ldrb	r3, [r0, #16]
{
 80a034c:	4604      	mov	r4, r0
  if (co2HasBeenReported == true) //Trigger a new read
 80a034e:	b10b      	cbz	r3, 80a0354 <_ZN5SCD306getCO2Ev+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
 80a0350:	f7ff ffa3 	bl	80a029a <_ZN5SCD3015readMeasurementEv>
  co2HasBeenReported = true;
 80a0354:	2301      	movs	r3, #1
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
 80a0356:	6860      	ldr	r0, [r4, #4]
  co2HasBeenReported = true;
 80a0358:	7423      	strb	r3, [r4, #16]
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
 80a035a:	f001 ff29 	bl	80a21b0 <__aeabi_f2uiz>
}
 80a035e:	b280      	uxth	r0, r0
 80a0360:	bd10      	pop	{r4, pc}

080a0362 <_ZN5SCD3011getHumidityEv>:
{
 80a0362:	b510      	push	{r4, lr}
  if (humidityHasBeenReported == true) //Trigger a new read
 80a0364:	7c43      	ldrb	r3, [r0, #17]
{
 80a0366:	4604      	mov	r4, r0
  if (humidityHasBeenReported == true) //Trigger a new read
 80a0368:	b10b      	cbz	r3, 80a036e <_ZN5SCD3011getHumidityEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
 80a036a:	f7ff ff96 	bl	80a029a <_ZN5SCD3015readMeasurementEv>
  humidityHasBeenReported = true;
 80a036e:	2301      	movs	r3, #1
}
 80a0370:	68e0      	ldr	r0, [r4, #12]
  humidityHasBeenReported = true;
 80a0372:	7463      	strb	r3, [r4, #17]
}
 80a0374:	bd10      	pop	{r4, pc}

080a0376 <_ZN5SCD3014getTemperatureEv>:
{
 80a0376:	b510      	push	{r4, lr}
  if (temperatureHasBeenReported == true) //Trigger a new read
 80a0378:	7c83      	ldrb	r3, [r0, #18]
{
 80a037a:	4604      	mov	r4, r0
  if (temperatureHasBeenReported == true) //Trigger a new read
 80a037c:	b10b      	cbz	r3, 80a0382 <_ZN5SCD3014getTemperatureEv+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
 80a037e:	f7ff ff8c 	bl	80a029a <_ZN5SCD3015readMeasurementEv>
  temperatureHasBeenReported = true;
 80a0382:	2301      	movs	r3, #1
}
 80a0384:	68a0      	ldr	r0, [r4, #8]
  temperatureHasBeenReported = true;
 80a0386:	74a3      	strb	r3, [r4, #18]
}
 80a0388:	bd10      	pop	{r4, pc}

080a038a <_ZN5SCD3011computeCRC8EPhh>:
//From: http://www.sunshine2k.de/articles/coding/crc/understanding_crc.html
//Tested with: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
//x^8+x^5+x^4+1 = 0x31
uint8_t SCD30::computeCRC8(uint8_t data[], uint8_t len)
{
  uint8_t crc = 0xFF; //Init with 0xFF
 80a038a:	20ff      	movs	r0, #255	; 0xff
 80a038c:	440a      	add	r2, r1

  for (uint8_t x = 0 ; x < len ; x++)
 80a038e:	428a      	cmp	r2, r1
 80a0390:	d011      	beq.n	80a03b6 <_ZN5SCD3011computeCRC8EPhh+0x2c>
  {
    crc ^= data[x]; // XOR-in the next input byte
 80a0392:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a0396:	4058      	eors	r0, r3
 80a0398:	2308      	movs	r3, #8

    for (uint8_t i = 0 ; i < 8 ; i++)
    {
      if ((crc & 0x80) != 0)
 80a039a:	f010 0f80 	tst.w	r0, #128	; 0x80
 80a039e:	f103 33ff 	add.w	r3, r3, #4294967295
 80a03a2:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
 80a03a6:	bf18      	it	ne
 80a03a8:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t i = 0 ; i < 8 ; i++)
 80a03ac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
 80a03b0:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0 ; i < 8 ; i++)
 80a03b2:	d1f2      	bne.n	80a039a <_ZN5SCD3011computeCRC8EPhh+0x10>
 80a03b4:	e7eb      	b.n	80a038e <_ZN5SCD3011computeCRC8EPhh+0x4>
    }
  }

  return crc; //No output reflection
}
 80a03b6:	4770      	bx	lr

080a03b8 <_ZN5SCD3011sendCommandEtt>:
{
 80a03b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  data[0] = arguments >> 8;
 80a03ba:	ba53      	rev16	r3, r2
{
 80a03bc:	460e      	mov	r6, r1
 80a03be:	4615      	mov	r5, r2
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
 80a03c0:	a901      	add	r1, sp, #4
 80a03c2:	2202      	movs	r2, #2
{
 80a03c4:	4604      	mov	r4, r0
  data[0] = arguments >> 8;
 80a03c6:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
 80a03ca:	f7ff ffde 	bl	80a038a <_ZN5SCD3011computeCRC8EPhh>
 80a03ce:	4607      	mov	r7, r0
  _i2cPort->beginTransmission(SCD30_ADDRESS);
 80a03d0:	2161      	movs	r1, #97	; 0x61
 80a03d2:	6820      	ldr	r0, [r4, #0]
 80a03d4:	f001 f950 	bl	80a1678 <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8); //MSB
 80a03d8:	0a31      	lsrs	r1, r6, #8
 80a03da:	6820      	ldr	r0, [r4, #0]
 80a03dc:	f7ff ff18 	bl	80a0210 <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF); //LSB
 80a03e0:	b2f1      	uxtb	r1, r6
 80a03e2:	6820      	ldr	r0, [r4, #0]
 80a03e4:	f7ff ff14 	bl	80a0210 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8); //MSB
 80a03e8:	0a29      	lsrs	r1, r5, #8
 80a03ea:	6820      	ldr	r0, [r4, #0]
 80a03ec:	f7ff ff10 	bl	80a0210 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
 80a03f0:	b2e9      	uxtb	r1, r5
 80a03f2:	6820      	ldr	r0, [r4, #0]
 80a03f4:	f7ff ff0c 	bl	80a0210 <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
 80a03f8:	6820      	ldr	r0, [r4, #0]
 80a03fa:	4639      	mov	r1, r7
 80a03fc:	6803      	ldr	r3, [r0, #0]
 80a03fe:	689b      	ldr	r3, [r3, #8]
 80a0400:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
 80a0402:	6820      	ldr	r0, [r4, #0]
 80a0404:	f001 f93f 	bl	80a1686 <_ZN7TwoWire15endTransmissionEv>
}
 80a0408:	fab0 f080 	clz	r0, r0
 80a040c:	0940      	lsrs	r0, r0, #5
 80a040e:	b003      	add	sp, #12
 80a0410:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0412 <_ZN5SCD3014beginMeasuringEt>:
{
 80a0412:	460a      	mov	r2, r1
  return(sendCommand(COMMAND_CONTINUOUS_MEASUREMENT, pressureOffset));
 80a0414:	2110      	movs	r1, #16
 80a0416:	f7ff bfcf 	b.w	80a03b8 <_ZN5SCD3011sendCommandEtt>

080a041a <_ZN5SCD3014beginMeasuringEv>:
  return(beginMeasuring(0));
 80a041a:	2100      	movs	r1, #0
 80a041c:	f7ff bff9 	b.w	80a0412 <_ZN5SCD3014beginMeasuringEt>

080a0420 <_ZN5SCD3022setMeasurementIntervalEt>:
{
 80a0420:	460a      	mov	r2, r1
  sendCommand(COMMAND_SET_MEASUREMENT_INTERVAL, interval);
 80a0422:	f44f 418c 	mov.w	r1, #17920	; 0x4600
 80a0426:	f7ff bfc7 	b.w	80a03b8 <_ZN5SCD3011sendCommandEtt>

080a042a <_ZN5SCD305beginER7TwoWire>:
{
 80a042a:	b538      	push	{r3, r4, r5, lr}
 80a042c:	4604      	mov	r4, r0
 80a042e:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
 80a0430:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
 80a0432:	f001 f8eb 	bl	80a160c <_ZN7TwoWire5beginEv>
  if(beginMeasuring() == true) //Start continuous measurements
 80a0436:	4620      	mov	r0, r4
 80a0438:	f7ff ffef 	bl	80a041a <_ZN5SCD3014beginMeasuringEv>
 80a043c:	4605      	mov	r5, r0
 80a043e:	b148      	cbz	r0, 80a0454 <_ZN5SCD305beginER7TwoWire+0x2a>
	setMeasurementInterval(2); //2 seconds between measurements
 80a0440:	2102      	movs	r1, #2
 80a0442:	4620      	mov	r0, r4
 80a0444:	f7ff ffec 	bl	80a0420 <_ZN5SCD3022setMeasurementIntervalEt>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
 80a0448:	2201      	movs	r2, #1
 80a044a:	f245 3106 	movw	r1, #21254	; 0x5306
 80a044e:	4620      	mov	r0, r4
 80a0450:	f7ff ffb2 	bl	80a03b8 <_ZN5SCD3011sendCommandEtt>
}
 80a0454:	4628      	mov	r0, r5
 80a0456:	bd38      	pop	{r3, r4, r5, pc}

080a0458 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0458:	b508      	push	{r3, lr}
 80a045a:	4b02      	ldr	r3, [pc, #8]	; (80a0464 <HAL_RNG_GetRandomNumber+0xc>)
 80a045c:	681b      	ldr	r3, [r3, #0]
 80a045e:	685b      	ldr	r3, [r3, #4]
 80a0460:	9301      	str	r3, [sp, #4]
 80a0462:	bd08      	pop	{r3, pc}
 80a0464:	0806019c 	.word	0x0806019c

080a0468 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0468:	b508      	push	{r3, lr}
 80a046a:	4b02      	ldr	r3, [pc, #8]	; (80a0474 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a046c:	681b      	ldr	r3, [r3, #0]
 80a046e:	695b      	ldr	r3, [r3, #20]
 80a0470:	9301      	str	r3, [sp, #4]
 80a0472:	bd08      	pop	{r3, pc}
 80a0474:	0806019c 	.word	0x0806019c

080a0478 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a0478:	b508      	push	{r3, lr}
 80a047a:	4b02      	ldr	r3, [pc, #8]	; (80a0484 <hal_usart_init+0xc>)
 80a047c:	681b      	ldr	r3, [r3, #0]
 80a047e:	699b      	ldr	r3, [r3, #24]
 80a0480:	9301      	str	r3, [sp, #4]
 80a0482:	bd08      	pop	{r3, pc}
 80a0484:	080601c4 	.word	0x080601c4

080a0488 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a0488:	b508      	push	{r3, lr}
 80a048a:	4b02      	ldr	r3, [pc, #8]	; (80a0494 <hal_usart_write+0xc>)
 80a048c:	681b      	ldr	r3, [r3, #0]
 80a048e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0490:	9301      	str	r3, [sp, #4]
 80a0492:	bd08      	pop	{r3, pc}
 80a0494:	080601c4 	.word	0x080601c4

080a0498 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a0498:	b508      	push	{r3, lr}
 80a049a:	4b02      	ldr	r3, [pc, #8]	; (80a04a4 <hal_usart_available+0xc>)
 80a049c:	681b      	ldr	r3, [r3, #0]
 80a049e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a04a0:	9301      	str	r3, [sp, #4]
 80a04a2:	bd08      	pop	{r3, pc}
 80a04a4:	080601c4 	.word	0x080601c4

080a04a8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a04a8:	b508      	push	{r3, lr}
 80a04aa:	4b02      	ldr	r3, [pc, #8]	; (80a04b4 <hal_usart_read+0xc>)
 80a04ac:	681b      	ldr	r3, [r3, #0]
 80a04ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a04b0:	9301      	str	r3, [sp, #4]
 80a04b2:	bd08      	pop	{r3, pc}
 80a04b4:	080601c4 	.word	0x080601c4

080a04b8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a04b8:	b508      	push	{r3, lr}
 80a04ba:	4b02      	ldr	r3, [pc, #8]	; (80a04c4 <hal_usart_peek+0xc>)
 80a04bc:	681b      	ldr	r3, [r3, #0]
 80a04be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a04c0:	9301      	str	r3, [sp, #4]
 80a04c2:	bd08      	pop	{r3, pc}
 80a04c4:	080601c4 	.word	0x080601c4

080a04c8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a04c8:	b508      	push	{r3, lr}
 80a04ca:	4b02      	ldr	r3, [pc, #8]	; (80a04d4 <hal_usart_flush+0xc>)
 80a04cc:	681b      	ldr	r3, [r3, #0]
 80a04ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a04d0:	9301      	str	r3, [sp, #4]
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	080601c4 	.word	0x080601c4

080a04d8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a04d8:	b508      	push	{r3, lr}
 80a04da:	4b02      	ldr	r3, [pc, #8]	; (80a04e4 <hal_usart_available_data_for_write+0xc>)
 80a04dc:	681b      	ldr	r3, [r3, #0]
 80a04de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a04e0:	9301      	str	r3, [sp, #4]
 80a04e2:	bd08      	pop	{r3, pc}
 80a04e4:	080601c4 	.word	0x080601c4

080a04e8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 80a04e8:	b508      	push	{r3, lr}
 80a04ea:	4b02      	ldr	r3, [pc, #8]	; (80a04f4 <hal_i2c_begin+0xc>)
 80a04ec:	681b      	ldr	r3, [r3, #0]
 80a04ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a04f0:	9301      	str	r3, [sp, #4]
 80a04f2:	bd08      	pop	{r3, pc}
 80a04f4:	080601ac 	.word	0x080601ac

080a04f8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 80a04f8:	b508      	push	{r3, lr}
 80a04fa:	4b02      	ldr	r3, [pc, #8]	; (80a0504 <hal_i2c_begin_transmission+0xc>)
 80a04fc:	681b      	ldr	r3, [r3, #0]
 80a04fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0500:	9301      	str	r3, [sp, #4]
 80a0502:	bd08      	pop	{r3, pc}
 80a0504:	080601ac 	.word	0x080601ac

080a0508 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 80a0508:	b508      	push	{r3, lr}
 80a050a:	4b02      	ldr	r3, [pc, #8]	; (80a0514 <hal_i2c_end_transmission+0xc>)
 80a050c:	681b      	ldr	r3, [r3, #0]
 80a050e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0510:	9301      	str	r3, [sp, #4]
 80a0512:	bd08      	pop	{r3, pc}
 80a0514:	080601ac 	.word	0x080601ac

080a0518 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a0518:	b508      	push	{r3, lr}
 80a051a:	4b02      	ldr	r3, [pc, #8]	; (80a0524 <hal_i2c_write+0xc>)
 80a051c:	681b      	ldr	r3, [r3, #0]
 80a051e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0520:	9301      	str	r3, [sp, #4]
 80a0522:	bd08      	pop	{r3, pc}
 80a0524:	080601ac 	.word	0x080601ac

080a0528 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a0528:	b508      	push	{r3, lr}
 80a052a:	4b02      	ldr	r3, [pc, #8]	; (80a0534 <hal_i2c_available+0xc>)
 80a052c:	681b      	ldr	r3, [r3, #0]
 80a052e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0530:	9301      	str	r3, [sp, #4]
 80a0532:	bd08      	pop	{r3, pc}
 80a0534:	080601ac 	.word	0x080601ac

080a0538 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a0538:	b508      	push	{r3, lr}
 80a053a:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <hal_i2c_read+0xc>)
 80a053c:	681b      	ldr	r3, [r3, #0]
 80a053e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0540:	9301      	str	r3, [sp, #4]
 80a0542:	bd08      	pop	{r3, pc}
 80a0544:	080601ac 	.word	0x080601ac

080a0548 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a0548:	b508      	push	{r3, lr}
 80a054a:	4b02      	ldr	r3, [pc, #8]	; (80a0554 <hal_i2c_peek+0xc>)
 80a054c:	681b      	ldr	r3, [r3, #0]
 80a054e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0550:	9301      	str	r3, [sp, #4]
 80a0552:	bd08      	pop	{r3, pc}
 80a0554:	080601ac 	.word	0x080601ac

080a0558 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a0558:	b508      	push	{r3, lr}
 80a055a:	4b02      	ldr	r3, [pc, #8]	; (80a0564 <hal_i2c_flush+0xc>)
 80a055c:	681b      	ldr	r3, [r3, #0]
 80a055e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0560:	9301      	str	r3, [sp, #4]
 80a0562:	bd08      	pop	{r3, pc}
 80a0564:	080601ac 	.word	0x080601ac

080a0568 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a0568:	b508      	push	{r3, lr}
 80a056a:	4b03      	ldr	r3, [pc, #12]	; (80a0578 <hal_i2c_init+0x10>)
 80a056c:	681b      	ldr	r3, [r3, #0]
 80a056e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0572:	9301      	str	r3, [sp, #4]
 80a0574:	bd08      	pop	{r3, pc}
 80a0576:	0000      	.short	0x0000
 80a0578:	080601ac 	.word	0x080601ac

080a057c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 80a057c:	b508      	push	{r3, lr}
 80a057e:	4b03      	ldr	r3, [pc, #12]	; (80a058c <hal_i2c_request_ex+0x10>)
 80a0580:	681b      	ldr	r3, [r3, #0]
 80a0582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0586:	9301      	str	r3, [sp, #4]
 80a0588:	bd08      	pop	{r3, pc}
 80a058a:	0000      	.short	0x0000
 80a058c:	080601ac 	.word	0x080601ac

080a0590 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0590:	b508      	push	{r3, lr}
 80a0592:	4b02      	ldr	r3, [pc, #8]	; (80a059c <HAL_USB_USART_Init+0xc>)
 80a0594:	681b      	ldr	r3, [r3, #0]
 80a0596:	681b      	ldr	r3, [r3, #0]
 80a0598:	9301      	str	r3, [sp, #4]
 80a059a:	bd08      	pop	{r3, pc}
 80a059c:	080601d8 	.word	0x080601d8

080a05a0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a05a0:	b508      	push	{r3, lr}
 80a05a2:	4b02      	ldr	r3, [pc, #8]	; (80a05ac <HAL_USB_USART_Begin+0xc>)
 80a05a4:	681b      	ldr	r3, [r3, #0]
 80a05a6:	685b      	ldr	r3, [r3, #4]
 80a05a8:	9301      	str	r3, [sp, #4]
 80a05aa:	bd08      	pop	{r3, pc}
 80a05ac:	080601d8 	.word	0x080601d8

080a05b0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a05b0:	b508      	push	{r3, lr}
 80a05b2:	4b02      	ldr	r3, [pc, #8]	; (80a05bc <HAL_USB_USART_Available_Data+0xc>)
 80a05b4:	681b      	ldr	r3, [r3, #0]
 80a05b6:	691b      	ldr	r3, [r3, #16]
 80a05b8:	9301      	str	r3, [sp, #4]
 80a05ba:	bd08      	pop	{r3, pc}
 80a05bc:	080601d8 	.word	0x080601d8

080a05c0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a05c0:	b508      	push	{r3, lr}
 80a05c2:	4b02      	ldr	r3, [pc, #8]	; (80a05cc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a05c4:	681b      	ldr	r3, [r3, #0]
 80a05c6:	695b      	ldr	r3, [r3, #20]
 80a05c8:	9301      	str	r3, [sp, #4]
 80a05ca:	bd08      	pop	{r3, pc}
 80a05cc:	080601d8 	.word	0x080601d8

080a05d0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05d0:	b508      	push	{r3, lr}
 80a05d2:	4b02      	ldr	r3, [pc, #8]	; (80a05dc <HAL_USB_USART_Receive_Data+0xc>)
 80a05d4:	681b      	ldr	r3, [r3, #0]
 80a05d6:	699b      	ldr	r3, [r3, #24]
 80a05d8:	9301      	str	r3, [sp, #4]
 80a05da:	bd08      	pop	{r3, pc}
 80a05dc:	080601d8 	.word	0x080601d8

080a05e0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a05e0:	b508      	push	{r3, lr}
 80a05e2:	4b02      	ldr	r3, [pc, #8]	; (80a05ec <HAL_USB_USART_Send_Data+0xc>)
 80a05e4:	681b      	ldr	r3, [r3, #0]
 80a05e6:	69db      	ldr	r3, [r3, #28]
 80a05e8:	9301      	str	r3, [sp, #4]
 80a05ea:	bd08      	pop	{r3, pc}
 80a05ec:	080601d8 	.word	0x080601d8

080a05f0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a05f0:	b508      	push	{r3, lr}
 80a05f2:	4b02      	ldr	r3, [pc, #8]	; (80a05fc <HAL_USB_USART_Flush_Data+0xc>)
 80a05f4:	681b      	ldr	r3, [r3, #0]
 80a05f6:	6a1b      	ldr	r3, [r3, #32]
 80a05f8:	9301      	str	r3, [sp, #4]
 80a05fa:	bd08      	pop	{r3, pc}
 80a05fc:	080601d8 	.word	0x080601d8

080a0600 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0600:	b508      	push	{r3, lr}
 80a0602:	4b02      	ldr	r3, [pc, #8]	; (80a060c <inet_gethostbyname+0xc>)
 80a0604:	681b      	ldr	r3, [r3, #0]
 80a0606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0608:	9301      	str	r3, [sp, #4]
 80a060a:	bd08      	pop	{r3, pc}
 80a060c:	080601c0 	.word	0x080601c0

080a0610 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0610:	b508      	push	{r3, lr}
 80a0612:	4b02      	ldr	r3, [pc, #8]	; (80a061c <set_system_mode+0xc>)
 80a0614:	681b      	ldr	r3, [r3, #0]
 80a0616:	685b      	ldr	r3, [r3, #4]
 80a0618:	9301      	str	r3, [sp, #4]
 80a061a:	bd08      	pop	{r3, pc}
 80a061c:	080601a4 	.word	0x080601a4

080a0620 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0620:	b508      	push	{r3, lr}
 80a0622:	4b02      	ldr	r3, [pc, #8]	; (80a062c <system_delay_ms+0xc>)
 80a0624:	681b      	ldr	r3, [r3, #0]
 80a0626:	695b      	ldr	r3, [r3, #20]
 80a0628:	9301      	str	r3, [sp, #4]
 80a062a:	bd08      	pop	{r3, pc}
 80a062c:	080601a4 	.word	0x080601a4

080a0630 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0630:	b508      	push	{r3, lr}
 80a0632:	4b02      	ldr	r3, [pc, #8]	; (80a063c <application_thread_current+0xc>)
 80a0634:	681b      	ldr	r3, [r3, #0]
 80a0636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0638:	9301      	str	r3, [sp, #4]
 80a063a:	bd08      	pop	{r3, pc}
 80a063c:	080601a4 	.word	0x080601a4

080a0640 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0640:	b508      	push	{r3, lr}
 80a0642:	4b02      	ldr	r3, [pc, #8]	; (80a064c <application_thread_invoke+0xc>)
 80a0644:	681b      	ldr	r3, [r3, #0]
 80a0646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0648:	9301      	str	r3, [sp, #4]
 80a064a:	bd08      	pop	{r3, pc}
 80a064c:	080601a4 	.word	0x080601a4

080a0650 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0650:	b508      	push	{r3, lr}
 80a0652:	4b03      	ldr	r3, [pc, #12]	; (80a0660 <system_ctrl_set_app_request_handler+0x10>)
 80a0654:	681b      	ldr	r3, [r3, #0]
 80a0656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a065a:	9301      	str	r3, [sp, #4]
 80a065c:	bd08      	pop	{r3, pc}
 80a065e:	0000      	.short	0x0000
 80a0660:	080601a4 	.word	0x080601a4

080a0664 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0664:	b508      	push	{r3, lr}
 80a0666:	4b03      	ldr	r3, [pc, #12]	; (80a0674 <system_ctrl_set_result+0x10>)
 80a0668:	681b      	ldr	r3, [r3, #0]
 80a066a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a066e:	9301      	str	r3, [sp, #4]
 80a0670:	bd08      	pop	{r3, pc}
 80a0672:	0000      	.short	0x0000
 80a0674:	080601a4 	.word	0x080601a4

080a0678 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0678:	b508      	push	{r3, lr}
 80a067a:	4b02      	ldr	r3, [pc, #8]	; (80a0684 <network_connect+0xc>)
 80a067c:	681b      	ldr	r3, [r3, #0]
 80a067e:	685b      	ldr	r3, [r3, #4]
 80a0680:	9301      	str	r3, [sp, #4]
 80a0682:	bd08      	pop	{r3, pc}
 80a0684:	080601c8 	.word	0x080601c8

080a0688 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0688:	b508      	push	{r3, lr}
 80a068a:	4b02      	ldr	r3, [pc, #8]	; (80a0694 <network_connecting+0xc>)
 80a068c:	681b      	ldr	r3, [r3, #0]
 80a068e:	689b      	ldr	r3, [r3, #8]
 80a0690:	9301      	str	r3, [sp, #4]
 80a0692:	bd08      	pop	{r3, pc}
 80a0694:	080601c8 	.word	0x080601c8

080a0698 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0698:	b508      	push	{r3, lr}
 80a069a:	4b02      	ldr	r3, [pc, #8]	; (80a06a4 <network_disconnect+0xc>)
 80a069c:	681b      	ldr	r3, [r3, #0]
 80a069e:	68db      	ldr	r3, [r3, #12]
 80a06a0:	9301      	str	r3, [sp, #4]
 80a06a2:	bd08      	pop	{r3, pc}
 80a06a4:	080601c8 	.word	0x080601c8

080a06a8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a06a8:	b508      	push	{r3, lr}
 80a06aa:	4b02      	ldr	r3, [pc, #8]	; (80a06b4 <network_ready+0xc>)
 80a06ac:	681b      	ldr	r3, [r3, #0]
 80a06ae:	691b      	ldr	r3, [r3, #16]
 80a06b0:	9301      	str	r3, [sp, #4]
 80a06b2:	bd08      	pop	{r3, pc}
 80a06b4:	080601c8 	.word	0x080601c8

080a06b8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06b8:	b508      	push	{r3, lr}
 80a06ba:	4b02      	ldr	r3, [pc, #8]	; (80a06c4 <network_on+0xc>)
 80a06bc:	681b      	ldr	r3, [r3, #0]
 80a06be:	695b      	ldr	r3, [r3, #20]
 80a06c0:	9301      	str	r3, [sp, #4]
 80a06c2:	bd08      	pop	{r3, pc}
 80a06c4:	080601c8 	.word	0x080601c8

080a06c8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a06c8:	b508      	push	{r3, lr}
 80a06ca:	4b02      	ldr	r3, [pc, #8]	; (80a06d4 <network_off+0xc>)
 80a06cc:	681b      	ldr	r3, [r3, #0]
 80a06ce:	699b      	ldr	r3, [r3, #24]
 80a06d0:	9301      	str	r3, [sp, #4]
 80a06d2:	bd08      	pop	{r3, pc}
 80a06d4:	080601c8 	.word	0x080601c8

080a06d8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a06d8:	b508      	push	{r3, lr}
 80a06da:	4b02      	ldr	r3, [pc, #8]	; (80a06e4 <network_listen+0xc>)
 80a06dc:	681b      	ldr	r3, [r3, #0]
 80a06de:	69db      	ldr	r3, [r3, #28]
 80a06e0:	9301      	str	r3, [sp, #4]
 80a06e2:	bd08      	pop	{r3, pc}
 80a06e4:	080601c8 	.word	0x080601c8

080a06e8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a06e8:	b508      	push	{r3, lr}
 80a06ea:	4b02      	ldr	r3, [pc, #8]	; (80a06f4 <network_listening+0xc>)
 80a06ec:	681b      	ldr	r3, [r3, #0]
 80a06ee:	6a1b      	ldr	r3, [r3, #32]
 80a06f0:	9301      	str	r3, [sp, #4]
 80a06f2:	bd08      	pop	{r3, pc}
 80a06f4:	080601c8 	.word	0x080601c8

080a06f8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a06f8:	b508      	push	{r3, lr}
 80a06fa:	4b02      	ldr	r3, [pc, #8]	; (80a0704 <network_set_listen_timeout+0xc>)
 80a06fc:	681b      	ldr	r3, [r3, #0]
 80a06fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0700:	9301      	str	r3, [sp, #4]
 80a0702:	bd08      	pop	{r3, pc}
 80a0704:	080601c8 	.word	0x080601c8

080a0708 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0708:	b508      	push	{r3, lr}
 80a070a:	4b02      	ldr	r3, [pc, #8]	; (80a0714 <network_get_listen_timeout+0xc>)
 80a070c:	681b      	ldr	r3, [r3, #0]
 80a070e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0710:	9301      	str	r3, [sp, #4]
 80a0712:	bd08      	pop	{r3, pc}
 80a0714:	080601c8 	.word	0x080601c8

080a0718 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 80a0718:	b508      	push	{r3, lr}
 80a071a:	4b02      	ldr	r3, [pc, #8]	; (80a0724 <network_is_on+0xc>)
 80a071c:	681b      	ldr	r3, [r3, #0]
 80a071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0720:	9301      	str	r3, [sp, #4]
 80a0722:	bd08      	pop	{r3, pc}
 80a0724:	080601c8 	.word	0x080601c8

080a0728 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 80a0728:	b508      	push	{r3, lr}
 80a072a:	4b02      	ldr	r3, [pc, #8]	; (80a0734 <network_is_off+0xc>)
 80a072c:	681b      	ldr	r3, [r3, #0]
 80a072e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0730:	9301      	str	r3, [sp, #4]
 80a0732:	bd08      	pop	{r3, pc}
 80a0734:	080601c8 	.word	0x080601c8

080a0738 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0738:	b508      	push	{r3, lr}
 80a073a:	4b02      	ldr	r3, [pc, #8]	; (80a0744 <spark_cloud_flag_connected+0xc>)
 80a073c:	681b      	ldr	r3, [r3, #0]
 80a073e:	695b      	ldr	r3, [r3, #20]
 80a0740:	9301      	str	r3, [sp, #4]
 80a0742:	bd08      	pop	{r3, pc}
 80a0744:	080601cc 	.word	0x080601cc

080a0748 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0748:	b508      	push	{r3, lr}
 80a074a:	4b02      	ldr	r3, [pc, #8]	; (80a0754 <spark_send_event+0xc>)
 80a074c:	681b      	ldr	r3, [r3, #0]
 80a074e:	6a1b      	ldr	r3, [r3, #32]
 80a0750:	9301      	str	r3, [sp, #4]
 80a0752:	bd08      	pop	{r3, pc}
 80a0754:	080601cc 	.word	0x080601cc

080a0758 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0758:	b508      	push	{r3, lr}
 80a075a:	4b02      	ldr	r3, [pc, #8]	; (80a0764 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a075c:	681b      	ldr	r3, [r3, #0]
 80a075e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0760:	9301      	str	r3, [sp, #4]
 80a0762:	bd08      	pop	{r3, pc}
 80a0764:	080601cc 	.word	0x080601cc

080a0768 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0768:	b508      	push	{r3, lr}
 80a076a:	4b02      	ldr	r3, [pc, #8]	; (80a0774 <malloc+0xc>)
 80a076c:	681b      	ldr	r3, [r3, #0]
 80a076e:	681b      	ldr	r3, [r3, #0]
 80a0770:	9301      	str	r3, [sp, #4]
 80a0772:	bd08      	pop	{r3, pc}
 80a0774:	080601a0 	.word	0x080601a0

080a0778 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0778:	b508      	push	{r3, lr}
 80a077a:	4b02      	ldr	r3, [pc, #8]	; (80a0784 <free+0xc>)
 80a077c:	681b      	ldr	r3, [r3, #0]
 80a077e:	685b      	ldr	r3, [r3, #4]
 80a0780:	9301      	str	r3, [sp, #4]
 80a0782:	bd08      	pop	{r3, pc}
 80a0784:	080601a0 	.word	0x080601a0

080a0788 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0788:	b508      	push	{r3, lr}
 80a078a:	4b02      	ldr	r3, [pc, #8]	; (80a0794 <realloc+0xc>)
 80a078c:	681b      	ldr	r3, [r3, #0]
 80a078e:	689b      	ldr	r3, [r3, #8]
 80a0790:	9301      	str	r3, [sp, #4]
 80a0792:	bd08      	pop	{r3, pc}
 80a0794:	080601a0 	.word	0x080601a0

080a0798 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0798:	b508      	push	{r3, lr}
 80a079a:	4b02      	ldr	r3, [pc, #8]	; (80a07a4 <abort+0xc>)
 80a079c:	681b      	ldr	r3, [r3, #0]
 80a079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a07a0:	9301      	str	r3, [sp, #4]
 80a07a2:	bd08      	pop	{r3, pc}
 80a07a4:	080601a0 	.word	0x080601a0

080a07a8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a07a8:	b508      	push	{r3, lr}
 80a07aa:	4b02      	ldr	r3, [pc, #8]	; (80a07b4 <_malloc_r+0xc>)
 80a07ac:	681b      	ldr	r3, [r3, #0]
 80a07ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a07b0:	9301      	str	r3, [sp, #4]
 80a07b2:	bd08      	pop	{r3, pc}
 80a07b4:	080601a0 	.word	0x080601a0

080a07b8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a07b8:	b508      	push	{r3, lr}
 80a07ba:	4b02      	ldr	r3, [pc, #8]	; (80a07c4 <newlib_impure_ptr_callback+0xc>)
 80a07bc:	681b      	ldr	r3, [r3, #0]
 80a07be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a07c0:	9301      	str	r3, [sp, #4]
 80a07c2:	bd08      	pop	{r3, pc}
 80a07c4:	080601a0 	.word	0x080601a0

080a07c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a07c8:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a07ca:	2000      	movs	r0, #0
 80a07cc:	4b04      	ldr	r3, [pc, #16]	; (80a07e0 <_GLOBAL__sub_I_System+0x18>)
 80a07ce:	601a      	str	r2, [r3, #0]
 80a07d0:	4b04      	ldr	r3, [pc, #16]	; (80a07e4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 80a07d2:	4a05      	ldr	r2, [pc, #20]	; (80a07e8 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 80a07d4:	6018      	str	r0, [r3, #0]
 80a07d6:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
 80a07d8:	7198      	strb	r0, [r3, #6]
 80a07da:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a07dc:	f7ff bf18 	b.w	80a0610 <set_system_mode>
 80a07e0:	20000090 	.word	0x20000090
 80a07e4:	20000084 	.word	0x20000084
 80a07e8:	ffff0000 	.word	0xffff0000

080a07ec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a07ec:	b510      	push	{r4, lr}
 80a07ee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a07f0:	f001 fef3 	bl	80a25da <strlen>
 80a07f4:	1e43      	subs	r3, r0, #1
 80a07f6:	4620      	mov	r0, r4
 80a07f8:	4423      	add	r3, r4
	while(i<j){
 80a07fa:	4283      	cmp	r3, r0
 80a07fc:	d906      	bls.n	80a080c <_Z11str_reversePc+0x20>
		c = *i;
 80a07fe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a0800:	7819      	ldrb	r1, [r3, #0]
 80a0802:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a0806:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a080a:	e7f6      	b.n	80a07fa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a080c:	bd10      	pop	{r4, pc}

080a080e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a080e:	b570      	push	{r4, r5, r6, lr}
 80a0810:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a0812:	1e91      	subs	r1, r2, #2
 80a0814:	2922      	cmp	r1, #34	; 0x22
 80a0816:	d822      	bhi.n	80a085e <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a0818:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a081a:	b168      	cbz	r0, 80a0838 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a081c:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a0820:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a0824:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a0826:	2809      	cmp	r0, #9
                *ptr += '0';
 80a0828:	bf94      	ite	ls
 80a082a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a082c:	3157      	addhi	r1, #87	; 0x57
 80a082e:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a0830:	4630      	mov	r0, r6
 80a0832:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a0836:	e7f0      	b.n	80a081a <ultoa+0xc>
 80a0838:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a083a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a083c:	4423      	add	r3, r4
 80a083e:	4293      	cmp	r3, r2
 80a0840:	d902      	bls.n	80a0848 <ultoa+0x3a>
            *ptr++ = '0';
 80a0842:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a0846:	e7fa      	b.n	80a083e <ultoa+0x30>
 80a0848:	1b5a      	subs	r2, r3, r5
 80a084a:	42ab      	cmp	r3, r5
 80a084c:	bf38      	it	cc
 80a084e:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a0850:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a0852:	4620      	mov	r0, r4
	*ptr = '\0';
 80a0854:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a0856:	f7ff ffc9 	bl	80a07ec <_Z11str_reversePc>
	return buffer;
 80a085a:	4620      	mov	r0, r4
}
 80a085c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a085e:	2000      	movs	r0, #0
 80a0860:	e7fc      	b.n	80a085c <ultoa+0x4e>

080a0862 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a0862:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a0864:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a0866:	460c      	mov	r4, r1
 80a0868:	4615      	mov	r5, r2
	if(a<0){
 80a086a:	da0d      	bge.n	80a0888 <itoa+0x26>
		*buffer = '-';
 80a086c:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a086e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a0872:	bf0c      	ite	eq
 80a0874:	4618      	moveq	r0, r3
 80a0876:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a0878:	2301      	movs	r3, #1
		*buffer = '-';
 80a087a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a087c:	462a      	mov	r2, r5
 80a087e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a0880:	f7ff ffc5 	bl	80a080e <ultoa>
	}
	return buffer;
}
 80a0884:	4620      	mov	r0, r4
 80a0886:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a0888:	2301      	movs	r3, #1
 80a088a:	e7f9      	b.n	80a0880 <itoa+0x1e>

080a088c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0890:	4607      	mov	r7, r0
 80a0892:	460d      	mov	r5, r1
 80a0894:	4616      	mov	r6, r2
 80a0896:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a0898:	2200      	movs	r2, #0
 80a089a:	2300      	movs	r3, #0
 80a089c:	4638      	mov	r0, r7
 80a089e:	4629      	mov	r1, r5
 80a08a0:	f001 fc3e 	bl	80a2120 <__aeabi_dcmplt>
 80a08a4:	b120      	cbz	r0, 80a08b0 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a08a6:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a08a8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a08ac:	f804 3b01 	strb.w	r3, [r4], #1
 80a08b0:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a08b2:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a08b6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a08b8:	b2d9      	uxtb	r1, r3
 80a08ba:	428e      	cmp	r6, r1
 80a08bc:	d903      	bls.n	80a08c6 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a08be:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a08c2:	3301      	adds	r3, #1
 80a08c4:	e7f8      	b.n	80a08b8 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a08c6:	4650      	mov	r0, sl
 80a08c8:	f001 f94e 	bl	80a1b68 <__aeabi_i2d>
 80a08cc:	463a      	mov	r2, r7
 80a08ce:	462b      	mov	r3, r5
 80a08d0:	f001 f9b4 	bl	80a1c3c <__aeabi_dmul>
 80a08d4:	4680      	mov	r8, r0
 80a08d6:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a08d8:	f001 fca2 	bl	80a2220 <__aeabi_d2ulz>
 80a08dc:	4605      	mov	r5, r0
 80a08de:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a08e0:	f001 f976 	bl	80a1bd0 <__aeabi_ul2d>
 80a08e4:	4602      	mov	r2, r0
 80a08e6:	460b      	mov	r3, r1
 80a08e8:	4640      	mov	r0, r8
 80a08ea:	4649      	mov	r1, r9
 80a08ec:	f000 ffee 	bl	80a18cc <__aeabi_dsub>
 80a08f0:	2200      	movs	r2, #0
 80a08f2:	4b12      	ldr	r3, [pc, #72]	; (80a093c <_Z4dtoadhPc+0xb0>)
 80a08f4:	f001 fc28 	bl	80a2148 <__aeabi_dcmpge>
 80a08f8:	b110      	cbz	r0, 80a0900 <_Z4dtoadhPc+0x74>
        fixed++;
 80a08fa:	3501      	adds	r5, #1
 80a08fc:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a0900:	4652      	mov	r2, sl
 80a0902:	4628      	mov	r0, r5
 80a0904:	4639      	mov	r1, r7
 80a0906:	17d3      	asrs	r3, r2, #31
 80a0908:	f001 fc72 	bl	80a21f0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a090c:	2301      	movs	r3, #1
 80a090e:	4615      	mov	r5, r2
 80a0910:	4621      	mov	r1, r4
 80a0912:	220a      	movs	r2, #10
 80a0914:	f7ff ff7b 	bl	80a080e <ultoa>
    if (prec) {
 80a0918:	b16e      	cbz	r6, 80a0936 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a091a:	4620      	mov	r0, r4
 80a091c:	f001 fe5d 	bl	80a25da <strlen>
        *sout++ = '.';
 80a0920:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a0922:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a0924:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a0926:	220a      	movs	r2, #10
 80a0928:	4633      	mov	r3, r6
 80a092a:	4628      	mov	r0, r5
    }
}
 80a092c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a0930:	3101      	adds	r1, #1
 80a0932:	f7ff bf6c 	b.w	80a080e <ultoa>
}
 80a0936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a093a:	bf00      	nop
 80a093c:	3fe00000 	.word	0x3fe00000

080a0940 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0940:	b510      	push	{r4, lr}
 80a0942:	4604      	mov	r4, r0
{
	free(buffer);
 80a0944:	6800      	ldr	r0, [r0, #0]
 80a0946:	f7ff ff17 	bl	80a0778 <free>
}
 80a094a:	4620      	mov	r0, r4
 80a094c:	bd10      	pop	{r4, pc}

080a094e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a094e:	b510      	push	{r4, lr}
 80a0950:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0952:	6800      	ldr	r0, [r0, #0]
 80a0954:	b108      	cbz	r0, 80a095a <_ZN6String10invalidateEv+0xc>
 80a0956:	f7ff ff0f 	bl	80a0778 <free>
	buffer = NULL;
 80a095a:	2300      	movs	r3, #0
	capacity = len = 0;
 80a095c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a0960:	6023      	str	r3, [r4, #0]
}
 80a0962:	bd10      	pop	{r4, pc}

080a0964 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0964:	b538      	push	{r3, r4, r5, lr}
 80a0966:	4604      	mov	r4, r0
 80a0968:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a096a:	6800      	ldr	r0, [r0, #0]
 80a096c:	3101      	adds	r1, #1
 80a096e:	f7ff ff0b 	bl	80a0788 <realloc>
	if (newbuffer) {
 80a0972:	b110      	cbz	r0, 80a097a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0974:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a0978:	2001      	movs	r0, #1
	}
	return 0;
}
 80a097a:	bd38      	pop	{r3, r4, r5, pc}

080a097c <_ZN6String7reserveEj>:
{
 80a097c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a097e:	6803      	ldr	r3, [r0, #0]
{
 80a0980:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0982:	b123      	cbz	r3, 80a098e <_ZN6String7reserveEj+0x12>
 80a0984:	6843      	ldr	r3, [r0, #4]
 80a0986:	428b      	cmp	r3, r1
 80a0988:	d301      	bcc.n	80a098e <_ZN6String7reserveEj+0x12>
 80a098a:	2001      	movs	r0, #1
}
 80a098c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a098e:	4620      	mov	r0, r4
 80a0990:	f7ff ffe8 	bl	80a0964 <_ZN6String12changeBufferEj>
 80a0994:	2800      	cmp	r0, #0
 80a0996:	d0f9      	beq.n	80a098c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a0998:	68a3      	ldr	r3, [r4, #8]
 80a099a:	2b00      	cmp	r3, #0
 80a099c:	d1f5      	bne.n	80a098a <_ZN6String7reserveEj+0xe>
 80a099e:	6822      	ldr	r2, [r4, #0]
 80a09a0:	7013      	strb	r3, [r2, #0]
 80a09a2:	e7f2      	b.n	80a098a <_ZN6String7reserveEj+0xe>

080a09a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a09a4:	b570      	push	{r4, r5, r6, lr}
 80a09a6:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a09a8:	4611      	mov	r1, r2
{
 80a09aa:	4604      	mov	r4, r0
 80a09ac:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a09ae:	f7ff ffe5 	bl	80a097c <_ZN6String7reserveEj>
 80a09b2:	b920      	cbnz	r0, 80a09be <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a09b4:	4620      	mov	r0, r4
 80a09b6:	f7ff ffca 	bl	80a094e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a09ba:	4620      	mov	r0, r4
 80a09bc:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a09be:	462a      	mov	r2, r5
 80a09c0:	4631      	mov	r1, r6
 80a09c2:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a09c4:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a09c6:	f001 fdb3 	bl	80a2530 <memcpy>
	buffer[len] = 0;
 80a09ca:	2100      	movs	r1, #0
 80a09cc:	6822      	ldr	r2, [r4, #0]
 80a09ce:	68a3      	ldr	r3, [r4, #8]
 80a09d0:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a09d2:	e7f2      	b.n	80a09ba <_ZN6String4copyEPKcj+0x16>

080a09d4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a09d4:	b538      	push	{r3, r4, r5, lr}
 80a09d6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a09d8:	460c      	mov	r4, r1
 80a09da:	b149      	cbz	r1, 80a09f0 <_ZN6StringaSEPKc+0x1c>
 80a09dc:	4608      	mov	r0, r1
 80a09de:	f001 fdfc 	bl	80a25da <strlen>
 80a09e2:	4621      	mov	r1, r4
 80a09e4:	4602      	mov	r2, r0
 80a09e6:	4628      	mov	r0, r5
 80a09e8:	f7ff ffdc 	bl	80a09a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a09ec:	4628      	mov	r0, r5
 80a09ee:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a09f0:	f7ff ffad 	bl	80a094e <_ZN6String10invalidateEv>
 80a09f4:	e7fa      	b.n	80a09ec <_ZN6StringaSEPKc+0x18>

080a09f6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a09f6:	b510      	push	{r4, lr}
	buffer = NULL;
 80a09f8:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a09fa:	4604      	mov	r4, r0
 80a09fc:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a09fe:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a0a02:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a0a04:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a0a06:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a0a08:	a901      	add	r1, sp, #4
 80a0a0a:	f7ff ff2a 	bl	80a0862 <itoa>
	*this = buf;
 80a0a0e:	4620      	mov	r0, r4
 80a0a10:	a901      	add	r1, sp, #4
 80a0a12:	f7ff ffdf 	bl	80a09d4 <_ZN6StringaSEPKc>
}
 80a0a16:	4620      	mov	r0, r4
 80a0a18:	b00a      	add	sp, #40	; 0x28
 80a0a1a:	bd10      	pop	{r4, pc}

080a0a1c <_ZN6StringC1Efi>:
	buffer = NULL;
 80a0a1c:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 80a0a1e:	b530      	push	{r4, r5, lr}
 80a0a20:	4604      	mov	r4, r0
 80a0a22:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 80a0a24:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a0a28:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a0a2a:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 80a0a2c:	b2d5      	uxtb	r5, r2
 80a0a2e:	4608      	mov	r0, r1
 80a0a30:	f001 f8ac 	bl	80a1b8c <__aeabi_f2d>
 80a0a34:	462a      	mov	r2, r5
 80a0a36:	ab01      	add	r3, sp, #4
 80a0a38:	f7ff ff28 	bl	80a088c <_Z4dtoadhPc>
        *this = buf;
 80a0a3c:	4620      	mov	r0, r4
 80a0a3e:	a901      	add	r1, sp, #4
 80a0a40:	f7ff ffc8 	bl	80a09d4 <_ZN6StringaSEPKc>
}
 80a0a44:	4620      	mov	r0, r4
 80a0a46:	b00b      	add	sp, #44	; 0x2c
 80a0a48:	bd30      	pop	{r4, r5, pc}

080a0a4a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a4c:	4606      	mov	r6, r0
 80a0a4e:	460d      	mov	r5, r1
  size_t n = 0;
 80a0a50:	2400      	movs	r4, #0
 80a0a52:	188f      	adds	r7, r1, r2
  while (size--) {
 80a0a54:	42bd      	cmp	r5, r7
 80a0a56:	d00c      	beq.n	80a0a72 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0a58:	6833      	ldr	r3, [r6, #0]
 80a0a5a:	4630      	mov	r0, r6
 80a0a5c:	689b      	ldr	r3, [r3, #8]
 80a0a5e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0a62:	4798      	blx	r3
     if (chunk>=0)
 80a0a64:	1e03      	subs	r3, r0, #0
 80a0a66:	db01      	blt.n	80a0a6c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0a68:	441c      	add	r4, r3
  while (size--) {
 80a0a6a:	e7f3      	b.n	80a0a54 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0a6c:	2c00      	cmp	r4, #0
 80a0a6e:	bf08      	it	eq
 80a0a70:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0a72:	4620      	mov	r0, r4
 80a0a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a76 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0a76:	b570      	push	{r4, r5, r6, lr}
 80a0a78:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0a7a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0a7c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a0a7e:	b149      	cbz	r1, 80a0a94 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0a80:	f001 fdab 	bl	80a25da <strlen>
 80a0a84:	682b      	ldr	r3, [r5, #0]
 80a0a86:	4602      	mov	r2, r0
 80a0a88:	4621      	mov	r1, r4
 80a0a8a:	4628      	mov	r0, r5
    }
 80a0a8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a0a90:	68db      	ldr	r3, [r3, #12]
 80a0a92:	4718      	bx	r3
    }
 80a0a94:	bd70      	pop	{r4, r5, r6, pc}

080a0a96 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0a96:	6803      	ldr	r3, [r0, #0]
 80a0a98:	689b      	ldr	r3, [r3, #8]
 80a0a9a:	4718      	bx	r3

080a0a9c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0a9c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0a9e:	210d      	movs	r1, #13
{
 80a0aa0:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0aa2:	f7ff fff8 	bl	80a0a96 <_ZN5Print5printEc>
  n += print('\n');
 80a0aa6:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a0aa8:	4604      	mov	r4, r0
  n += print('\n');
 80a0aaa:	4628      	mov	r0, r5
 80a0aac:	f7ff fff3 	bl	80a0a96 <_ZN5Print5printEc>
  return n;
}
 80a0ab0:	4420      	add	r0, r4
 80a0ab2:	bd38      	pop	{r3, r4, r5, pc}

080a0ab4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a0ab4:	b538      	push	{r3, r4, r5, lr}
 80a0ab6:	4605      	mov	r5, r0
  return write(str);
 80a0ab8:	f7ff ffdd 	bl	80a0a76 <_ZN5Print5writeEPKc>
 80a0abc:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a0abe:	4628      	mov	r0, r5
 80a0ac0:	f7ff ffec 	bl	80a0a9c <_ZN5Print7printlnEv>
  return n;
}
 80a0ac4:	4420      	add	r0, r4
 80a0ac6:	bd38      	pop	{r3, r4, r5, pc}

080a0ac8 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0ac8:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0aca:	2a01      	cmp	r2, #1
 80a0acc:	bf98      	it	ls
 80a0ace:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0ad0:	b530      	push	{r4, r5, lr}
 80a0ad2:	b08b      	sub	sp, #44	; 0x2c
 80a0ad4:	460c      	mov	r4, r1
  *str = '\0';
 80a0ad6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a0ada:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a0adc:	4625      	mov	r5, r4
 80a0ade:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a0ae2:	fb04 5312 	mls	r3, r4, r2, r5
 80a0ae6:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0ae8:	2b09      	cmp	r3, #9
 80a0aea:	bf94      	ite	ls
 80a0aec:	3330      	addls	r3, #48	; 0x30
 80a0aee:	3337      	addhi	r3, #55	; 0x37
 80a0af0:	b2db      	uxtb	r3, r3
  } while(n);
 80a0af2:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0af4:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a0af8:	d9f0      	bls.n	80a0adc <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a0afa:	f7ff ffbc 	bl	80a0a76 <_ZN5Print5writeEPKc>
}
 80a0afe:	b00b      	add	sp, #44	; 0x2c
 80a0b00:	bd30      	pop	{r4, r5, pc}

080a0b02 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a0b02:	2300      	movs	r3, #0
 80a0b04:	6840      	ldr	r0, [r0, #4]
 80a0b06:	461a      	mov	r2, r3
 80a0b08:	4619      	mov	r1, r3
 80a0b0a:	f7ff bdd5 	b.w	80a06b8 <network_on>

080a0b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
 80a0b0e:	680b      	ldr	r3, [r1, #0]
 80a0b10:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
 80a0b12:	b113      	cbz	r3, 80a0b1a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
 80a0b14:	685a      	ldr	r2, [r3, #4]
 80a0b16:	3201      	adds	r2, #1
 80a0b18:	605a      	str	r2, [r3, #4]
      }
 80a0b1a:	4770      	bx	lr

080a0b1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0b1c:	4b01      	ldr	r3, [pc, #4]	; (80a0b24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0b1e:	4a02      	ldr	r2, [pc, #8]	; (80a0b28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0b20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a0b22:	4770      	bx	lr
 80a0b24:	20000094 	.word	0x20000094
 80a0b28:	080a2708 	.word	0x080a2708

080a0b2c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a0b2c:	4b02      	ldr	r3, [pc, #8]	; (80a0b38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a0b2e:	681a      	ldr	r2, [r3, #0]
 80a0b30:	4b02      	ldr	r3, [pc, #8]	; (80a0b3c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a0b32:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a0b34:	4770      	bx	lr
 80a0b36:	bf00      	nop
 80a0b38:	20000000 	.word	0x20000000
 80a0b3c:	20000098 	.word	0x20000098

080a0b40 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0b40:	2100      	movs	r1, #0
 80a0b42:	f7ff bd6d 	b.w	80a0620 <system_delay_ms>

080a0b46 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0b46:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0b48:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a0b4a:	4604      	mov	r4, r0
      if (_M_manager)
 80a0b4c:	b113      	cbz	r3, 80a0b54 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0b4e:	2203      	movs	r2, #3
 80a0b50:	4601      	mov	r1, r0
 80a0b52:	4798      	blx	r3
    }
 80a0b54:	4620      	mov	r0, r4
 80a0b56:	bd10      	pop	{r4, pc}

080a0b58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 80a0b58:	b513      	push	{r0, r1, r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b5a:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 80a0b5c:	460b      	mov	r3, r1
 80a0b5e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0b60:	c803      	ldmia	r0, {r0, r1}
 80a0b62:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0b66:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0b6a:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0b6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a0b72:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0b76:	b002      	add	sp, #8
 80a0b78:	bd10      	pop	{r4, pc}
	...

080a0b7c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a0b7c:	2200      	movs	r2, #0
 80a0b7e:	4b01      	ldr	r3, [pc, #4]	; (80a0b84 <_GLOBAL__sub_I_RGB+0x8>)
 80a0b80:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 80a0b82:	4770      	bx	lr
 80a0b84:	2000009c 	.word	0x2000009c

080a0b88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a0b88:	4b01      	ldr	r3, [pc, #4]	; (80a0b90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a0b8a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a0b8c:	4770      	bx	lr
 80a0b8e:	bf00      	nop
 80a0b90:	20000004 	.word	0x20000004

080a0b94 <serialEventRun>:
{
 80a0b94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a0b96:	4b13      	ldr	r3, [pc, #76]	; (80a0be4 <serialEventRun+0x50>)
 80a0b98:	b143      	cbz	r3, 80a0bac <serialEventRun+0x18>
 80a0b9a:	f000 fc11 	bl	80a13c0 <_Z16_fetch_usbserialv>
 80a0b9e:	6803      	ldr	r3, [r0, #0]
 80a0ba0:	691b      	ldr	r3, [r3, #16]
 80a0ba2:	4798      	blx	r3
 80a0ba4:	2800      	cmp	r0, #0
 80a0ba6:	dd01      	ble.n	80a0bac <serialEventRun+0x18>
        serialEvent();
 80a0ba8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a0bac:	4b0e      	ldr	r3, [pc, #56]	; (80a0be8 <serialEventRun+0x54>)
 80a0bae:	b143      	cbz	r3, 80a0bc2 <serialEventRun+0x2e>
 80a0bb0:	f000 fcb6 	bl	80a1520 <_Z22__fetch_global_Serial1v>
 80a0bb4:	6803      	ldr	r3, [r0, #0]
 80a0bb6:	691b      	ldr	r3, [r3, #16]
 80a0bb8:	4798      	blx	r3
 80a0bba:	2800      	cmp	r0, #0
 80a0bbc:	dd01      	ble.n	80a0bc2 <serialEventRun+0x2e>
        serialEvent1();
 80a0bbe:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a0bc2:	4b0a      	ldr	r3, [pc, #40]	; (80a0bec <serialEventRun+0x58>)
 80a0bc4:	b10b      	cbz	r3, 80a0bca <serialEventRun+0x36>
 80a0bc6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0bca:	4b09      	ldr	r3, [pc, #36]	; (80a0bf0 <serialEventRun+0x5c>)
 80a0bcc:	b143      	cbz	r3, 80a0be0 <serialEventRun+0x4c>
 80a0bce:	f000 fc31 	bl	80a1434 <_Z17_fetch_usbserial1v>
 80a0bd2:	6803      	ldr	r3, [r0, #0]
 80a0bd4:	691b      	ldr	r3, [r3, #16]
 80a0bd6:	4798      	blx	r3
 80a0bd8:	2800      	cmp	r0, #0
 80a0bda:	dd01      	ble.n	80a0be0 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a0bdc:	f3af 8000 	nop.w
}
 80a0be0:	bd08      	pop	{r3, pc}
 80a0be2:	bf00      	nop
	...

080a0bf4 <_post_loop>:
{
 80a0bf4:	b508      	push	{r3, lr}
	serialEventRun();
 80a0bf6:	f7ff ffcd 	bl	80a0b94 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0bfa:	f7ff fc35 	bl	80a0468 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0bfe:	4b01      	ldr	r3, [pc, #4]	; (80a0c04 <_post_loop+0x10>)
 80a0c00:	6018      	str	r0, [r3, #0]
}
 80a0c02:	bd08      	pop	{r3, pc}
 80a0c04:	20000518 	.word	0x20000518

080a0c08 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c08:	4805      	ldr	r0, [pc, #20]	; (80a0c20 <_Z33system_initialize_user_backup_ramv+0x18>)
 80a0c0a:	4a06      	ldr	r2, [pc, #24]	; (80a0c24 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 80a0c0c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0c0e:	1a12      	subs	r2, r2, r0
 80a0c10:	4905      	ldr	r1, [pc, #20]	; (80a0c28 <_Z33system_initialize_user_backup_ramv+0x20>)
 80a0c12:	f001 fc8d 	bl	80a2530 <memcpy>
    __backup_sram_signature = signature;
 80a0c16:	4b05      	ldr	r3, [pc, #20]	; (80a0c2c <_Z33system_initialize_user_backup_ramv+0x24>)
 80a0c18:	4a05      	ldr	r2, [pc, #20]	; (80a0c30 <_Z33system_initialize_user_backup_ramv+0x28>)
 80a0c1a:	601a      	str	r2, [r3, #0]
}
 80a0c1c:	bd08      	pop	{r3, pc}
 80a0c1e:	bf00      	nop
 80a0c20:	40024000 	.word	0x40024000
 80a0c24:	40024004 	.word	0x40024004
 80a0c28:	080a2888 	.word	0x080a2888
 80a0c2c:	40024000 	.word	0x40024000
 80a0c30:	9a271c1e 	.word	0x9a271c1e

080a0c34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c34:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a0c36:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c38:	461a      	mov	r2, r3
 80a0c3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c3e:	9300      	str	r3, [sp, #0]
 80a0c40:	f7ff fd10 	bl	80a0664 <system_ctrl_set_result>
}
 80a0c44:	b003      	add	sp, #12
 80a0c46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a0c4c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a0c4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a0c4e:	8843      	ldrh	r3, [r0, #2]
 80a0c50:	2b0a      	cmp	r3, #10
 80a0c52:	d008      	beq.n	80a0c66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a0c54:	2b50      	cmp	r3, #80	; 0x50
 80a0c56:	d10b      	bne.n	80a0c70 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a0c58:	4b09      	ldr	r3, [pc, #36]	; (80a0c80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a0c5a:	681b      	ldr	r3, [r3, #0]
 80a0c5c:	b14b      	cbz	r3, 80a0c72 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a0c5e:	b003      	add	sp, #12
 80a0c60:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a0c64:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a0c66:	f7ff ffe5 	bl	80a0c34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a0c6a:	b003      	add	sp, #12
 80a0c6c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a0c70:	2300      	movs	r3, #0
 80a0c72:	461a      	mov	r2, r3
 80a0c74:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a0c78:	9300      	str	r3, [sp, #0]
 80a0c7a:	f7ff fcf3 	bl	80a0664 <system_ctrl_set_result>
}
 80a0c7e:	e7f4      	b.n	80a0c6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a0c80:	200000b0 	.word	0x200000b0

080a0c84 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0c84:	2100      	movs	r1, #0
{
 80a0c86:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a0c88:	4811      	ldr	r0, [pc, #68]	; (80a0cd0 <module_user_init_hook+0x4c>)
 80a0c8a:	f7ff fd95 	bl	80a07b8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 80a0c8e:	4b11      	ldr	r3, [pc, #68]	; (80a0cd4 <module_user_init_hook+0x50>)
 80a0c90:	681a      	ldr	r2, [r3, #0]
 80a0c92:	4b11      	ldr	r3, [pc, #68]	; (80a0cd8 <module_user_init_hook+0x54>)
 80a0c94:	429a      	cmp	r2, r3
 80a0c96:	bf0c      	ite	eq
 80a0c98:	2201      	moveq	r2, #1
 80a0c9a:	2200      	movne	r2, #0
 80a0c9c:	4b0f      	ldr	r3, [pc, #60]	; (80a0cdc <module_user_init_hook+0x58>)
 80a0c9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a0ca0:	d001      	beq.n	80a0ca6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 80a0ca2:	f7ff ffb1 	bl	80a0c08 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0ca6:	f7ff fbd7 	bl	80a0458 <HAL_RNG_GetRandomNumber>
 80a0caa:	4604      	mov	r4, r0
    srand(seed);
 80a0cac:	f001 fc56 	bl	80a255c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a0cb0:	4b0b      	ldr	r3, [pc, #44]	; (80a0ce0 <module_user_init_hook+0x5c>)
 80a0cb2:	b113      	cbz	r3, 80a0cba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 80a0cb4:	4620      	mov	r0, r4
 80a0cb6:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0cba:	2100      	movs	r1, #0
 80a0cbc:	4808      	ldr	r0, [pc, #32]	; (80a0ce0 <module_user_init_hook+0x5c>)
 80a0cbe:	f7ff fd4b 	bl	80a0758 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0cc6:	2100      	movs	r1, #0
 80a0cc8:	4806      	ldr	r0, [pc, #24]	; (80a0ce4 <module_user_init_hook+0x60>)
 80a0cca:	f7ff bcc1 	b.w	80a0650 <system_ctrl_set_app_request_handler>
 80a0cce:	bf00      	nop
 80a0cd0:	080a0b89 	.word	0x080a0b89
 80a0cd4:	40024000 	.word	0x40024000
 80a0cd8:	9a271c1e 	.word	0x9a271c1e
 80a0cdc:	200000ac 	.word	0x200000ac
 80a0ce0:	00000000 	.word	0x00000000
 80a0ce4:	080a0c4d 	.word	0x080a0c4d

080a0ce8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0ce8:	4770      	bx	lr

080a0cea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 80a0cea:	2000      	movs	r0, #0
 80a0cec:	4770      	bx	lr

080a0cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0cee:	b510      	push	{r4, lr}
 80a0cf0:	4604      	mov	r4, r0
 80a0cf2:	2110      	movs	r1, #16
 80a0cf4:	f000 fdde 	bl	80a18b4 <_ZdlPvj>
 80a0cf8:	4620      	mov	r0, r4
 80a0cfa:	bd10      	pop	{r4, pc}

080a0cfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 80a0cfc:	b508      	push	{r3, lr}
      { delete this; }
 80a0cfe:	f7ff fff6 	bl	80a0cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0d02:	bd08      	pop	{r3, pc}

080a0d04 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0d04:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a0d06:	b530      	push	{r4, r5, lr}
        type_(type) {
 80a0d08:	f64f 749c 	movw	r4, #65436	; 0xff9c
 80a0d0c:	6002      	str	r2, [r0, #0]
 80a0d0e:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0d10:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d12:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a0d14:	680c      	ldr	r4, [r1, #0]
 80a0d16:	8085      	strh	r5, [r0, #4]
 80a0d18:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d1a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a0d1c:	bd30      	pop	{r4, r5, pc}

080a0d1e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a0d1e:	b510      	push	{r4, lr}
 80a0d20:	4604      	mov	r4, r0
    free((void*)msg_);
 80a0d22:	6800      	ldr	r0, [r0, #0]
 80a0d24:	f7ff fd28 	bl	80a0778 <free>
}
 80a0d28:	4620      	mov	r0, r4
 80a0d2a:	bd10      	pop	{r4, pc}

080a0d2c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 80a0d2c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0d2e:	68c4      	ldr	r4, [r0, #12]
 80a0d30:	b1f4      	cbz	r4, 80a0d70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 80a0d32:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0d34:	2b02      	cmp	r3, #2
 80a0d36:	d103      	bne.n	80a0d40 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a0d38:	f104 000c 	add.w	r0, r4, #12
 80a0d3c:	f7ff ffef 	bl	80a0d1e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 80a0d40:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0d42:	b135      	cbz	r5, 80a0d52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0d44:	4628      	mov	r0, r5
 80a0d46:	f7ff fefe 	bl	80a0b46 <_ZNSt14_Function_baseD1Ev>
 80a0d4a:	2110      	movs	r1, #16
 80a0d4c:	4628      	mov	r0, r5
 80a0d4e:	f000 fdb1 	bl	80a18b4 <_ZdlPvj>
 80a0d52:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0d54:	b135      	cbz	r5, 80a0d64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a0d56:	4628      	mov	r0, r5
 80a0d58:	f7ff fef5 	bl	80a0b46 <_ZNSt14_Function_baseD1Ev>
 80a0d5c:	2110      	movs	r1, #16
 80a0d5e:	4628      	mov	r0, r5
 80a0d60:	f000 fda8 	bl	80a18b4 <_ZdlPvj>
 80a0d64:	4620      	mov	r0, r4
 80a0d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0d6a:	2114      	movs	r1, #20
 80a0d6c:	f000 bda2 	b.w	80a18b4 <_ZdlPvj>
 80a0d70:	bd38      	pop	{r3, r4, r5, pc}

080a0d72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0d72:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0d74:	460e      	mov	r6, r1
 80a0d76:	4604      	mov	r4, r0
 80a0d78:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0d7c:	460d      	mov	r5, r1
 80a0d7e:	a801      	add	r0, sp, #4
 80a0d80:	4631      	mov	r1, r6
 80a0d82:	9300      	str	r3, [sp, #0]
 80a0d84:	f7ff fec3 	bl	80a0b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0d88:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0d8a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0d8c:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 80a0d8e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a0d90:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 80a0d92:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 80a0d94:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0d96:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 80a0d98:	f7ff f9b6 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d9c:	4630      	mov	r0, r6
 80a0d9e:	f7ff f9b3 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 80a0da2:	4628      	mov	r0, r5
 80a0da4:	2108      	movs	r1, #8
 80a0da6:	f000 fd85 	bl	80a18b4 <_ZdlPvj>
        return p;
    }
 80a0daa:	4620      	mov	r0, r4
 80a0dac:	b002      	add	sp, #8
 80a0dae:	bd70      	pop	{r4, r5, r6, pc}

080a0db0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0db0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0db2:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0db4:	b90a      	cbnz	r2, 80a0dba <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0db6:	f000 fd81 	bl	80a18bc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0dba:	68c3      	ldr	r3, [r0, #12]
    }
 80a0dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0dc0:	4718      	bx	r3

080a0dc2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0dc2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0dc4:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80a0dc6:	f100 0110 	add.w	r1, r0, #16
 80a0dca:	f7ff fff1 	bl	80a0db0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 80a0dce:	bd08      	pop	{r3, pc}

080a0dd0 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 80a0dd0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 80a0dd2:	b510      	push	{r4, lr}
      if (_M_empty())
 80a0dd4:	b90a      	cbnz	r2, 80a0dda <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0dd6:	f000 fd71 	bl	80a18bc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0dda:	68c3      	ldr	r3, [r0, #12]
    }
 80a0ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0de0:	4718      	bx	r3

080a0de2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0de2:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 80a0de4:	6800      	ldr	r0, [r0, #0]
 80a0de6:	f100 0110 	add.w	r1, r0, #16
 80a0dea:	f7ff fff1 	bl	80a0dd0 <_ZNKSt8functionIFvRKbEEclES1_>
      }
 80a0dee:	bd08      	pop	{r3, pc}

080a0df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0df0:	b538      	push	{r3, r4, r5, lr}
 80a0df2:	2300      	movs	r3, #0
 80a0df4:	4604      	mov	r4, r0
 80a0df6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0df8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0dfa:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0dfc:	f7ff f94b 	bl	80a0096 <_Znwj>
 80a0e00:	b128      	cbz	r0, 80a0e0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 80a0e02:	2301      	movs	r3, #1
 80a0e04:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 80a0e08:	4b02      	ldr	r3, [pc, #8]	; (80a0e14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a0e0a:	60c5      	str	r5, [r0, #12]
 80a0e0c:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0e0e:	6020      	str	r0, [r4, #0]
	}
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	bd38      	pop	{r3, r4, r5, pc}
 80a0e14:	080a2730 	.word	0x080a2730

080a0e18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 80a0e18:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a0e1a:	2300      	movs	r3, #0
 80a0e1c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a0e1e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a0e20:	4604      	mov	r4, r0
 80a0e22:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a0e24:	b12b      	cbz	r3, 80a0e32 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0e26:	2202      	movs	r2, #2
 80a0e28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0e2a:	68eb      	ldr	r3, [r5, #12]
 80a0e2c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0e2e:	68ab      	ldr	r3, [r5, #8]
 80a0e30:	60a3      	str	r3, [r4, #8]
    }
 80a0e32:	4620      	mov	r0, r4
 80a0e34:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 80a0e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e3a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a0e3c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a0e3e:	4668      	mov	r0, sp
 80a0e40:	f7ff ff60 	bl	80a0d04 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a0e44:	f04f 0302 	mov.w	r3, #2
 80a0e48:	e8d4 2f4f 	ldrexb	r2, [r4]
 80a0e4c:	2a00      	cmp	r2, #0
 80a0e4e:	d103      	bne.n	80a0e58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0e50:	e8c4 3f41 	strexb	r1, r3, [r4]
 80a0e54:	2900      	cmp	r1, #0
 80a0e56:	d1f7      	bne.n	80a0e48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 80a0e58:	d125      	bne.n	80a0ea6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
 80a0e5a:	f104 050c 	add.w	r5, r4, #12
 80a0e5e:	4669      	mov	r1, sp
 80a0e60:	4628      	mov	r0, r5
 80a0e62:	f7ff ff4f 	bl	80a0d04 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 80a0e66:	2301      	movs	r3, #1
 80a0e68:	f3bf 8f5b 	dmb	ish
 80a0e6c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a0e6e:	2000      	movs	r0, #0
 80a0e70:	f3bf 8f5b 	dmb	ish
 80a0e74:	f104 0308 	add.w	r3, r4, #8
 80a0e78:	e853 6f00 	ldrex	r6, [r3]
 80a0e7c:	e843 0200 	strex	r2, r0, [r3]
 80a0e80:	2a00      	cmp	r2, #0
 80a0e82:	d1f9      	bne.n	80a0e78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
 80a0e84:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a0e88:	b16e      	cbz	r6, 80a0ea6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
 80a0e8a:	f7ff fbd1 	bl	80a0630 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a0e8e:	b178      	cbz	r0, 80a0eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0e90:	4629      	mov	r1, r5
 80a0e92:	4630      	mov	r0, r6
 80a0e94:	f7ff ff8c 	bl	80a0db0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 80a0e98:	4630      	mov	r0, r6
 80a0e9a:	f7ff fe54 	bl	80a0b46 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a0e9e:	2110      	movs	r1, #16
 80a0ea0:	4630      	mov	r0, r6
 80a0ea2:	f000 fd07 	bl	80a18b4 <_ZdlPvj>
        p_->setError(std::move(error));
 80a0ea6:	4668      	mov	r0, sp
 80a0ea8:	f7ff ff39 	bl	80a0d1e <_ZN8particle5ErrorD1Ev>
    }
 80a0eac:	b009      	add	sp, #36	; 0x24
 80a0eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0eb0:	4631      	mov	r1, r6
 80a0eb2:	a802      	add	r0, sp, #8
 80a0eb4:	f7ff ffb0 	bl	80a0e18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a0eb8:	68e0      	ldr	r0, [r4, #12]
 80a0eba:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a0ebe:	b108      	cbz	r0, 80a0ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
 80a0ec0:	f001 fb70 	bl	80a25a4 <strdup>
        type_(type) {
 80a0ec4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0ec6:	2010      	movs	r0, #16
 80a0ec8:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a0ecc:	f7ff f8e3 	bl	80a0096 <_Znwj>
 80a0ed0:	4605      	mov	r5, r0
 80a0ed2:	b1e8      	cbz	r0, 80a0f10 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
 80a0ed4:	2700      	movs	r7, #0
 80a0ed6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0ed8:	2018      	movs	r0, #24
 80a0eda:	f7ff f8dc 	bl	80a0096 <_Znwj>
 80a0ede:	4604      	mov	r4, r0
 80a0ee0:	b188      	cbz	r0, 80a0f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
 80a0ee2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a0ee4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a0ee6:	a802      	add	r0, sp, #8
 80a0ee8:	f7ff fe36 	bl	80a0b58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0eec:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a0eee:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0ef0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0ef2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0ef4:	9204      	str	r2, [sp, #16]
 80a0ef6:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0ef8:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a0efa:	60e3      	str	r3, [r4, #12]
 80a0efc:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 80a0f00:	9205      	str	r2, [sp, #20]
 80a0f02:	f7ff feff 	bl	80a0d04 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f06:	4b08      	ldr	r3, [pc, #32]	; (80a0f28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0f08:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a0f0a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0f0c:	4b07      	ldr	r3, [pc, #28]	; (80a0f2c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
 80a0f0e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 80a0f10:	a806      	add	r0, sp, #24
 80a0f12:	f7ff ff04 	bl	80a0d1e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a0f16:	a802      	add	r0, sp, #8
 80a0f18:	f7ff fe15 	bl	80a0b46 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0f1c:	2200      	movs	r2, #0
 80a0f1e:	4629      	mov	r1, r5
 80a0f20:	4803      	ldr	r0, [pc, #12]	; (80a0f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
 80a0f22:	f7ff fb8d 	bl	80a0640 <application_thread_invoke>
 80a0f26:	e7b7      	b.n	80a0e98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
 80a0f28:	080a0dc3 	.word	0x080a0dc3
 80a0f2c:	080a1059 	.word	0x080a1059
 80a0f30:	080a1569 	.word	0x080a1569

080a0f34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0f38:	b08a      	sub	sp, #40	; 0x28
 80a0f3a:	4605      	mov	r5, r0
 80a0f3c:	460c      	mov	r4, r1
 80a0f3e:	4617      	mov	r7, r2
 80a0f40:	4698      	mov	r8, r3
 80a0f42:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0f46:	f7ff fbf7 	bl	80a0738 <spark_cloud_flag_connected>
 80a0f4a:	ae07      	add	r6, sp, #28
    if (!connected()) {
 80a0f4c:	4682      	mov	sl, r0
 80a0f4e:	bb38      	cbnz	r0, 80a0fa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 80a0f50:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a0f54:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0f56:	a905      	add	r1, sp, #20
 80a0f58:	4630      	mov	r0, r6
 80a0f5a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0f5e:	f7ff fed1 	bl	80a0d04 <_ZN8particle5ErrorC1EOS0_>
 80a0f62:	2014      	movs	r0, #20
 80a0f64:	f7ff f897 	bl	80a0096 <_Znwj>
 80a0f68:	4604      	mov	r4, r0
 80a0f6a:	b148      	cbz	r0, 80a0f80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0f6c:	2302      	movs	r3, #2
 80a0f6e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0f70:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0f72:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0f76:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 80a0f78:	4631      	mov	r1, r6
 80a0f7a:	300c      	adds	r0, #12
 80a0f7c:	f7ff fec2 	bl	80a0d04 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0f80:	4628      	mov	r0, r5
	: __shared_count(__p)
 80a0f82:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0f84:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 80a0f88:	f7ff ff32 	bl	80a0df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a0f8c:	4630      	mov	r0, r6
 80a0f8e:	f7ff fec6 	bl	80a0d1e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a0f92:	a805      	add	r0, sp, #20
 80a0f94:	f7ff fec3 	bl	80a0d1e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
 80a0f98:	4628      	mov	r0, r5
 80a0f9a:	b00a      	add	sp, #40	; 0x28
 80a0f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0fa0:	230c      	movs	r3, #12
 80a0fa2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0fa6:	2014      	movs	r0, #20
 80a0fa8:	e9cd aa08 	strd	sl, sl, [sp, #32]
 80a0fac:	9307      	str	r3, [sp, #28]
 80a0fae:	f7ff f872 	bl	80a0096 <_Znwj>
 80a0fb2:	4601      	mov	r1, r0
 80a0fb4:	b128      	cbz	r0, 80a0fc2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0fb6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
 80a0fba:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0fbe:	f880 a001 	strb.w	sl, [r0, #1]
 80a0fc2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 80a0fc4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 80a0fc6:	f7ff ff13 	bl	80a0df0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 80a0fca:	4b22      	ldr	r3, [pc, #136]	; (80a1054 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0fcc:	2008      	movs	r0, #8
 80a0fce:	9308      	str	r3, [sp, #32]
 80a0fd0:	f7ff f861 	bl	80a0096 <_Znwj>
 80a0fd4:	4682      	mov	sl, r0
 80a0fd6:	b128      	cbz	r0, 80a0fe4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0fd8:	9b03      	ldr	r3, [sp, #12]
 80a0fda:	a904      	add	r1, sp, #16
 80a0fdc:	f840 3b04 	str.w	r3, [r0], #4
 80a0fe0:	f7ff fd95 	bl	80a0b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0fe4:	4642      	mov	r2, r8
 80a0fe6:	4639      	mov	r1, r7
 80a0fe8:	4620      	mov	r0, r4
 80a0fea:	9600      	str	r6, [sp, #0]
 80a0fec:	fa5f f389 	uxtb.w	r3, r9
    d.handler_data = p.dataPtr();
 80a0ff0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0ff4:	f7ff fba8 	bl	80a0748 <spark_send_event>
 80a0ff8:	b9b8      	cbnz	r0, 80a102a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
 80a0ffa:	9b03      	ldr	r3, [sp, #12]
 80a0ffc:	785b      	ldrb	r3, [r3, #1]
 80a0ffe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1002:	b993      	cbnz	r3, 80a102a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
 80a1004:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 80a1008:	a905      	add	r1, sp, #20
 80a100a:	a803      	add	r0, sp, #12
 80a100c:	9205      	str	r2, [sp, #20]
 80a100e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1012:	f7ff ff11 	bl	80a0e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1016:	a805      	add	r0, sp, #20
 80a1018:	f7ff fe81 	bl	80a0d1e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a101c:	a805      	add	r0, sp, #20
 80a101e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1020:	f7ff fea7 	bl	80a0d72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 80a1024:	a806      	add	r0, sp, #24
 80a1026:	f7ff f86f 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a102a:	9b03      	ldr	r3, [sp, #12]
 80a102c:	a904      	add	r1, sp, #16
 80a102e:	a806      	add	r0, sp, #24
 80a1030:	9305      	str	r3, [sp, #20]
 80a1032:	f7ff fd6c 	bl	80a0b0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1036:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1038:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a103a:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 80a103c:	2300      	movs	r3, #0
	_M_pi = __tmp;
 80a103e:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 80a1040:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 80a1042:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 80a1044:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 80a1046:	f7ff f85f 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a104a:	a804      	add	r0, sp, #16
 80a104c:	f7ff f85c 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 80a1050:	e7a2      	b.n	80a0f98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 80a1052:	bf00      	nop
 80a1054:	080a111d 	.word	0x080a111d

080a1058 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
 80a1058:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a105a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a105c:	4605      	mov	r5, r0
	  switch (__op)
 80a105e:	d007      	beq.n	80a1070 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
 80a1060:	2a03      	cmp	r2, #3
 80a1062:	d018      	beq.n	80a1096 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
 80a1064:	2a01      	cmp	r2, #1
 80a1066:	d101      	bne.n	80a106c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a1068:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a106a:	6003      	str	r3, [r0, #0]
	}
 80a106c:	2000      	movs	r0, #0
 80a106e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1070:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 80a1072:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a1074:	f7ff f80f 	bl	80a0096 <_Znwj>
 80a1078:	4604      	mov	r4, r0
 80a107a:	b150      	cbz	r0, 80a1092 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a107c:	4631      	mov	r1, r6
 80a107e:	f7ff fecb 	bl	80a0e18 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 80a1082:	6930      	ldr	r0, [r6, #16]
 80a1084:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1088:	b108      	cbz	r0, 80a108e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 80a108a:	f001 fa8b 	bl	80a25a4 <strdup>
        type_(type) {
 80a108e:	6120      	str	r0, [r4, #16]
 80a1090:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 80a1092:	602c      	str	r4, [r5, #0]
	}
 80a1094:	e7ea      	b.n	80a106c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1096:	6804      	ldr	r4, [r0, #0]
 80a1098:	2c00      	cmp	r4, #0
 80a109a:	d0e7      	beq.n	80a106c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
 80a109c:	f104 0010 	add.w	r0, r4, #16
 80a10a0:	f7ff fe3d 	bl	80a0d1e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 80a10a4:	4620      	mov	r0, r4
 80a10a6:	f7ff fd4e 	bl	80a0b46 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a10aa:	2118      	movs	r1, #24
 80a10ac:	4620      	mov	r0, r4
 80a10ae:	f000 fc01 	bl	80a18b4 <_ZdlPvj>
 80a10b2:	e7db      	b.n	80a106c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

080a10b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80a10b4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 80a10b6:	2300      	movs	r3, #0
 80a10b8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
 80a10ba:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 80a10bc:	4604      	mov	r4, r0
 80a10be:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 80a10c0:	b12b      	cbz	r3, 80a10ce <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a10c2:	2202      	movs	r2, #2
 80a10c4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a10c6:	68eb      	ldr	r3, [r5, #12]
 80a10c8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a10ca:	68ab      	ldr	r3, [r5, #8]
 80a10cc:	60a3      	str	r3, [r4, #8]
    }
 80a10ce:	4620      	mov	r0, r4
 80a10d0:	bd38      	pop	{r3, r4, r5, pc}

080a10d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
 80a10d2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a10d4:	b570      	push	{r4, r5, r6, lr}
 80a10d6:	4604      	mov	r4, r0
	  switch (__op)
 80a10d8:	d007      	beq.n	80a10ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
 80a10da:	2a03      	cmp	r2, #3
 80a10dc:	d012      	beq.n	80a1104 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
 80a10de:	2a01      	cmp	r2, #1
 80a10e0:	d101      	bne.n	80a10e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
 80a10e2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a10e4:	6003      	str	r3, [r0, #0]
	}
 80a10e6:	2000      	movs	r0, #0
 80a10e8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
 80a10ea:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 80a10ec:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 80a10ee:	f7fe ffd2 	bl	80a0096 <_Znwj>
 80a10f2:	4605      	mov	r5, r0
 80a10f4:	b120      	cbz	r0, 80a1100 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 80a10f6:	4631      	mov	r1, r6
 80a10f8:	f7ff ffdc 	bl	80a10b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a10fc:	7c33      	ldrb	r3, [r6, #16]
 80a10fe:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 80a1100:	6025      	str	r5, [r4, #0]
	}
 80a1102:	e7f0      	b.n	80a10e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
 80a1104:	6804      	ldr	r4, [r0, #0]
 80a1106:	2c00      	cmp	r4, #0
 80a1108:	d0ed      	beq.n	80a10e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
 80a110a:	4620      	mov	r0, r4
 80a110c:	f7ff fd1b 	bl	80a0b46 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 80a1110:	2114      	movs	r1, #20
 80a1112:	4620      	mov	r0, r4
 80a1114:	f000 fbce 	bl	80a18b4 <_ZdlPvj>
 80a1118:	e7e5      	b.n	80a10e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

080a111c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a111c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a111e:	4604      	mov	r4, r0
 80a1120:	b089      	sub	sp, #36	; 0x24
 80a1122:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1124:	a801      	add	r0, sp, #4
 80a1126:	4611      	mov	r1, r2
 80a1128:	f7ff fe23 	bl	80a0d72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a112c:	b1a4      	cbz	r4, 80a1158 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a112e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 80a1130:	b11d      	cbz	r5, 80a113a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 80a1132:	4628      	mov	r0, r5
 80a1134:	f001 fa36 	bl	80a25a4 <strdup>
 80a1138:	4605      	mov	r5, r0
 80a113a:	a801      	add	r0, sp, #4
 80a113c:	a903      	add	r1, sp, #12
        type_(type) {
 80a113e:	9503      	str	r5, [sp, #12]
 80a1140:	f8ad 4010 	strh.w	r4, [sp, #16]
 80a1144:	f7ff fe78 	bl	80a0e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1148:	a803      	add	r0, sp, #12
 80a114a:	f7ff fde8 	bl	80a0d1e <_ZN8particle5ErrorD1Ev>
 80a114e:	a802      	add	r0, sp, #8
 80a1150:	f7fe ffda 	bl	80a0108 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a1154:	b009      	add	sp, #36	; 0x24
 80a1156:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 80a1158:	2301      	movs	r3, #1
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a115a:	9d01      	ldr	r5, [sp, #4]
 80a115c:	e8d5 2f4f 	ldrexb	r2, [r5]
 80a1160:	2a00      	cmp	r2, #0
 80a1162:	d103      	bne.n	80a116c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 80a1164:	e8c5 3f41 	strexb	r1, r3, [r5]
 80a1168:	2900      	cmp	r1, #0
 80a116a:	d1f7      	bne.n	80a115c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 80a116c:	d1ef      	bne.n	80a114e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 80a116e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 80a1170:	f3bf 8f5b 	dmb	ish
 80a1174:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 80a1176:	f3bf 8f5b 	dmb	ish
 80a117a:	1d2b      	adds	r3, r5, #4
 80a117c:	e853 6f00 	ldrex	r6, [r3]
 80a1180:	e843 4200 	strex	r2, r4, [r3]
 80a1184:	2a00      	cmp	r2, #0
 80a1186:	d1f9      	bne.n	80a117c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
 80a1188:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
 80a118c:	2e00      	cmp	r6, #0
 80a118e:	d0de      	beq.n	80a114e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 80a1190:	4620      	mov	r0, r4
 80a1192:	f7ff fa4d 	bl	80a0630 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 80a1196:	4607      	mov	r7, r0
 80a1198:	b160      	cbz	r0, 80a11b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a119a:	4630      	mov	r0, r6
 80a119c:	f105 010c 	add.w	r1, r5, #12
 80a11a0:	f7ff fe16 	bl	80a0dd0 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 80a11a4:	4630      	mov	r0, r6
 80a11a6:	f7ff fcce 	bl	80a0b46 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 80a11aa:	2110      	movs	r1, #16
 80a11ac:	4630      	mov	r0, r6
 80a11ae:	f000 fb81 	bl	80a18b4 <_ZdlPvj>
 80a11b2:	e7cc      	b.n	80a114e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a11b4:	4631      	mov	r1, r6
 80a11b6:	a803      	add	r0, sp, #12
 80a11b8:	f7ff ff7c 	bl	80a10b4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a11bc:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a11be:	2010      	movs	r0, #16
 80a11c0:	f88d 301c 	strb.w	r3, [sp, #28]
 80a11c4:	f7fe ff67 	bl	80a0096 <_Znwj>
 80a11c8:	4605      	mov	r5, r0
 80a11ca:	b1d0      	cbz	r0, 80a1202 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
 80a11cc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11ce:	2014      	movs	r0, #20
 80a11d0:	f7fe ff61 	bl	80a0096 <_Znwj>
 80a11d4:	4604      	mov	r4, r0
 80a11d6:	b178      	cbz	r0, 80a11f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
	std::swap(_M_functor, __x._M_functor);
 80a11d8:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 80a11da:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 80a11dc:	a803      	add	r0, sp, #12
 80a11de:	f7ff fcbb 	bl	80a0b58 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a11e4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11e6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a11e8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a11ea:	9205      	str	r2, [sp, #20]
 80a11ec:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a11ee:	60e3      	str	r3, [r4, #12]
 80a11f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a11f4:	9206      	str	r2, [sp, #24]
 80a11f6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 80a11f8:	4b06      	ldr	r3, [pc, #24]	; (80a1214 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a11fa:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 80a11fc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a11fe:	4b06      	ldr	r3, [pc, #24]	; (80a1218 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 80a1200:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 80a1202:	a803      	add	r0, sp, #12
 80a1204:	f7ff fc9f 	bl	80a0b46 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1208:	2200      	movs	r2, #0
 80a120a:	4629      	mov	r1, r5
 80a120c:	4803      	ldr	r0, [pc, #12]	; (80a121c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
 80a120e:	f7ff fa17 	bl	80a0640 <application_thread_invoke>
 80a1212:	e7c7      	b.n	80a11a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
 80a1214:	080a0de3 	.word	0x080a0de3
 80a1218:	080a10d3 	.word	0x080a10d3
 80a121c:	080a1569 	.word	0x080a1569

080a1220 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1220:	4770      	bx	lr

080a1222 <_ZN9IPAddressD0Ev>:
 80a1222:	b510      	push	{r4, lr}
 80a1224:	4604      	mov	r4, r0
 80a1226:	2118      	movs	r1, #24
 80a1228:	f000 fb44 	bl	80a18b4 <_ZdlPvj>
 80a122c:	4620      	mov	r0, r4
 80a122e:	bd10      	pop	{r4, pc}

080a1230 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1232:	460e      	mov	r6, r1
 80a1234:	2400      	movs	r4, #0
 80a1236:	f100 0708 	add.w	r7, r0, #8
 80a123a:	1d05      	adds	r5, r0, #4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a123c:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a1240:	220a      	movs	r2, #10
 80a1242:	4630      	mov	r0, r6
 80a1244:	f7ff fc40 	bl	80a0ac8 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1248:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a124a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a124c:	d101      	bne.n	80a1252 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a124e:	4620      	mov	r0, r4
 80a1250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a1252:	2c00      	cmp	r4, #0
 80a1254:	d0f2      	beq.n	80a123c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1256:	212e      	movs	r1, #46	; 0x2e
 80a1258:	4630      	mov	r0, r6
 80a125a:	f7ff fc1c 	bl	80a0a96 <_ZN5Print5printEc>
 80a125e:	4404      	add	r4, r0
 80a1260:	e7ec      	b.n	80a123c <_ZNK9IPAddress7printToER5Print+0xc>
	...

080a1264 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a1264:	b510      	push	{r4, lr}
 80a1266:	4604      	mov	r4, r0
 80a1268:	4b04      	ldr	r3, [pc, #16]	; (80a127c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a126a:	2211      	movs	r2, #17
 80a126c:	2100      	movs	r1, #0
 80a126e:	f840 3b04 	str.w	r3, [r0], #4
 80a1272:	f001 f96b 	bl	80a254c <memset>
}
 80a1276:	4620      	mov	r0, r4
 80a1278:	bd10      	pop	{r4, pc}
 80a127a:	bf00      	nop
 80a127c:	080a274c 	.word	0x080a274c

080a1280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1280:	4603      	mov	r3, r0
 80a1282:	4a07      	ldr	r2, [pc, #28]	; (80a12a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1284:	b510      	push	{r4, lr}
 80a1286:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a128a:	f101 0210 	add.w	r2, r1, #16
 80a128e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1292:	4291      	cmp	r1, r2
 80a1294:	f843 4b04 	str.w	r4, [r3], #4
 80a1298:	d1f9      	bne.n	80a128e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a129a:	780a      	ldrb	r2, [r1, #0]
 80a129c:	701a      	strb	r2, [r3, #0]
}
 80a129e:	bd10      	pop	{r4, pc}
 80a12a0:	080a274c 	.word	0x080a274c

080a12a4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a12a4:	4a02      	ldr	r2, [pc, #8]	; (80a12b0 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a12a6:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a12aa:	2204      	movs	r2, #4
 80a12ac:	7502      	strb	r2, [r0, #20]
}
 80a12ae:	4770      	bx	lr
 80a12b0:	080a274c 	.word	0x080a274c

080a12b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a12b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a12b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a12ba:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a12be:	2304      	movs	r3, #4
 80a12c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a12c4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a12c8:	6044      	str	r4, [r0, #4]
 80a12ca:	7503      	strb	r3, [r0, #20]
}
 80a12cc:	bd10      	pop	{r4, pc}
	...

080a12d0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a12d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a12d2:	4d04      	ldr	r5, [pc, #16]	; (80a12e4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a12d4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a12d6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a12da:	9500      	str	r5, [sp, #0]
 80a12dc:	f7ff ffea 	bl	80a12b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a12e0:	b003      	add	sp, #12
 80a12e2:	bd30      	pop	{r4, r5, pc}
 80a12e4:	080a274c 	.word	0x080a274c

080a12e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a12e8:	7441      	strb	r1, [r0, #17]
}
 80a12ea:	4770      	bx	lr

080a12ec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a12ec:	4770      	bx	lr

080a12ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a12ee:	4770      	bx	lr

080a12f0 <_ZN9USBSerial4readEv>:
{
 80a12f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a12f2:	2100      	movs	r1, #0
 80a12f4:	7c00      	ldrb	r0, [r0, #16]
 80a12f6:	f7ff f96b 	bl	80a05d0 <HAL_USB_USART_Receive_Data>
}
 80a12fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a12fe:	bd08      	pop	{r3, pc}

080a1300 <_ZN9USBSerial4peekEv>:
{
 80a1300:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1302:	2101      	movs	r1, #1
 80a1304:	7c00      	ldrb	r0, [r0, #16]
 80a1306:	f7ff f963 	bl	80a05d0 <HAL_USB_USART_Receive_Data>
}
 80a130a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a130e:	bd08      	pop	{r3, pc}

080a1310 <_ZN9USBSerial17availableForWriteEv>:
{
 80a1310:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1312:	7c00      	ldrb	r0, [r0, #16]
 80a1314:	f7ff f954 	bl	80a05c0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1318:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a131c:	bd08      	pop	{r3, pc}

080a131e <_ZN9USBSerial9availableEv>:
{
 80a131e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1320:	7c00      	ldrb	r0, [r0, #16]
 80a1322:	f7ff f945 	bl	80a05b0 <HAL_USB_USART_Available_Data>
}
 80a1326:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a132a:	bd08      	pop	{r3, pc}

080a132c <_ZN9USBSerial5writeEh>:
{
 80a132c:	b538      	push	{r3, r4, r5, lr}
 80a132e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1330:	7c00      	ldrb	r0, [r0, #16]
{
 80a1332:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1334:	f7ff f944 	bl	80a05c0 <HAL_USB_USART_Available_Data_For_Write>
 80a1338:	2800      	cmp	r0, #0
 80a133a:	dc01      	bgt.n	80a1340 <_ZN9USBSerial5writeEh+0x14>
 80a133c:	7c60      	ldrb	r0, [r4, #17]
 80a133e:	b128      	cbz	r0, 80a134c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1340:	4629      	mov	r1, r5
 80a1342:	7c20      	ldrb	r0, [r4, #16]
 80a1344:	f7ff f94c 	bl	80a05e0 <HAL_USB_USART_Send_Data>
 80a1348:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a134c:	bd38      	pop	{r3, r4, r5, pc}

080a134e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a134e:	7c00      	ldrb	r0, [r0, #16]
 80a1350:	f7ff b94e 	b.w	80a05f0 <HAL_USB_USART_Flush_Data>

080a1354 <_ZN9USBSerialD0Ev>:
 80a1354:	b510      	push	{r4, lr}
 80a1356:	4604      	mov	r4, r0
 80a1358:	2114      	movs	r1, #20
 80a135a:	f000 faab 	bl	80a18b4 <_ZdlPvj>
 80a135e:	4620      	mov	r0, r4
 80a1360:	bd10      	pop	{r4, pc}

080a1362 <__tcf_1>:
 80a1362:	4770      	bx	lr

080a1364 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1364:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a136a:	4604      	mov	r4, r0
 80a136c:	4608      	mov	r0, r1
 80a136e:	2100      	movs	r1, #0
 80a1370:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a1374:	4b04      	ldr	r3, [pc, #16]	; (80a1388 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a1376:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1378:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a137a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a137c:	4611      	mov	r1, r2
  _blocking = true;
 80a137e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a1380:	f7ff f906 	bl	80a0590 <HAL_USB_USART_Init>
}
 80a1384:	4620      	mov	r0, r4
 80a1386:	bd10      	pop	{r4, pc}
 80a1388:	080a2760 	.word	0x080a2760

080a138c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a138c:	2200      	movs	r2, #0
 80a138e:	7c00      	ldrb	r0, [r0, #16]
 80a1390:	f7ff b906 	b.w	80a05a0 <HAL_USB_USART_Begin>

080a1394 <_Z19acquireSerialBufferv>:
{
 80a1394:	b510      	push	{r4, lr}
 80a1396:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1398:	2214      	movs	r2, #20
 80a139a:	2100      	movs	r1, #0
 80a139c:	f001 f8d6 	bl	80a254c <memset>
  conf.rx_buffer = serial_rx_buffer;
 80a13a0:	4b05      	ldr	r3, [pc, #20]	; (80a13b8 <_Z19acquireSerialBufferv+0x24>)
}
 80a13a2:	4620      	mov	r0, r4
  conf.rx_buffer = serial_rx_buffer;
 80a13a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a13a6:	4b05      	ldr	r3, [pc, #20]	; (80a13bc <_Z19acquireSerialBufferv+0x28>)
 80a13a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a13aa:	f240 1301 	movw	r3, #257	; 0x101
 80a13ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a13b0:	2381      	movs	r3, #129	; 0x81
 80a13b2:	8223      	strh	r3, [r4, #16]
}
 80a13b4:	bd10      	pop	{r4, pc}
 80a13b6:	bf00      	nop
 80a13b8:	200000e4 	.word	0x200000e4
 80a13bc:	200001e5 	.word	0x200001e5

080a13c0 <_Z16_fetch_usbserialv>:
{
 80a13c0:	b530      	push	{r4, r5, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a13c2:	4d0e      	ldr	r5, [pc, #56]	; (80a13fc <_Z16_fetch_usbserialv+0x3c>)
{
 80a13c4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a13c6:	a801      	add	r0, sp, #4
 80a13c8:	f7ff ffe4 	bl	80a1394 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a13cc:	7829      	ldrb	r1, [r5, #0]
 80a13ce:	f3bf 8f5b 	dmb	ish
 80a13d2:	f011 0401 	ands.w	r4, r1, #1
 80a13d6:	d10e      	bne.n	80a13f6 <_Z16_fetch_usbserialv+0x36>
 80a13d8:	4628      	mov	r0, r5
 80a13da:	f7fe fe62 	bl	80a00a2 <__cxa_guard_acquire>
 80a13de:	b150      	cbz	r0, 80a13f6 <_Z16_fetch_usbserialv+0x36>
 80a13e0:	4621      	mov	r1, r4
 80a13e2:	aa01      	add	r2, sp, #4
 80a13e4:	4806      	ldr	r0, [pc, #24]	; (80a1400 <_Z16_fetch_usbserialv+0x40>)
 80a13e6:	f7ff ffbd 	bl	80a1364 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a13ea:	4628      	mov	r0, r5
 80a13ec:	f7fe fe5e 	bl	80a00ac <__cxa_guard_release>
 80a13f0:	4804      	ldr	r0, [pc, #16]	; (80a1404 <_Z16_fetch_usbserialv+0x44>)
 80a13f2:	f001 f897 	bl	80a2524 <atexit>
	return _usbserial;
}
 80a13f6:	4802      	ldr	r0, [pc, #8]	; (80a1400 <_Z16_fetch_usbserialv+0x40>)
 80a13f8:	b007      	add	sp, #28
 80a13fa:	bd30      	pop	{r4, r5, pc}
 80a13fc:	200000b4 	.word	0x200000b4
 80a1400:	200000bc 	.word	0x200000bc
 80a1404:	080a12ed 	.word	0x080a12ed

080a1408 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1408:	b510      	push	{r4, lr}
 80a140a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a140c:	2214      	movs	r2, #20
 80a140e:	2100      	movs	r1, #0
 80a1410:	f001 f89c 	bl	80a254c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1414:	4b05      	ldr	r3, [pc, #20]	; (80a142c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1416:	4620      	mov	r0, r4
  conf.rx_buffer = usbserial1_rx_buffer;
 80a1418:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a141a:	4b05      	ldr	r3, [pc, #20]	; (80a1430 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a141c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a141e:	f240 1301 	movw	r3, #257	; 0x101
 80a1422:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1424:	2381      	movs	r3, #129	; 0x81
 80a1426:	8223      	strh	r3, [r4, #16]
}
 80a1428:	bd10      	pop	{r4, pc}
 80a142a:	bf00      	nop
 80a142c:	20000266 	.word	0x20000266
 80a1430:	20000367 	.word	0x20000367

080a1434 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1434:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1436:	4c0e      	ldr	r4, [pc, #56]	; (80a1470 <_Z17_fetch_usbserial1v+0x3c>)
{
 80a1438:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a143a:	a801      	add	r0, sp, #4
 80a143c:	f7ff ffe4 	bl	80a1408 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1440:	7823      	ldrb	r3, [r4, #0]
 80a1442:	f3bf 8f5b 	dmb	ish
 80a1446:	07db      	lsls	r3, r3, #31
 80a1448:	d40e      	bmi.n	80a1468 <_Z17_fetch_usbserial1v+0x34>
 80a144a:	4620      	mov	r0, r4
 80a144c:	f7fe fe29 	bl	80a00a2 <__cxa_guard_acquire>
 80a1450:	b150      	cbz	r0, 80a1468 <_Z17_fetch_usbserial1v+0x34>
 80a1452:	2101      	movs	r1, #1
 80a1454:	aa01      	add	r2, sp, #4
 80a1456:	4807      	ldr	r0, [pc, #28]	; (80a1474 <_Z17_fetch_usbserial1v+0x40>)
 80a1458:	f7ff ff84 	bl	80a1364 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a145c:	4620      	mov	r0, r4
 80a145e:	f7fe fe25 	bl	80a00ac <__cxa_guard_release>
 80a1462:	4805      	ldr	r0, [pc, #20]	; (80a1478 <_Z17_fetch_usbserial1v+0x44>)
 80a1464:	f001 f85e 	bl	80a2524 <atexit>
  return _usbserial1;
}
 80a1468:	4802      	ldr	r0, [pc, #8]	; (80a1474 <_Z17_fetch_usbserial1v+0x40>)
 80a146a:	b006      	add	sp, #24
 80a146c:	bd10      	pop	{r4, pc}
 80a146e:	bf00      	nop
 80a1470:	200000b8 	.word	0x200000b8
 80a1474:	200000d0 	.word	0x200000d0
 80a1478:	080a1363 	.word	0x080a1363

080a147c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a147c:	4770      	bx	lr

080a147e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a147e:	7441      	strb	r1, [r0, #17]
}
 80a1480:	4770      	bx	lr

080a1482 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1482:	4770      	bx	lr

080a1484 <_ZN11USARTSerial17availableForWriteEv>:
{
 80a1484:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a1486:	7c00      	ldrb	r0, [r0, #16]
 80a1488:	f7ff f826 	bl	80a04d8 <hal_usart_available_data_for_write>
}
 80a148c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1490:	bd08      	pop	{r3, pc}

080a1492 <_ZN11USARTSerial9availableEv>:
{
 80a1492:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a1494:	7c00      	ldrb	r0, [r0, #16]
 80a1496:	f7fe ffff 	bl	80a0498 <hal_usart_available>
}
 80a149a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a149e:	bd08      	pop	{r3, pc}

080a14a0 <_ZN11USARTSerial4peekEv>:
{
 80a14a0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a14a2:	7c00      	ldrb	r0, [r0, #16]
 80a14a4:	f7ff f808 	bl	80a04b8 <hal_usart_peek>
}
 80a14a8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a14ac:	bd08      	pop	{r3, pc}

080a14ae <_ZN11USARTSerial4readEv>:
{
 80a14ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a14b0:	7c00      	ldrb	r0, [r0, #16]
 80a14b2:	f7fe fff9 	bl	80a04a8 <hal_usart_read>
}
 80a14b6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a14ba:	bd08      	pop	{r3, pc}

080a14bc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
 80a14bc:	7c00      	ldrb	r0, [r0, #16]
 80a14be:	f7ff b803 	b.w	80a04c8 <hal_usart_flush>

080a14c2 <_ZN11USARTSerial5writeEh>:
{
 80a14c2:	b570      	push	{r4, r5, r6, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14c4:	7c46      	ldrb	r6, [r0, #17]
{
 80a14c6:	4604      	mov	r4, r0
 80a14c8:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14ca:	b12e      	cbz	r6, 80a14d8 <_ZN11USARTSerial5writeEh+0x16>
	  return hal_usart_write(_serial, c);
 80a14cc:	4629      	mov	r1, r5
 80a14ce:	7c20      	ldrb	r0, [r4, #16]
}
 80a14d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a14d4:	f7fe bfd8 	b.w	80a0488 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a14d8:	7c00      	ldrb	r0, [r0, #16]
 80a14da:	f7fe fffd 	bl	80a04d8 <hal_usart_available_data_for_write>
 80a14de:	2800      	cmp	r0, #0
 80a14e0:	dcf4      	bgt.n	80a14cc <_ZN11USARTSerial5writeEh+0xa>
}
 80a14e2:	4630      	mov	r0, r6
 80a14e4:	bd70      	pop	{r4, r5, r6, pc}

080a14e6 <_ZN11USARTSerialD0Ev>:
 80a14e6:	b510      	push	{r4, lr}
 80a14e8:	4604      	mov	r4, r0
 80a14ea:	2114      	movs	r1, #20
 80a14ec:	f000 f9e2 	bl	80a18b4 <_ZdlPvj>
 80a14f0:	4620      	mov	r0, r4
 80a14f2:	bd10      	pop	{r4, pc}

080a14f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a14f4:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a14f8:	b510      	push	{r4, lr}
 80a14fa:	4604      	mov	r4, r0
 80a14fc:	4608      	mov	r0, r1
 80a14fe:	4611      	mov	r1, r2
 80a1500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1504:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a1508:	4a04      	ldr	r2, [pc, #16]	; (80a151c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a150a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a150c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a150e:	2201      	movs	r2, #1
 80a1510:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a1512:	461a      	mov	r2, r3
 80a1514:	f7fe ffb0 	bl	80a0478 <hal_usart_init>
}
 80a1518:	4620      	mov	r0, r4
 80a151a:	bd10      	pop	{r4, pc}
 80a151c:	080a2790 	.word	0x080a2790

080a1520 <_Z22__fetch_global_Serial1v>:
{
 80a1520:	b538      	push	{r3, r4, r5, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1522:	4d0c      	ldr	r5, [pc, #48]	; (80a1554 <_Z22__fetch_global_Serial1v+0x34>)
 80a1524:	7829      	ldrb	r1, [r5, #0]
 80a1526:	f3bf 8f5b 	dmb	ish
 80a152a:	f011 0401 	ands.w	r4, r1, #1
 80a152e:	d10f      	bne.n	80a1550 <_Z22__fetch_global_Serial1v+0x30>
 80a1530:	4628      	mov	r0, r5
 80a1532:	f7fe fdb6 	bl	80a00a2 <__cxa_guard_acquire>
 80a1536:	b158      	cbz	r0, 80a1550 <_Z22__fetch_global_Serial1v+0x30>
 80a1538:	4621      	mov	r1, r4
 80a153a:	4b07      	ldr	r3, [pc, #28]	; (80a1558 <_Z22__fetch_global_Serial1v+0x38>)
 80a153c:	4a07      	ldr	r2, [pc, #28]	; (80a155c <_Z22__fetch_global_Serial1v+0x3c>)
 80a153e:	4808      	ldr	r0, [pc, #32]	; (80a1560 <_Z22__fetch_global_Serial1v+0x40>)
 80a1540:	f7ff ffd8 	bl	80a14f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a1544:	4628      	mov	r0, r5
 80a1546:	f7fe fdb1 	bl	80a00ac <__cxa_guard_release>
 80a154a:	4806      	ldr	r0, [pc, #24]	; (80a1564 <_Z22__fetch_global_Serial1v+0x44>)
 80a154c:	f000 ffea 	bl	80a2524 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1550:	4803      	ldr	r0, [pc, #12]	; (80a1560 <_Z22__fetch_global_Serial1v+0x40>)
 80a1552:	bd38      	pop	{r3, r4, r5, pc}
 80a1554:	200003e8 	.word	0x200003e8
 80a1558:	20000470 	.word	0x20000470
 80a155c:	200003ec 	.word	0x200003ec
 80a1560:	200004f4 	.word	0x200004f4
 80a1564:	080a1483 	.word	0x080a1483

080a1568 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1568:	b510      	push	{r4, lr}
      if (_M_empty())
 80a156a:	6883      	ldr	r3, [r0, #8]
 80a156c:	4604      	mov	r4, r0
 80a156e:	b90b      	cbnz	r3, 80a1574 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1570:	f000 f9a4 	bl	80a18bc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1574:	68c3      	ldr	r3, [r0, #12]
 80a1576:	4798      	blx	r3
      if (_M_manager)
 80a1578:	68a3      	ldr	r3, [r4, #8]
 80a157a:	b11b      	cbz	r3, 80a1584 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a157c:	2203      	movs	r2, #3
 80a157e:	4621      	mov	r1, r4
 80a1580:	4620      	mov	r0, r4
 80a1582:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1584:	4620      	mov	r0, r4
}
 80a1586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 80a158a:	2110      	movs	r1, #16
 80a158c:	f000 b992 	b.w	80a18b4 <_ZdlPvj>

080a1590 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a1590:	4770      	bx	lr

080a1592 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1594:	4606      	mov	r6, r0
 80a1596:	4615      	mov	r5, r2
 80a1598:	460c      	mov	r4, r1
 80a159a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a159c:	42bc      	cmp	r4, r7
 80a159e:	d006      	beq.n	80a15ae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a15a0:	6833      	ldr	r3, [r6, #0]
 80a15a2:	4630      	mov	r0, r6
 80a15a4:	689b      	ldr	r3, [r3, #8]
 80a15a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a15aa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a15ac:	e7f6      	b.n	80a159c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a15ae:	4628      	mov	r0, r5
 80a15b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a15b2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a15b2:	2200      	movs	r2, #0
 80a15b4:	7c00      	ldrb	r0, [r0, #16]
 80a15b6:	f7fe bfaf 	b.w	80a0518 <hal_i2c_write>

080a15ba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a15ba:	2100      	movs	r1, #0
 80a15bc:	7c00      	ldrb	r0, [r0, #16]
 80a15be:	f7fe bfb3 	b.w	80a0528 <hal_i2c_available>

080a15c2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a15c2:	2100      	movs	r1, #0
 80a15c4:	7c00      	ldrb	r0, [r0, #16]
 80a15c6:	f7fe bfb7 	b.w	80a0538 <hal_i2c_read>

080a15ca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a15ca:	2100      	movs	r1, #0
 80a15cc:	7c00      	ldrb	r0, [r0, #16]
 80a15ce:	f7fe bfbb 	b.w	80a0548 <hal_i2c_peek>

080a15d2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a15d2:	2100      	movs	r1, #0
 80a15d4:	7c00      	ldrb	r0, [r0, #16]
 80a15d6:	f7fe bfbf 	b.w	80a0558 <hal_i2c_flush>

080a15da <_ZN7TwoWireD0Ev>:
 80a15da:	b510      	push	{r4, lr}
 80a15dc:	4604      	mov	r4, r0
 80a15de:	2114      	movs	r1, #20
 80a15e0:	f000 f968 	bl	80a18b4 <_ZdlPvj>
 80a15e4:	4620      	mov	r0, r4
 80a15e6:	bd10      	pop	{r4, pc}

080a15e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a15e8:	b510      	push	{r4, lr}
 80a15ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a15ee:	4604      	mov	r4, r0
 80a15f0:	4608      	mov	r0, r1
 80a15f2:	2100      	movs	r1, #0
 80a15f4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a15f8:	4b03      	ldr	r3, [pc, #12]	; (80a1608 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a15fa:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a15fc:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a15fe:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a1600:	f7fe ffb2 	bl	80a0568 <hal_i2c_init>
}
 80a1604:	4620      	mov	r0, r4
 80a1606:	bd10      	pop	{r4, pc}
 80a1608:	080a27c0 	.word	0x080a27c0

080a160c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a160c:	2300      	movs	r3, #0
 80a160e:	7c00      	ldrb	r0, [r0, #16]
 80a1610:	461a      	mov	r2, r3
 80a1612:	4619      	mov	r1, r3
 80a1614:	f7fe bf68 	b.w	80a04e8 <hal_i2c_begin>

080a1618 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 80a1618:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 80a161a:	2200      	movs	r2, #0
 80a161c:	2314      	movs	r3, #20
 80a161e:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a1622:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 80a1626:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 80a1628:	7c00      	ldrb	r0, [r0, #16]
 80a162a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a162e:	684b      	ldr	r3, [r1, #4]
 80a1630:	9303      	str	r3, [sp, #12]
 80a1632:	68cb      	ldr	r3, [r1, #12]
 80a1634:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 80a1636:	7a0b      	ldrb	r3, [r1, #8]
 80a1638:	a901      	add	r1, sp, #4
 80a163a:	9305      	str	r3, [sp, #20]
 80a163c:	f7fe ff9e 	bl	80a057c <hal_i2c_request_ex>
}
 80a1640:	b007      	add	sp, #28
 80a1642:	f85d fb04 	ldr.w	pc, [sp], #4

080a1646 <_ZN7TwoWire11requestFromEhjh>:
{
 80a1646:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 80a1648:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 80a164a:	f88d 1000 	strb.w	r1, [sp]
 80a164e:	f04f 0164 	mov.w	r1, #100	; 0x64
 80a1652:	bf18      	it	ne
 80a1654:	2301      	movne	r3, #1
 80a1656:	9103      	str	r1, [sp, #12]
 80a1658:	4669      	mov	r1, sp
    size_ = size;
 80a165a:	9201      	str	r2, [sp, #4]
 80a165c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1660:	f7ff ffda 	bl	80a1618 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 80a1664:	b005      	add	sp, #20
 80a1666:	f85d fb04 	ldr.w	pc, [sp], #4

080a166a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 80a166a:	2301      	movs	r3, #1
 80a166c:	f7ff bfeb 	b.w	80a1646 <_ZN7TwoWire11requestFromEhjh>

080a1670 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 80a1670:	2200      	movs	r2, #0
 80a1672:	7c00      	ldrb	r0, [r0, #16]
 80a1674:	f7fe bf40 	b.w	80a04f8 <hal_i2c_begin_transmission>

080a1678 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
 80a1678:	b2c9      	uxtb	r1, r1
 80a167a:	f7ff bff9 	b.w	80a1670 <_ZN7TwoWire17beginTransmissionEh>

080a167e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 80a167e:	2200      	movs	r2, #0
 80a1680:	7c00      	ldrb	r0, [r0, #16]
 80a1682:	f7fe bf41 	b.w	80a0508 <hal_i2c_end_transmission>

080a1686 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 80a1686:	2101      	movs	r1, #1
 80a1688:	f7ff bff9 	b.w	80a167e <_ZN7TwoWire15endTransmissionEh>

080a168c <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a168c:	2200      	movs	r2, #0
 80a168e:	6840      	ldr	r0, [r0, #4]
 80a1690:	4611      	mov	r1, r2
 80a1692:	f7ff b809 	b.w	80a06a8 <network_ready>

080a1696 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1696:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1698:	4615      	mov	r5, r2
 80a169a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a169c:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a169e:	460e      	mov	r6, r1
 80a16a0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a16a2:	2100      	movs	r1, #0
 80a16a4:	a803      	add	r0, sp, #12
 80a16a6:	f000 ff51 	bl	80a254c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a16aa:	4628      	mov	r0, r5
 80a16ac:	f000 ff95 	bl	80a25da <strlen>
 80a16b0:	2700      	movs	r7, #0
 80a16b2:	b281      	uxth	r1, r0
 80a16b4:	6873      	ldr	r3, [r6, #4]
 80a16b6:	4628      	mov	r0, r5
 80a16b8:	9700      	str	r7, [sp, #0]
 80a16ba:	aa03      	add	r2, sp, #12
 80a16bc:	f7fe ffa0 	bl	80a0600 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a16c0:	b130      	cbz	r0, 80a16d0 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a16c2:	4639      	mov	r1, r7
 80a16c4:	4620      	mov	r0, r4
 80a16c6:	f7ff fded 	bl	80a12a4 <_ZN9IPAddressC1Em>
    }
 80a16ca:	4620      	mov	r0, r4
 80a16cc:	b009      	add	sp, #36	; 0x24
 80a16ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a16d0:	4620      	mov	r0, r4
 80a16d2:	a903      	add	r1, sp, #12
 80a16d4:	f7ff fdd4 	bl	80a1280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a16d8:	e7f7      	b.n	80a16ca <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a16da <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a16da:	2200      	movs	r2, #0
 80a16dc:	6840      	ldr	r0, [r0, #4]
 80a16de:	4611      	mov	r1, r2
 80a16e0:	f7ff b802 	b.w	80a06e8 <network_listening>

080a16e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a16e4:	2200      	movs	r2, #0
 80a16e6:	6840      	ldr	r0, [r0, #4]
 80a16e8:	4611      	mov	r1, r2
 80a16ea:	f7ff b80d 	b.w	80a0708 <network_get_listen_timeout>

080a16ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a16ee:	2200      	movs	r2, #0
 80a16f0:	6840      	ldr	r0, [r0, #4]
 80a16f2:	f7ff b801 	b.w	80a06f8 <network_set_listen_timeout>

080a16f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a16f6:	2200      	movs	r2, #0
 80a16f8:	6840      	ldr	r0, [r0, #4]
 80a16fa:	f081 0101 	eor.w	r1, r1, #1
 80a16fe:	f7fe bfeb 	b.w	80a06d8 <network_listen>

080a1702 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a1702:	2300      	movs	r3, #0
 80a1704:	6840      	ldr	r0, [r0, #4]
 80a1706:	461a      	mov	r2, r3
 80a1708:	4619      	mov	r1, r3
 80a170a:	f7fe bfdd 	b.w	80a06c8 <network_off>

080a170e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a170e:	2200      	movs	r2, #0
 80a1710:	6840      	ldr	r0, [r0, #4]
 80a1712:	4611      	mov	r1, r2
 80a1714:	f7fe bfb8 	b.w	80a0688 <network_connecting>

080a1718 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1718:	2200      	movs	r2, #0
 80a171a:	2102      	movs	r1, #2
 80a171c:	6840      	ldr	r0, [r0, #4]
 80a171e:	f7fe bfbb 	b.w	80a0698 <network_disconnect>

080a1722 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a1722:	2300      	movs	r3, #0
 80a1724:	6840      	ldr	r0, [r0, #4]
 80a1726:	461a      	mov	r2, r3
 80a1728:	f7fe bfa6 	b.w	80a0678 <network_connect>

080a172c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a172c:	2204      	movs	r2, #4
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1730:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1732:	4a02      	ldr	r2, [pc, #8]	; (80a173c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1734:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a1736:	4770      	bx	lr
 80a1738:	20000508 	.word	0x20000508
 80a173c:	080a27e8 	.word	0x080a27e8

080a1740 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1740:	2300      	movs	r3, #0
 80a1742:	6840      	ldr	r0, [r0, #4]
 80a1744:	461a      	mov	r2, r3
 80a1746:	f7fe bf97 	b.w	80a0678 <network_connect>

080a174a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a174a:	2200      	movs	r2, #0
 80a174c:	2102      	movs	r1, #2
 80a174e:	6840      	ldr	r0, [r0, #4]
 80a1750:	f7fe bfa2 	b.w	80a0698 <network_disconnect>

080a1754 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1754:	2200      	movs	r2, #0
 80a1756:	6840      	ldr	r0, [r0, #4]
 80a1758:	4611      	mov	r1, r2
 80a175a:	f7fe bf95 	b.w	80a0688 <network_connecting>

080a175e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a175e:	2200      	movs	r2, #0
 80a1760:	6840      	ldr	r0, [r0, #4]
 80a1762:	4611      	mov	r1, r2
 80a1764:	f7fe bfa0 	b.w	80a06a8 <network_ready>

080a1768 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1768:	2300      	movs	r3, #0
 80a176a:	6840      	ldr	r0, [r0, #4]
 80a176c:	461a      	mov	r2, r3
 80a176e:	4619      	mov	r1, r3
 80a1770:	f7fe bfa2 	b.w	80a06b8 <network_on>

080a1774 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1774:	2300      	movs	r3, #0
 80a1776:	6840      	ldr	r0, [r0, #4]
 80a1778:	461a      	mov	r2, r3
 80a177a:	4619      	mov	r1, r3
 80a177c:	f7fe bfa4 	b.w	80a06c8 <network_off>

080a1780 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 80a1780:	2100      	movs	r1, #0
 80a1782:	6840      	ldr	r0, [r0, #4]
 80a1784:	f7fe bfc8 	b.w	80a0718 <network_is_on>

080a1788 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 80a1788:	2100      	movs	r1, #0
 80a178a:	6840      	ldr	r0, [r0, #4]
 80a178c:	f7fe bfcc 	b.w	80a0728 <network_is_off>

080a1790 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1790:	2200      	movs	r2, #0
 80a1792:	6840      	ldr	r0, [r0, #4]
 80a1794:	f081 0101 	eor.w	r1, r1, #1
 80a1798:	f7fe bf9e 	b.w	80a06d8 <network_listen>

080a179c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a179c:	2200      	movs	r2, #0
 80a179e:	6840      	ldr	r0, [r0, #4]
 80a17a0:	f7fe bfaa 	b.w	80a06f8 <network_set_listen_timeout>

080a17a4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a17a4:	2200      	movs	r2, #0
 80a17a6:	6840      	ldr	r0, [r0, #4]
 80a17a8:	4611      	mov	r1, r2
 80a17aa:	f7fe bfad 	b.w	80a0708 <network_get_listen_timeout>

080a17ae <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a17ae:	2200      	movs	r2, #0
 80a17b0:	6840      	ldr	r0, [r0, #4]
 80a17b2:	4611      	mov	r1, r2
 80a17b4:	f7fe bf98 	b.w	80a06e8 <network_listening>

080a17b8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a17b8:	b570      	push	{r4, r5, r6, lr}
 80a17ba:	4615      	mov	r5, r2
 80a17bc:	b08e      	sub	sp, #56	; 0x38
 80a17be:	4604      	mov	r4, r0
    IPAddress addr;
 80a17c0:	a808      	add	r0, sp, #32
 80a17c2:	f7ff fd4f 	bl	80a1264 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a17c6:	2211      	movs	r2, #17
 80a17c8:	2100      	movs	r1, #0
 80a17ca:	a803      	add	r0, sp, #12
 80a17cc:	f000 febe 	bl	80a254c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a17d0:	2600      	movs	r6, #0
 80a17d2:	4628      	mov	r0, r5
 80a17d4:	f000 ff01 	bl	80a25da <strlen>
 80a17d8:	4b0a      	ldr	r3, [pc, #40]	; (80a1804 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a17da:	9600      	str	r6, [sp, #0]
 80a17dc:	b281      	uxth	r1, r0
 80a17de:	685b      	ldr	r3, [r3, #4]
 80a17e0:	4628      	mov	r0, r5
 80a17e2:	aa03      	add	r2, sp, #12
 80a17e4:	f7fe ff0c 	bl	80a0600 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a17e8:	b130      	cbz	r0, 80a17f8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a17ea:	4631      	mov	r1, r6
 80a17ec:	4620      	mov	r0, r4
 80a17ee:	f7ff fd59 	bl	80a12a4 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a17f2:	4620      	mov	r0, r4
 80a17f4:	b00e      	add	sp, #56	; 0x38
 80a17f6:	bd70      	pop	{r4, r5, r6, pc}
 80a17f8:	4620      	mov	r0, r4
 80a17fa:	a903      	add	r1, sp, #12
 80a17fc:	f7ff fd40 	bl	80a1280 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a1800:	e7f7      	b.n	80a17f2 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a1802:	bf00      	nop
 80a1804:	20000508 	.word	0x20000508

080a1808 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a1808:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a180a:	4a03      	ldr	r2, [pc, #12]	; (80a1818 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a180c:	601a      	str	r2, [r3, #0]
 80a180e:	2200      	movs	r2, #0
 80a1810:	605a      	str	r2, [r3, #4]

} // spark
 80a1812:	4770      	bx	lr
 80a1814:	20000510 	.word	0x20000510
 80a1818:	080a2824 	.word	0x080a2824

080a181c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a181c:	2300      	movs	r3, #0
 80a181e:	b507      	push	{r0, r1, r2, lr}
 80a1820:	461a      	mov	r2, r3
 80a1822:	4619      	mov	r1, r3
 80a1824:	9300      	str	r3, [sp, #0]
 80a1826:	4803      	ldr	r0, [pc, #12]	; (80a1834 <_GLOBAL__sub_I_INADDR_NONE+0x18>)
 80a1828:	f7ff fd52 	bl	80a12d0 <_ZN9IPAddressC1Ehhhh>
 80a182c:	b003      	add	sp, #12
 80a182e:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1832:	bf00      	nop
 80a1834:	2000051c 	.word	0x2000051c

080a1838 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1838:	4770      	bx	lr
	...

080a183c <_Z17acquireWireBufferv>:
	hal_i2c_config_t config = {
 80a183c:	2300      	movs	r3, #0
{
 80a183e:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a1840:	2520      	movs	r5, #32
 80a1842:	8043      	strh	r3, [r0, #2]
 80a1844:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1846:	4e08      	ldr	r6, [pc, #32]	; (80a1868 <_Z17acquireWireBufferv+0x2c>)
{
 80a1848:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a184a:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a184c:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a184e:	6085      	str	r5, [r0, #8]
 80a1850:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1852:	4628      	mov	r0, r5
 80a1854:	f000 f830 	bl	80a18b8 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1858:	4631      	mov	r1, r6
	};
 80a185a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a185c:	4628      	mov	r0, r5
 80a185e:	f000 f82b 	bl	80a18b8 <_ZnajRKSt9nothrow_t>
	};
 80a1862:	60e0      	str	r0, [r4, #12]
}
 80a1864:	4620      	mov	r0, r4
 80a1866:	bd70      	pop	{r4, r5, r6, pc}
 80a1868:	080a2858 	.word	0x080a2858

080a186c <_Z19__fetch_global_Wirev>:
{
 80a186c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a186e:	4d0e      	ldr	r5, [pc, #56]	; (80a18a8 <_Z19__fetch_global_Wirev+0x3c>)
{
 80a1870:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1872:	7829      	ldrb	r1, [r5, #0]
 80a1874:	f3bf 8f5b 	dmb	ish
 80a1878:	f011 0401 	ands.w	r4, r1, #1
 80a187c:	d111      	bne.n	80a18a2 <_Z19__fetch_global_Wirev+0x36>
 80a187e:	4628      	mov	r0, r5
 80a1880:	f7fe fc0f 	bl	80a00a2 <__cxa_guard_acquire>
 80a1884:	b168      	cbz	r0, 80a18a2 <_Z19__fetch_global_Wirev+0x36>
 80a1886:	a801      	add	r0, sp, #4
 80a1888:	f7ff ffd8 	bl	80a183c <_Z17acquireWireBufferv>
 80a188c:	4621      	mov	r1, r4
 80a188e:	aa01      	add	r2, sp, #4
 80a1890:	4806      	ldr	r0, [pc, #24]	; (80a18ac <_Z19__fetch_global_Wirev+0x40>)
 80a1892:	f7ff fea9 	bl	80a15e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a1896:	4628      	mov	r0, r5
 80a1898:	f7fe fc08 	bl	80a00ac <__cxa_guard_release>
 80a189c:	4804      	ldr	r0, [pc, #16]	; (80a18b0 <_Z19__fetch_global_Wirev+0x44>)
 80a189e:	f000 fe41 	bl	80a2524 <atexit>
	return wire;
}
 80a18a2:	4802      	ldr	r0, [pc, #8]	; (80a18ac <_Z19__fetch_global_Wirev+0x40>)
 80a18a4:	b007      	add	sp, #28
 80a18a6:	bd30      	pop	{r4, r5, pc}
 80a18a8:	20000534 	.word	0x20000534
 80a18ac:	20000538 	.word	0x20000538
 80a18b0:	080a1839 	.word	0x080a1839

080a18b4 <_ZdlPvj>:
 80a18b4:	f7fe bbf3 	b.w	80a009e <_ZdlPv>

080a18b8 <_ZnajRKSt9nothrow_t>:
 80a18b8:	f7fe bbef 	b.w	80a009a <_Znaj>

080a18bc <_ZSt25__throw_bad_function_callv>:
 80a18bc:	b508      	push	{r3, lr}
 80a18be:	f7fe ff6b 	bl	80a0798 <abort>
	...

080a18c4 <__aeabi_drsub>:
 80a18c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a18c8:	e002      	b.n	80a18d0 <__adddf3>
 80a18ca:	bf00      	nop

080a18cc <__aeabi_dsub>:
 80a18cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a18d0 <__adddf3>:
 80a18d0:	b530      	push	{r4, r5, lr}
 80a18d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a18d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a18da:	ea94 0f05 	teq	r4, r5
 80a18de:	bf08      	it	eq
 80a18e0:	ea90 0f02 	teqeq	r0, r2
 80a18e4:	bf1f      	itttt	ne
 80a18e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a18ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a18ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a18f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a18f6:	f000 80e2 	beq.w	80a1abe <__adddf3+0x1ee>
 80a18fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a18fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1902:	bfb8      	it	lt
 80a1904:	426d      	neglt	r5, r5
 80a1906:	dd0c      	ble.n	80a1922 <__adddf3+0x52>
 80a1908:	442c      	add	r4, r5
 80a190a:	ea80 0202 	eor.w	r2, r0, r2
 80a190e:	ea81 0303 	eor.w	r3, r1, r3
 80a1912:	ea82 0000 	eor.w	r0, r2, r0
 80a1916:	ea83 0101 	eor.w	r1, r3, r1
 80a191a:	ea80 0202 	eor.w	r2, r0, r2
 80a191e:	ea81 0303 	eor.w	r3, r1, r3
 80a1922:	2d36      	cmp	r5, #54	; 0x36
 80a1924:	bf88      	it	hi
 80a1926:	bd30      	pophi	{r4, r5, pc}
 80a1928:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a192c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1930:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1934:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1938:	d002      	beq.n	80a1940 <__adddf3+0x70>
 80a193a:	4240      	negs	r0, r0
 80a193c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1940:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1944:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1948:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a194c:	d002      	beq.n	80a1954 <__adddf3+0x84>
 80a194e:	4252      	negs	r2, r2
 80a1950:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1954:	ea94 0f05 	teq	r4, r5
 80a1958:	f000 80a7 	beq.w	80a1aaa <__adddf3+0x1da>
 80a195c:	f1a4 0401 	sub.w	r4, r4, #1
 80a1960:	f1d5 0e20 	rsbs	lr, r5, #32
 80a1964:	db0d      	blt.n	80a1982 <__adddf3+0xb2>
 80a1966:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a196a:	fa22 f205 	lsr.w	r2, r2, r5
 80a196e:	1880      	adds	r0, r0, r2
 80a1970:	f141 0100 	adc.w	r1, r1, #0
 80a1974:	fa03 f20e 	lsl.w	r2, r3, lr
 80a1978:	1880      	adds	r0, r0, r2
 80a197a:	fa43 f305 	asr.w	r3, r3, r5
 80a197e:	4159      	adcs	r1, r3
 80a1980:	e00e      	b.n	80a19a0 <__adddf3+0xd0>
 80a1982:	f1a5 0520 	sub.w	r5, r5, #32
 80a1986:	f10e 0e20 	add.w	lr, lr, #32
 80a198a:	2a01      	cmp	r2, #1
 80a198c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a1990:	bf28      	it	cs
 80a1992:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a1996:	fa43 f305 	asr.w	r3, r3, r5
 80a199a:	18c0      	adds	r0, r0, r3
 80a199c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a19a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a19a4:	d507      	bpl.n	80a19b6 <__adddf3+0xe6>
 80a19a6:	f04f 0e00 	mov.w	lr, #0
 80a19aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80a19ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a19b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a19b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a19ba:	d31b      	bcc.n	80a19f4 <__adddf3+0x124>
 80a19bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a19c0:	d30c      	bcc.n	80a19dc <__adddf3+0x10c>
 80a19c2:	0849      	lsrs	r1, r1, #1
 80a19c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a19c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a19cc:	f104 0401 	add.w	r4, r4, #1
 80a19d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a19d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a19d8:	f080 809a 	bcs.w	80a1b10 <__adddf3+0x240>
 80a19dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a19e0:	bf08      	it	eq
 80a19e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a19e6:	f150 0000 	adcs.w	r0, r0, #0
 80a19ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a19ee:	ea41 0105 	orr.w	r1, r1, r5
 80a19f2:	bd30      	pop	{r4, r5, pc}
 80a19f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a19f8:	4140      	adcs	r0, r0
 80a19fa:	eb41 0101 	adc.w	r1, r1, r1
 80a19fe:	3c01      	subs	r4, #1
 80a1a00:	bf28      	it	cs
 80a1a02:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a1a06:	d2e9      	bcs.n	80a19dc <__adddf3+0x10c>
 80a1a08:	f091 0f00 	teq	r1, #0
 80a1a0c:	bf04      	itt	eq
 80a1a0e:	4601      	moveq	r1, r0
 80a1a10:	2000      	moveq	r0, #0
 80a1a12:	fab1 f381 	clz	r3, r1
 80a1a16:	bf08      	it	eq
 80a1a18:	3320      	addeq	r3, #32
 80a1a1a:	f1a3 030b 	sub.w	r3, r3, #11
 80a1a1e:	f1b3 0220 	subs.w	r2, r3, #32
 80a1a22:	da0c      	bge.n	80a1a3e <__adddf3+0x16e>
 80a1a24:	320c      	adds	r2, #12
 80a1a26:	dd08      	ble.n	80a1a3a <__adddf3+0x16a>
 80a1a28:	f102 0c14 	add.w	ip, r2, #20
 80a1a2c:	f1c2 020c 	rsb	r2, r2, #12
 80a1a30:	fa01 f00c 	lsl.w	r0, r1, ip
 80a1a34:	fa21 f102 	lsr.w	r1, r1, r2
 80a1a38:	e00c      	b.n	80a1a54 <__adddf3+0x184>
 80a1a3a:	f102 0214 	add.w	r2, r2, #20
 80a1a3e:	bfd8      	it	le
 80a1a40:	f1c2 0c20 	rsble	ip, r2, #32
 80a1a44:	fa01 f102 	lsl.w	r1, r1, r2
 80a1a48:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a1a4c:	bfdc      	itt	le
 80a1a4e:	ea41 010c 	orrle.w	r1, r1, ip
 80a1a52:	4090      	lslle	r0, r2
 80a1a54:	1ae4      	subs	r4, r4, r3
 80a1a56:	bfa2      	ittt	ge
 80a1a58:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a1a5c:	4329      	orrge	r1, r5
 80a1a5e:	bd30      	popge	{r4, r5, pc}
 80a1a60:	ea6f 0404 	mvn.w	r4, r4
 80a1a64:	3c1f      	subs	r4, #31
 80a1a66:	da1c      	bge.n	80a1aa2 <__adddf3+0x1d2>
 80a1a68:	340c      	adds	r4, #12
 80a1a6a:	dc0e      	bgt.n	80a1a8a <__adddf3+0x1ba>
 80a1a6c:	f104 0414 	add.w	r4, r4, #20
 80a1a70:	f1c4 0220 	rsb	r2, r4, #32
 80a1a74:	fa20 f004 	lsr.w	r0, r0, r4
 80a1a78:	fa01 f302 	lsl.w	r3, r1, r2
 80a1a7c:	ea40 0003 	orr.w	r0, r0, r3
 80a1a80:	fa21 f304 	lsr.w	r3, r1, r4
 80a1a84:	ea45 0103 	orr.w	r1, r5, r3
 80a1a88:	bd30      	pop	{r4, r5, pc}
 80a1a8a:	f1c4 040c 	rsb	r4, r4, #12
 80a1a8e:	f1c4 0220 	rsb	r2, r4, #32
 80a1a92:	fa20 f002 	lsr.w	r0, r0, r2
 80a1a96:	fa01 f304 	lsl.w	r3, r1, r4
 80a1a9a:	ea40 0003 	orr.w	r0, r0, r3
 80a1a9e:	4629      	mov	r1, r5
 80a1aa0:	bd30      	pop	{r4, r5, pc}
 80a1aa2:	fa21 f004 	lsr.w	r0, r1, r4
 80a1aa6:	4629      	mov	r1, r5
 80a1aa8:	bd30      	pop	{r4, r5, pc}
 80a1aaa:	f094 0f00 	teq	r4, #0
 80a1aae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a1ab2:	bf06      	itte	eq
 80a1ab4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a1ab8:	3401      	addeq	r4, #1
 80a1aba:	3d01      	subne	r5, #1
 80a1abc:	e74e      	b.n	80a195c <__adddf3+0x8c>
 80a1abe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1ac2:	bf18      	it	ne
 80a1ac4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1ac8:	d029      	beq.n	80a1b1e <__adddf3+0x24e>
 80a1aca:	ea94 0f05 	teq	r4, r5
 80a1ace:	bf08      	it	eq
 80a1ad0:	ea90 0f02 	teqeq	r0, r2
 80a1ad4:	d005      	beq.n	80a1ae2 <__adddf3+0x212>
 80a1ad6:	ea54 0c00 	orrs.w	ip, r4, r0
 80a1ada:	bf04      	itt	eq
 80a1adc:	4619      	moveq	r1, r3
 80a1ade:	4610      	moveq	r0, r2
 80a1ae0:	bd30      	pop	{r4, r5, pc}
 80a1ae2:	ea91 0f03 	teq	r1, r3
 80a1ae6:	bf1e      	ittt	ne
 80a1ae8:	2100      	movne	r1, #0
 80a1aea:	2000      	movne	r0, #0
 80a1aec:	bd30      	popne	{r4, r5, pc}
 80a1aee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a1af2:	d105      	bne.n	80a1b00 <__adddf3+0x230>
 80a1af4:	0040      	lsls	r0, r0, #1
 80a1af6:	4149      	adcs	r1, r1
 80a1af8:	bf28      	it	cs
 80a1afa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a1afe:	bd30      	pop	{r4, r5, pc}
 80a1b00:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a1b04:	bf3c      	itt	cc
 80a1b06:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a1b0a:	bd30      	popcc	{r4, r5, pc}
 80a1b0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1b10:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a1b14:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1b18:	f04f 0000 	mov.w	r0, #0
 80a1b1c:	bd30      	pop	{r4, r5, pc}
 80a1b1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a1b22:	bf1a      	itte	ne
 80a1b24:	4619      	movne	r1, r3
 80a1b26:	4610      	movne	r0, r2
 80a1b28:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a1b2c:	bf1c      	itt	ne
 80a1b2e:	460b      	movne	r3, r1
 80a1b30:	4602      	movne	r2, r0
 80a1b32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a1b36:	bf06      	itte	eq
 80a1b38:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a1b3c:	ea91 0f03 	teqeq	r1, r3
 80a1b40:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a1b44:	bd30      	pop	{r4, r5, pc}
 80a1b46:	bf00      	nop

080a1b48 <__aeabi_ui2d>:
 80a1b48:	f090 0f00 	teq	r0, #0
 80a1b4c:	bf04      	itt	eq
 80a1b4e:	2100      	moveq	r1, #0
 80a1b50:	4770      	bxeq	lr
 80a1b52:	b530      	push	{r4, r5, lr}
 80a1b54:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1b58:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1b5c:	f04f 0500 	mov.w	r5, #0
 80a1b60:	f04f 0100 	mov.w	r1, #0
 80a1b64:	e750      	b.n	80a1a08 <__adddf3+0x138>
 80a1b66:	bf00      	nop

080a1b68 <__aeabi_i2d>:
 80a1b68:	f090 0f00 	teq	r0, #0
 80a1b6c:	bf04      	itt	eq
 80a1b6e:	2100      	moveq	r1, #0
 80a1b70:	4770      	bxeq	lr
 80a1b72:	b530      	push	{r4, r5, lr}
 80a1b74:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1b78:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1b7c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a1b80:	bf48      	it	mi
 80a1b82:	4240      	negmi	r0, r0
 80a1b84:	f04f 0100 	mov.w	r1, #0
 80a1b88:	e73e      	b.n	80a1a08 <__adddf3+0x138>
 80a1b8a:	bf00      	nop

080a1b8c <__aeabi_f2d>:
 80a1b8c:	0042      	lsls	r2, r0, #1
 80a1b8e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a1b92:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1b96:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a1b9a:	bf1f      	itttt	ne
 80a1b9c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a1ba0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a1ba4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a1ba8:	4770      	bxne	lr
 80a1baa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a1bae:	bf08      	it	eq
 80a1bb0:	4770      	bxeq	lr
 80a1bb2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a1bb6:	bf04      	itt	eq
 80a1bb8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a1bbc:	4770      	bxeq	lr
 80a1bbe:	b530      	push	{r4, r5, lr}
 80a1bc0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a1bc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a1bc8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1bcc:	e71c      	b.n	80a1a08 <__adddf3+0x138>
 80a1bce:	bf00      	nop

080a1bd0 <__aeabi_ul2d>:
 80a1bd0:	ea50 0201 	orrs.w	r2, r0, r1
 80a1bd4:	bf08      	it	eq
 80a1bd6:	4770      	bxeq	lr
 80a1bd8:	b530      	push	{r4, r5, lr}
 80a1bda:	f04f 0500 	mov.w	r5, #0
 80a1bde:	e00a      	b.n	80a1bf6 <__aeabi_l2d+0x16>

080a1be0 <__aeabi_l2d>:
 80a1be0:	ea50 0201 	orrs.w	r2, r0, r1
 80a1be4:	bf08      	it	eq
 80a1be6:	4770      	bxeq	lr
 80a1be8:	b530      	push	{r4, r5, lr}
 80a1bea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a1bee:	d502      	bpl.n	80a1bf6 <__aeabi_l2d+0x16>
 80a1bf0:	4240      	negs	r0, r0
 80a1bf2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1bf6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a1bfa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a1bfe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a1c02:	f43f aed8 	beq.w	80a19b6 <__adddf3+0xe6>
 80a1c06:	f04f 0203 	mov.w	r2, #3
 80a1c0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1c0e:	bf18      	it	ne
 80a1c10:	3203      	addne	r2, #3
 80a1c12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a1c16:	bf18      	it	ne
 80a1c18:	3203      	addne	r2, #3
 80a1c1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a1c1e:	f1c2 0320 	rsb	r3, r2, #32
 80a1c22:	fa00 fc03 	lsl.w	ip, r0, r3
 80a1c26:	fa20 f002 	lsr.w	r0, r0, r2
 80a1c2a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a1c2e:	ea40 000e 	orr.w	r0, r0, lr
 80a1c32:	fa21 f102 	lsr.w	r1, r1, r2
 80a1c36:	4414      	add	r4, r2
 80a1c38:	e6bd      	b.n	80a19b6 <__adddf3+0xe6>
 80a1c3a:	bf00      	nop

080a1c3c <__aeabi_dmul>:
 80a1c3c:	b570      	push	{r4, r5, r6, lr}
 80a1c3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1c42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1c46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1c4a:	bf1d      	ittte	ne
 80a1c4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1c50:	ea94 0f0c 	teqne	r4, ip
 80a1c54:	ea95 0f0c 	teqne	r5, ip
 80a1c58:	f000 f8de 	bleq	80a1e18 <__aeabi_dmul+0x1dc>
 80a1c5c:	442c      	add	r4, r5
 80a1c5e:	ea81 0603 	eor.w	r6, r1, r3
 80a1c62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a1c66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a1c6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a1c6e:	bf18      	it	ne
 80a1c70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a1c74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1c78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a1c7c:	d038      	beq.n	80a1cf0 <__aeabi_dmul+0xb4>
 80a1c7e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a1c82:	f04f 0500 	mov.w	r5, #0
 80a1c86:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a1c8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a1c8e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a1c92:	f04f 0600 	mov.w	r6, #0
 80a1c96:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a1c9a:	f09c 0f00 	teq	ip, #0
 80a1c9e:	bf18      	it	ne
 80a1ca0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a1ca4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a1ca8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1cac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a1cb0:	d204      	bcs.n	80a1cbc <__aeabi_dmul+0x80>
 80a1cb2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a1cb6:	416d      	adcs	r5, r5
 80a1cb8:	eb46 0606 	adc.w	r6, r6, r6
 80a1cbc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a1cc0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a1cc4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a1cc8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a1ccc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a1cd0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1cd4:	bf88      	it	hi
 80a1cd6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1cda:	d81e      	bhi.n	80a1d1a <__aeabi_dmul+0xde>
 80a1cdc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a1ce0:	bf08      	it	eq
 80a1ce2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a1ce6:	f150 0000 	adcs.w	r0, r0, #0
 80a1cea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1cee:	bd70      	pop	{r4, r5, r6, pc}
 80a1cf0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a1cf4:	ea46 0101 	orr.w	r1, r6, r1
 80a1cf8:	ea40 0002 	orr.w	r0, r0, r2
 80a1cfc:	ea81 0103 	eor.w	r1, r1, r3
 80a1d00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a1d04:	bfc2      	ittt	gt
 80a1d06:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1d0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1d0e:	bd70      	popgt	{r4, r5, r6, pc}
 80a1d10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1d14:	f04f 0e00 	mov.w	lr, #0
 80a1d18:	3c01      	subs	r4, #1
 80a1d1a:	f300 80ab 	bgt.w	80a1e74 <__aeabi_dmul+0x238>
 80a1d1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a1d22:	bfde      	ittt	le
 80a1d24:	2000      	movle	r0, #0
 80a1d26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a1d2a:	bd70      	pople	{r4, r5, r6, pc}
 80a1d2c:	f1c4 0400 	rsb	r4, r4, #0
 80a1d30:	3c20      	subs	r4, #32
 80a1d32:	da35      	bge.n	80a1da0 <__aeabi_dmul+0x164>
 80a1d34:	340c      	adds	r4, #12
 80a1d36:	dc1b      	bgt.n	80a1d70 <__aeabi_dmul+0x134>
 80a1d38:	f104 0414 	add.w	r4, r4, #20
 80a1d3c:	f1c4 0520 	rsb	r5, r4, #32
 80a1d40:	fa00 f305 	lsl.w	r3, r0, r5
 80a1d44:	fa20 f004 	lsr.w	r0, r0, r4
 80a1d48:	fa01 f205 	lsl.w	r2, r1, r5
 80a1d4c:	ea40 0002 	orr.w	r0, r0, r2
 80a1d50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a1d54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a1d58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1d5c:	fa21 f604 	lsr.w	r6, r1, r4
 80a1d60:	eb42 0106 	adc.w	r1, r2, r6
 80a1d64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1d68:	bf08      	it	eq
 80a1d6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1d6e:	bd70      	pop	{r4, r5, r6, pc}
 80a1d70:	f1c4 040c 	rsb	r4, r4, #12
 80a1d74:	f1c4 0520 	rsb	r5, r4, #32
 80a1d78:	fa00 f304 	lsl.w	r3, r0, r4
 80a1d7c:	fa20 f005 	lsr.w	r0, r0, r5
 80a1d80:	fa01 f204 	lsl.w	r2, r1, r4
 80a1d84:	ea40 0002 	orr.w	r0, r0, r2
 80a1d88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1d8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a1d90:	f141 0100 	adc.w	r1, r1, #0
 80a1d94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1d98:	bf08      	it	eq
 80a1d9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1d9e:	bd70      	pop	{r4, r5, r6, pc}
 80a1da0:	f1c4 0520 	rsb	r5, r4, #32
 80a1da4:	fa00 f205 	lsl.w	r2, r0, r5
 80a1da8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a1dac:	fa20 f304 	lsr.w	r3, r0, r4
 80a1db0:	fa01 f205 	lsl.w	r2, r1, r5
 80a1db4:	ea43 0302 	orr.w	r3, r3, r2
 80a1db8:	fa21 f004 	lsr.w	r0, r1, r4
 80a1dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1dc0:	fa21 f204 	lsr.w	r2, r1, r4
 80a1dc4:	ea20 0002 	bic.w	r0, r0, r2
 80a1dc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a1dcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a1dd0:	bf08      	it	eq
 80a1dd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a1dd6:	bd70      	pop	{r4, r5, r6, pc}
 80a1dd8:	f094 0f00 	teq	r4, #0
 80a1ddc:	d10f      	bne.n	80a1dfe <__aeabi_dmul+0x1c2>
 80a1dde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a1de2:	0040      	lsls	r0, r0, #1
 80a1de4:	eb41 0101 	adc.w	r1, r1, r1
 80a1de8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1dec:	bf08      	it	eq
 80a1dee:	3c01      	subeq	r4, #1
 80a1df0:	d0f7      	beq.n	80a1de2 <__aeabi_dmul+0x1a6>
 80a1df2:	ea41 0106 	orr.w	r1, r1, r6
 80a1df6:	f095 0f00 	teq	r5, #0
 80a1dfa:	bf18      	it	ne
 80a1dfc:	4770      	bxne	lr
 80a1dfe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a1e02:	0052      	lsls	r2, r2, #1
 80a1e04:	eb43 0303 	adc.w	r3, r3, r3
 80a1e08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a1e0c:	bf08      	it	eq
 80a1e0e:	3d01      	subeq	r5, #1
 80a1e10:	d0f7      	beq.n	80a1e02 <__aeabi_dmul+0x1c6>
 80a1e12:	ea43 0306 	orr.w	r3, r3, r6
 80a1e16:	4770      	bx	lr
 80a1e18:	ea94 0f0c 	teq	r4, ip
 80a1e1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a1e20:	bf18      	it	ne
 80a1e22:	ea95 0f0c 	teqne	r5, ip
 80a1e26:	d00c      	beq.n	80a1e42 <__aeabi_dmul+0x206>
 80a1e28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1e2c:	bf18      	it	ne
 80a1e2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1e32:	d1d1      	bne.n	80a1dd8 <__aeabi_dmul+0x19c>
 80a1e34:	ea81 0103 	eor.w	r1, r1, r3
 80a1e38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1e3c:	f04f 0000 	mov.w	r0, #0
 80a1e40:	bd70      	pop	{r4, r5, r6, pc}
 80a1e42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a1e46:	bf06      	itte	eq
 80a1e48:	4610      	moveq	r0, r2
 80a1e4a:	4619      	moveq	r1, r3
 80a1e4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a1e50:	d019      	beq.n	80a1e86 <__aeabi_dmul+0x24a>
 80a1e52:	ea94 0f0c 	teq	r4, ip
 80a1e56:	d102      	bne.n	80a1e5e <__aeabi_dmul+0x222>
 80a1e58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a1e5c:	d113      	bne.n	80a1e86 <__aeabi_dmul+0x24a>
 80a1e5e:	ea95 0f0c 	teq	r5, ip
 80a1e62:	d105      	bne.n	80a1e70 <__aeabi_dmul+0x234>
 80a1e64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a1e68:	bf1c      	itt	ne
 80a1e6a:	4610      	movne	r0, r2
 80a1e6c:	4619      	movne	r1, r3
 80a1e6e:	d10a      	bne.n	80a1e86 <__aeabi_dmul+0x24a>
 80a1e70:	ea81 0103 	eor.w	r1, r1, r3
 80a1e74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a1e78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1e7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a1e80:	f04f 0000 	mov.w	r0, #0
 80a1e84:	bd70      	pop	{r4, r5, r6, pc}
 80a1e86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a1e8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a1e8e:	bd70      	pop	{r4, r5, r6, pc}

080a1e90 <__aeabi_ddiv>:
 80a1e90:	b570      	push	{r4, r5, r6, lr}
 80a1e92:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1e96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a1e9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a1e9e:	bf1d      	ittte	ne
 80a1ea0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a1ea4:	ea94 0f0c 	teqne	r4, ip
 80a1ea8:	ea95 0f0c 	teqne	r5, ip
 80a1eac:	f000 f8a7 	bleq	80a1ffe <__aeabi_ddiv+0x16e>
 80a1eb0:	eba4 0405 	sub.w	r4, r4, r5
 80a1eb4:	ea81 0e03 	eor.w	lr, r1, r3
 80a1eb8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a1ebc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1ec0:	f000 8088 	beq.w	80a1fd4 <__aeabi_ddiv+0x144>
 80a1ec4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1ec8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a1ecc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a1ed0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a1ed4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a1ed8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a1edc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a1ee0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a1ee4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a1ee8:	429d      	cmp	r5, r3
 80a1eea:	bf08      	it	eq
 80a1eec:	4296      	cmpeq	r6, r2
 80a1eee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a1ef2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a1ef6:	d202      	bcs.n	80a1efe <__aeabi_ddiv+0x6e>
 80a1ef8:	085b      	lsrs	r3, r3, #1
 80a1efa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1efe:	1ab6      	subs	r6, r6, r2
 80a1f00:	eb65 0503 	sbc.w	r5, r5, r3
 80a1f04:	085b      	lsrs	r3, r3, #1
 80a1f06:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a1f0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a1f12:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1f16:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1f1a:	bf22      	ittt	cs
 80a1f1c:	1ab6      	subcs	r6, r6, r2
 80a1f1e:	4675      	movcs	r5, lr
 80a1f20:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1f24:	085b      	lsrs	r3, r3, #1
 80a1f26:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f2a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1f2e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1f32:	bf22      	ittt	cs
 80a1f34:	1ab6      	subcs	r6, r6, r2
 80a1f36:	4675      	movcs	r5, lr
 80a1f38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1f3c:	085b      	lsrs	r3, r3, #1
 80a1f3e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f42:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1f46:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1f4a:	bf22      	ittt	cs
 80a1f4c:	1ab6      	subcs	r6, r6, r2
 80a1f4e:	4675      	movcs	r5, lr
 80a1f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1f54:	085b      	lsrs	r3, r3, #1
 80a1f56:	ea4f 0232 	mov.w	r2, r2, rrx
 80a1f5a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a1f5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a1f62:	bf22      	ittt	cs
 80a1f64:	1ab6      	subcs	r6, r6, r2
 80a1f66:	4675      	movcs	r5, lr
 80a1f68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1f6c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a1f70:	d018      	beq.n	80a1fa4 <__aeabi_ddiv+0x114>
 80a1f72:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a1f76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a1f7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a1f7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a1f82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a1f86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a1f8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a1f8e:	d1c0      	bne.n	80a1f12 <__aeabi_ddiv+0x82>
 80a1f90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1f94:	d10b      	bne.n	80a1fae <__aeabi_ddiv+0x11e>
 80a1f96:	ea41 0100 	orr.w	r1, r1, r0
 80a1f9a:	f04f 0000 	mov.w	r0, #0
 80a1f9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a1fa2:	e7b6      	b.n	80a1f12 <__aeabi_ddiv+0x82>
 80a1fa4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a1fa8:	bf04      	itt	eq
 80a1faa:	4301      	orreq	r1, r0
 80a1fac:	2000      	moveq	r0, #0
 80a1fae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a1fb2:	bf88      	it	hi
 80a1fb4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a1fb8:	f63f aeaf 	bhi.w	80a1d1a <__aeabi_dmul+0xde>
 80a1fbc:	ebb5 0c03 	subs.w	ip, r5, r3
 80a1fc0:	bf04      	itt	eq
 80a1fc2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a1fc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a1fca:	f150 0000 	adcs.w	r0, r0, #0
 80a1fce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a1fd2:	bd70      	pop	{r4, r5, r6, pc}
 80a1fd4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a1fd8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a1fdc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a1fe0:	bfc2      	ittt	gt
 80a1fe2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a1fe6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a1fea:	bd70      	popgt	{r4, r5, r6, pc}
 80a1fec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a1ff0:	f04f 0e00 	mov.w	lr, #0
 80a1ff4:	3c01      	subs	r4, #1
 80a1ff6:	e690      	b.n	80a1d1a <__aeabi_dmul+0xde>
 80a1ff8:	ea45 0e06 	orr.w	lr, r5, r6
 80a1ffc:	e68d      	b.n	80a1d1a <__aeabi_dmul+0xde>
 80a1ffe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2002:	ea94 0f0c 	teq	r4, ip
 80a2006:	bf08      	it	eq
 80a2008:	ea95 0f0c 	teqeq	r5, ip
 80a200c:	f43f af3b 	beq.w	80a1e86 <__aeabi_dmul+0x24a>
 80a2010:	ea94 0f0c 	teq	r4, ip
 80a2014:	d10a      	bne.n	80a202c <__aeabi_ddiv+0x19c>
 80a2016:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a201a:	f47f af34 	bne.w	80a1e86 <__aeabi_dmul+0x24a>
 80a201e:	ea95 0f0c 	teq	r5, ip
 80a2022:	f47f af25 	bne.w	80a1e70 <__aeabi_dmul+0x234>
 80a2026:	4610      	mov	r0, r2
 80a2028:	4619      	mov	r1, r3
 80a202a:	e72c      	b.n	80a1e86 <__aeabi_dmul+0x24a>
 80a202c:	ea95 0f0c 	teq	r5, ip
 80a2030:	d106      	bne.n	80a2040 <__aeabi_ddiv+0x1b0>
 80a2032:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2036:	f43f aefd 	beq.w	80a1e34 <__aeabi_dmul+0x1f8>
 80a203a:	4610      	mov	r0, r2
 80a203c:	4619      	mov	r1, r3
 80a203e:	e722      	b.n	80a1e86 <__aeabi_dmul+0x24a>
 80a2040:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2044:	bf18      	it	ne
 80a2046:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a204a:	f47f aec5 	bne.w	80a1dd8 <__aeabi_dmul+0x19c>
 80a204e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2052:	f47f af0d 	bne.w	80a1e70 <__aeabi_dmul+0x234>
 80a2056:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a205a:	f47f aeeb 	bne.w	80a1e34 <__aeabi_dmul+0x1f8>
 80a205e:	e712      	b.n	80a1e86 <__aeabi_dmul+0x24a>

080a2060 <__gedf2>:
 80a2060:	f04f 3cff 	mov.w	ip, #4294967295
 80a2064:	e006      	b.n	80a2074 <__cmpdf2+0x4>
 80a2066:	bf00      	nop

080a2068 <__ledf2>:
 80a2068:	f04f 0c01 	mov.w	ip, #1
 80a206c:	e002      	b.n	80a2074 <__cmpdf2+0x4>
 80a206e:	bf00      	nop

080a2070 <__cmpdf2>:
 80a2070:	f04f 0c01 	mov.w	ip, #1
 80a2074:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a2078:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a207c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2080:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2084:	bf18      	it	ne
 80a2086:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a208a:	d01b      	beq.n	80a20c4 <__cmpdf2+0x54>
 80a208c:	b001      	add	sp, #4
 80a208e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2092:	bf0c      	ite	eq
 80a2094:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a2098:	ea91 0f03 	teqne	r1, r3
 80a209c:	bf02      	ittt	eq
 80a209e:	ea90 0f02 	teqeq	r0, r2
 80a20a2:	2000      	moveq	r0, #0
 80a20a4:	4770      	bxeq	lr
 80a20a6:	f110 0f00 	cmn.w	r0, #0
 80a20aa:	ea91 0f03 	teq	r1, r3
 80a20ae:	bf58      	it	pl
 80a20b0:	4299      	cmppl	r1, r3
 80a20b2:	bf08      	it	eq
 80a20b4:	4290      	cmpeq	r0, r2
 80a20b6:	bf2c      	ite	cs
 80a20b8:	17d8      	asrcs	r0, r3, #31
 80a20ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a20be:	f040 0001 	orr.w	r0, r0, #1
 80a20c2:	4770      	bx	lr
 80a20c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a20c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a20cc:	d102      	bne.n	80a20d4 <__cmpdf2+0x64>
 80a20ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a20d2:	d107      	bne.n	80a20e4 <__cmpdf2+0x74>
 80a20d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a20d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a20dc:	d1d6      	bne.n	80a208c <__cmpdf2+0x1c>
 80a20de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a20e2:	d0d3      	beq.n	80a208c <__cmpdf2+0x1c>
 80a20e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a20e8:	4770      	bx	lr
 80a20ea:	bf00      	nop

080a20ec <__aeabi_cdrcmple>:
 80a20ec:	4684      	mov	ip, r0
 80a20ee:	4610      	mov	r0, r2
 80a20f0:	4662      	mov	r2, ip
 80a20f2:	468c      	mov	ip, r1
 80a20f4:	4619      	mov	r1, r3
 80a20f6:	4663      	mov	r3, ip
 80a20f8:	e000      	b.n	80a20fc <__aeabi_cdcmpeq>
 80a20fa:	bf00      	nop

080a20fc <__aeabi_cdcmpeq>:
 80a20fc:	b501      	push	{r0, lr}
 80a20fe:	f7ff ffb7 	bl	80a2070 <__cmpdf2>
 80a2102:	2800      	cmp	r0, #0
 80a2104:	bf48      	it	mi
 80a2106:	f110 0f00 	cmnmi.w	r0, #0
 80a210a:	bd01      	pop	{r0, pc}

080a210c <__aeabi_dcmpeq>:
 80a210c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2110:	f7ff fff4 	bl	80a20fc <__aeabi_cdcmpeq>
 80a2114:	bf0c      	ite	eq
 80a2116:	2001      	moveq	r0, #1
 80a2118:	2000      	movne	r0, #0
 80a211a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a211e:	bf00      	nop

080a2120 <__aeabi_dcmplt>:
 80a2120:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2124:	f7ff ffea 	bl	80a20fc <__aeabi_cdcmpeq>
 80a2128:	bf34      	ite	cc
 80a212a:	2001      	movcc	r0, #1
 80a212c:	2000      	movcs	r0, #0
 80a212e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2132:	bf00      	nop

080a2134 <__aeabi_dcmple>:
 80a2134:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2138:	f7ff ffe0 	bl	80a20fc <__aeabi_cdcmpeq>
 80a213c:	bf94      	ite	ls
 80a213e:	2001      	movls	r0, #1
 80a2140:	2000      	movhi	r0, #0
 80a2142:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2146:	bf00      	nop

080a2148 <__aeabi_dcmpge>:
 80a2148:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a214c:	f7ff ffce 	bl	80a20ec <__aeabi_cdrcmple>
 80a2150:	bf94      	ite	ls
 80a2152:	2001      	movls	r0, #1
 80a2154:	2000      	movhi	r0, #0
 80a2156:	f85d fb08 	ldr.w	pc, [sp], #8
 80a215a:	bf00      	nop

080a215c <__aeabi_dcmpgt>:
 80a215c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2160:	f7ff ffc4 	bl	80a20ec <__aeabi_cdrcmple>
 80a2164:	bf34      	ite	cc
 80a2166:	2001      	movcc	r0, #1
 80a2168:	2000      	movcs	r0, #0
 80a216a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a216e:	bf00      	nop

080a2170 <__aeabi_d2uiz>:
 80a2170:	004a      	lsls	r2, r1, #1
 80a2172:	d211      	bcs.n	80a2198 <__aeabi_d2uiz+0x28>
 80a2174:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2178:	d211      	bcs.n	80a219e <__aeabi_d2uiz+0x2e>
 80a217a:	d50d      	bpl.n	80a2198 <__aeabi_d2uiz+0x28>
 80a217c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2180:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2184:	d40e      	bmi.n	80a21a4 <__aeabi_d2uiz+0x34>
 80a2186:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a218a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a218e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2192:	fa23 f002 	lsr.w	r0, r3, r2
 80a2196:	4770      	bx	lr
 80a2198:	f04f 0000 	mov.w	r0, #0
 80a219c:	4770      	bx	lr
 80a219e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a21a2:	d102      	bne.n	80a21aa <__aeabi_d2uiz+0x3a>
 80a21a4:	f04f 30ff 	mov.w	r0, #4294967295
 80a21a8:	4770      	bx	lr
 80a21aa:	f04f 0000 	mov.w	r0, #0
 80a21ae:	4770      	bx	lr

080a21b0 <__aeabi_f2uiz>:
 80a21b0:	0042      	lsls	r2, r0, #1
 80a21b2:	d20e      	bcs.n	80a21d2 <__aeabi_f2uiz+0x22>
 80a21b4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a21b8:	d30b      	bcc.n	80a21d2 <__aeabi_f2uiz+0x22>
 80a21ba:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a21be:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a21c2:	d409      	bmi.n	80a21d8 <__aeabi_f2uiz+0x28>
 80a21c4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a21c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a21cc:	fa23 f002 	lsr.w	r0, r3, r2
 80a21d0:	4770      	bx	lr
 80a21d2:	f04f 0000 	mov.w	r0, #0
 80a21d6:	4770      	bx	lr
 80a21d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a21dc:	d101      	bne.n	80a21e2 <__aeabi_f2uiz+0x32>
 80a21de:	0242      	lsls	r2, r0, #9
 80a21e0:	d102      	bne.n	80a21e8 <__aeabi_f2uiz+0x38>
 80a21e2:	f04f 30ff 	mov.w	r0, #4294967295
 80a21e6:	4770      	bx	lr
 80a21e8:	f04f 0000 	mov.w	r0, #0
 80a21ec:	4770      	bx	lr
 80a21ee:	bf00      	nop

080a21f0 <__aeabi_uldivmod>:
 80a21f0:	b953      	cbnz	r3, 80a2208 <__aeabi_uldivmod+0x18>
 80a21f2:	b94a      	cbnz	r2, 80a2208 <__aeabi_uldivmod+0x18>
 80a21f4:	2900      	cmp	r1, #0
 80a21f6:	bf08      	it	eq
 80a21f8:	2800      	cmpeq	r0, #0
 80a21fa:	bf1c      	itt	ne
 80a21fc:	f04f 31ff 	movne.w	r1, #4294967295
 80a2200:	f04f 30ff 	movne.w	r0, #4294967295
 80a2204:	f000 b98c 	b.w	80a2520 <__aeabi_idiv0>
 80a2208:	f1ad 0c08 	sub.w	ip, sp, #8
 80a220c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a2210:	f000 f824 	bl	80a225c <__udivmoddi4>
 80a2214:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a2218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a221c:	b004      	add	sp, #16
 80a221e:	4770      	bx	lr

080a2220 <__aeabi_d2ulz>:
 80a2220:	b5d0      	push	{r4, r6, r7, lr}
 80a2222:	2200      	movs	r2, #0
 80a2224:	4b0b      	ldr	r3, [pc, #44]	; (80a2254 <__aeabi_d2ulz+0x34>)
 80a2226:	4606      	mov	r6, r0
 80a2228:	460f      	mov	r7, r1
 80a222a:	f7ff fd07 	bl	80a1c3c <__aeabi_dmul>
 80a222e:	f7ff ff9f 	bl	80a2170 <__aeabi_d2uiz>
 80a2232:	4604      	mov	r4, r0
 80a2234:	f7ff fc88 	bl	80a1b48 <__aeabi_ui2d>
 80a2238:	2200      	movs	r2, #0
 80a223a:	4b07      	ldr	r3, [pc, #28]	; (80a2258 <__aeabi_d2ulz+0x38>)
 80a223c:	f7ff fcfe 	bl	80a1c3c <__aeabi_dmul>
 80a2240:	4602      	mov	r2, r0
 80a2242:	460b      	mov	r3, r1
 80a2244:	4630      	mov	r0, r6
 80a2246:	4639      	mov	r1, r7
 80a2248:	f7ff fb40 	bl	80a18cc <__aeabi_dsub>
 80a224c:	f7ff ff90 	bl	80a2170 <__aeabi_d2uiz>
 80a2250:	4621      	mov	r1, r4
 80a2252:	bdd0      	pop	{r4, r6, r7, pc}
 80a2254:	3df00000 	.word	0x3df00000
 80a2258:	41f00000 	.word	0x41f00000

080a225c <__udivmoddi4>:
 80a225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2260:	9e08      	ldr	r6, [sp, #32]
 80a2262:	460d      	mov	r5, r1
 80a2264:	4604      	mov	r4, r0
 80a2266:	468e      	mov	lr, r1
 80a2268:	2b00      	cmp	r3, #0
 80a226a:	f040 8083 	bne.w	80a2374 <__udivmoddi4+0x118>
 80a226e:	428a      	cmp	r2, r1
 80a2270:	4617      	mov	r7, r2
 80a2272:	d947      	bls.n	80a2304 <__udivmoddi4+0xa8>
 80a2274:	fab2 f382 	clz	r3, r2
 80a2278:	b14b      	cbz	r3, 80a228e <__udivmoddi4+0x32>
 80a227a:	f1c3 0120 	rsb	r1, r3, #32
 80a227e:	fa05 fe03 	lsl.w	lr, r5, r3
 80a2282:	fa20 f101 	lsr.w	r1, r0, r1
 80a2286:	409f      	lsls	r7, r3
 80a2288:	ea41 0e0e 	orr.w	lr, r1, lr
 80a228c:	409c      	lsls	r4, r3
 80a228e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a2292:	fbbe fcf8 	udiv	ip, lr, r8
 80a2296:	fa1f f987 	uxth.w	r9, r7
 80a229a:	fb08 e21c 	mls	r2, r8, ip, lr
 80a229e:	fb0c f009 	mul.w	r0, ip, r9
 80a22a2:	0c21      	lsrs	r1, r4, #16
 80a22a4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a22a8:	4290      	cmp	r0, r2
 80a22aa:	d90a      	bls.n	80a22c2 <__udivmoddi4+0x66>
 80a22ac:	18ba      	adds	r2, r7, r2
 80a22ae:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a22b2:	f080 8118 	bcs.w	80a24e6 <__udivmoddi4+0x28a>
 80a22b6:	4290      	cmp	r0, r2
 80a22b8:	f240 8115 	bls.w	80a24e6 <__udivmoddi4+0x28a>
 80a22bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80a22c0:	443a      	add	r2, r7
 80a22c2:	1a12      	subs	r2, r2, r0
 80a22c4:	fbb2 f0f8 	udiv	r0, r2, r8
 80a22c8:	fb08 2210 	mls	r2, r8, r0, r2
 80a22cc:	fb00 f109 	mul.w	r1, r0, r9
 80a22d0:	b2a4      	uxth	r4, r4
 80a22d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a22d6:	42a1      	cmp	r1, r4
 80a22d8:	d909      	bls.n	80a22ee <__udivmoddi4+0x92>
 80a22da:	193c      	adds	r4, r7, r4
 80a22dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80a22e0:	f080 8103 	bcs.w	80a24ea <__udivmoddi4+0x28e>
 80a22e4:	42a1      	cmp	r1, r4
 80a22e6:	f240 8100 	bls.w	80a24ea <__udivmoddi4+0x28e>
 80a22ea:	3802      	subs	r0, #2
 80a22ec:	443c      	add	r4, r7
 80a22ee:	1a64      	subs	r4, r4, r1
 80a22f0:	2100      	movs	r1, #0
 80a22f2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a22f6:	b11e      	cbz	r6, 80a2300 <__udivmoddi4+0xa4>
 80a22f8:	2200      	movs	r2, #0
 80a22fa:	40dc      	lsrs	r4, r3
 80a22fc:	e9c6 4200 	strd	r4, r2, [r6]
 80a2300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2304:	b902      	cbnz	r2, 80a2308 <__udivmoddi4+0xac>
 80a2306:	deff      	udf	#255	; 0xff
 80a2308:	fab2 f382 	clz	r3, r2
 80a230c:	2b00      	cmp	r3, #0
 80a230e:	d14f      	bne.n	80a23b0 <__udivmoddi4+0x154>
 80a2310:	1a8d      	subs	r5, r1, r2
 80a2312:	2101      	movs	r1, #1
 80a2314:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a2318:	fa1f f882 	uxth.w	r8, r2
 80a231c:	fbb5 fcfe 	udiv	ip, r5, lr
 80a2320:	fb0e 551c 	mls	r5, lr, ip, r5
 80a2324:	fb08 f00c 	mul.w	r0, r8, ip
 80a2328:	0c22      	lsrs	r2, r4, #16
 80a232a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a232e:	42a8      	cmp	r0, r5
 80a2330:	d907      	bls.n	80a2342 <__udivmoddi4+0xe6>
 80a2332:	197d      	adds	r5, r7, r5
 80a2334:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a2338:	d202      	bcs.n	80a2340 <__udivmoddi4+0xe4>
 80a233a:	42a8      	cmp	r0, r5
 80a233c:	f200 80e9 	bhi.w	80a2512 <__udivmoddi4+0x2b6>
 80a2340:	4694      	mov	ip, r2
 80a2342:	1a2d      	subs	r5, r5, r0
 80a2344:	fbb5 f0fe 	udiv	r0, r5, lr
 80a2348:	fb0e 5510 	mls	r5, lr, r0, r5
 80a234c:	fb08 f800 	mul.w	r8, r8, r0
 80a2350:	b2a4      	uxth	r4, r4
 80a2352:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a2356:	45a0      	cmp	r8, r4
 80a2358:	d907      	bls.n	80a236a <__udivmoddi4+0x10e>
 80a235a:	193c      	adds	r4, r7, r4
 80a235c:	f100 32ff 	add.w	r2, r0, #4294967295
 80a2360:	d202      	bcs.n	80a2368 <__udivmoddi4+0x10c>
 80a2362:	45a0      	cmp	r8, r4
 80a2364:	f200 80d9 	bhi.w	80a251a <__udivmoddi4+0x2be>
 80a2368:	4610      	mov	r0, r2
 80a236a:	eba4 0408 	sub.w	r4, r4, r8
 80a236e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a2372:	e7c0      	b.n	80a22f6 <__udivmoddi4+0x9a>
 80a2374:	428b      	cmp	r3, r1
 80a2376:	d908      	bls.n	80a238a <__udivmoddi4+0x12e>
 80a2378:	2e00      	cmp	r6, #0
 80a237a:	f000 80b1 	beq.w	80a24e0 <__udivmoddi4+0x284>
 80a237e:	2100      	movs	r1, #0
 80a2380:	e9c6 0500 	strd	r0, r5, [r6]
 80a2384:	4608      	mov	r0, r1
 80a2386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a238a:	fab3 f183 	clz	r1, r3
 80a238e:	2900      	cmp	r1, #0
 80a2390:	d14b      	bne.n	80a242a <__udivmoddi4+0x1ce>
 80a2392:	42ab      	cmp	r3, r5
 80a2394:	d302      	bcc.n	80a239c <__udivmoddi4+0x140>
 80a2396:	4282      	cmp	r2, r0
 80a2398:	f200 80b9 	bhi.w	80a250e <__udivmoddi4+0x2b2>
 80a239c:	1a84      	subs	r4, r0, r2
 80a239e:	eb65 0303 	sbc.w	r3, r5, r3
 80a23a2:	2001      	movs	r0, #1
 80a23a4:	469e      	mov	lr, r3
 80a23a6:	2e00      	cmp	r6, #0
 80a23a8:	d0aa      	beq.n	80a2300 <__udivmoddi4+0xa4>
 80a23aa:	e9c6 4e00 	strd	r4, lr, [r6]
 80a23ae:	e7a7      	b.n	80a2300 <__udivmoddi4+0xa4>
 80a23b0:	409f      	lsls	r7, r3
 80a23b2:	f1c3 0220 	rsb	r2, r3, #32
 80a23b6:	40d1      	lsrs	r1, r2
 80a23b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a23bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80a23c0:	fa1f f887 	uxth.w	r8, r7
 80a23c4:	fb0e 1110 	mls	r1, lr, r0, r1
 80a23c8:	fa24 f202 	lsr.w	r2, r4, r2
 80a23cc:	409d      	lsls	r5, r3
 80a23ce:	fb00 fc08 	mul.w	ip, r0, r8
 80a23d2:	432a      	orrs	r2, r5
 80a23d4:	0c15      	lsrs	r5, r2, #16
 80a23d6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a23da:	45ac      	cmp	ip, r5
 80a23dc:	fa04 f403 	lsl.w	r4, r4, r3
 80a23e0:	d909      	bls.n	80a23f6 <__udivmoddi4+0x19a>
 80a23e2:	197d      	adds	r5, r7, r5
 80a23e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80a23e8:	f080 808f 	bcs.w	80a250a <__udivmoddi4+0x2ae>
 80a23ec:	45ac      	cmp	ip, r5
 80a23ee:	f240 808c 	bls.w	80a250a <__udivmoddi4+0x2ae>
 80a23f2:	3802      	subs	r0, #2
 80a23f4:	443d      	add	r5, r7
 80a23f6:	eba5 050c 	sub.w	r5, r5, ip
 80a23fa:	fbb5 f1fe 	udiv	r1, r5, lr
 80a23fe:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a2402:	fb01 f908 	mul.w	r9, r1, r8
 80a2406:	b295      	uxth	r5, r2
 80a2408:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a240c:	45a9      	cmp	r9, r5
 80a240e:	d907      	bls.n	80a2420 <__udivmoddi4+0x1c4>
 80a2410:	197d      	adds	r5, r7, r5
 80a2412:	f101 32ff 	add.w	r2, r1, #4294967295
 80a2416:	d274      	bcs.n	80a2502 <__udivmoddi4+0x2a6>
 80a2418:	45a9      	cmp	r9, r5
 80a241a:	d972      	bls.n	80a2502 <__udivmoddi4+0x2a6>
 80a241c:	3902      	subs	r1, #2
 80a241e:	443d      	add	r5, r7
 80a2420:	eba5 0509 	sub.w	r5, r5, r9
 80a2424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a2428:	e778      	b.n	80a231c <__udivmoddi4+0xc0>
 80a242a:	f1c1 0720 	rsb	r7, r1, #32
 80a242e:	408b      	lsls	r3, r1
 80a2430:	fa22 fc07 	lsr.w	ip, r2, r7
 80a2434:	ea4c 0c03 	orr.w	ip, ip, r3
 80a2438:	fa25 f407 	lsr.w	r4, r5, r7
 80a243c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a2440:	fbb4 f9fe 	udiv	r9, r4, lr
 80a2444:	fa1f f88c 	uxth.w	r8, ip
 80a2448:	fb0e 4419 	mls	r4, lr, r9, r4
 80a244c:	fa20 f307 	lsr.w	r3, r0, r7
 80a2450:	fb09 fa08 	mul.w	sl, r9, r8
 80a2454:	408d      	lsls	r5, r1
 80a2456:	431d      	orrs	r5, r3
 80a2458:	0c2b      	lsrs	r3, r5, #16
 80a245a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a245e:	45a2      	cmp	sl, r4
 80a2460:	fa02 f201 	lsl.w	r2, r2, r1
 80a2464:	fa00 f301 	lsl.w	r3, r0, r1
 80a2468:	d909      	bls.n	80a247e <__udivmoddi4+0x222>
 80a246a:	eb1c 0404 	adds.w	r4, ip, r4
 80a246e:	f109 30ff 	add.w	r0, r9, #4294967295
 80a2472:	d248      	bcs.n	80a2506 <__udivmoddi4+0x2aa>
 80a2474:	45a2      	cmp	sl, r4
 80a2476:	d946      	bls.n	80a2506 <__udivmoddi4+0x2aa>
 80a2478:	f1a9 0902 	sub.w	r9, r9, #2
 80a247c:	4464      	add	r4, ip
 80a247e:	eba4 040a 	sub.w	r4, r4, sl
 80a2482:	fbb4 f0fe 	udiv	r0, r4, lr
 80a2486:	fb0e 4410 	mls	r4, lr, r0, r4
 80a248a:	fb00 fa08 	mul.w	sl, r0, r8
 80a248e:	b2ad      	uxth	r5, r5
 80a2490:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a2494:	45a2      	cmp	sl, r4
 80a2496:	d908      	bls.n	80a24aa <__udivmoddi4+0x24e>
 80a2498:	eb1c 0404 	adds.w	r4, ip, r4
 80a249c:	f100 35ff 	add.w	r5, r0, #4294967295
 80a24a0:	d22d      	bcs.n	80a24fe <__udivmoddi4+0x2a2>
 80a24a2:	45a2      	cmp	sl, r4
 80a24a4:	d92b      	bls.n	80a24fe <__udivmoddi4+0x2a2>
 80a24a6:	3802      	subs	r0, #2
 80a24a8:	4464      	add	r4, ip
 80a24aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a24ae:	fba0 8902 	umull	r8, r9, r0, r2
 80a24b2:	eba4 040a 	sub.w	r4, r4, sl
 80a24b6:	454c      	cmp	r4, r9
 80a24b8:	46c6      	mov	lr, r8
 80a24ba:	464d      	mov	r5, r9
 80a24bc:	d319      	bcc.n	80a24f2 <__udivmoddi4+0x296>
 80a24be:	d016      	beq.n	80a24ee <__udivmoddi4+0x292>
 80a24c0:	b15e      	cbz	r6, 80a24da <__udivmoddi4+0x27e>
 80a24c2:	ebb3 020e 	subs.w	r2, r3, lr
 80a24c6:	eb64 0405 	sbc.w	r4, r4, r5
 80a24ca:	fa04 f707 	lsl.w	r7, r4, r7
 80a24ce:	fa22 f301 	lsr.w	r3, r2, r1
 80a24d2:	431f      	orrs	r7, r3
 80a24d4:	40cc      	lsrs	r4, r1
 80a24d6:	e9c6 7400 	strd	r7, r4, [r6]
 80a24da:	2100      	movs	r1, #0
 80a24dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a24e0:	4631      	mov	r1, r6
 80a24e2:	4630      	mov	r0, r6
 80a24e4:	e70c      	b.n	80a2300 <__udivmoddi4+0xa4>
 80a24e6:	468c      	mov	ip, r1
 80a24e8:	e6eb      	b.n	80a22c2 <__udivmoddi4+0x66>
 80a24ea:	4610      	mov	r0, r2
 80a24ec:	e6ff      	b.n	80a22ee <__udivmoddi4+0x92>
 80a24ee:	4543      	cmp	r3, r8
 80a24f0:	d2e6      	bcs.n	80a24c0 <__udivmoddi4+0x264>
 80a24f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80a24f6:	eb69 050c 	sbc.w	r5, r9, ip
 80a24fa:	3801      	subs	r0, #1
 80a24fc:	e7e0      	b.n	80a24c0 <__udivmoddi4+0x264>
 80a24fe:	4628      	mov	r0, r5
 80a2500:	e7d3      	b.n	80a24aa <__udivmoddi4+0x24e>
 80a2502:	4611      	mov	r1, r2
 80a2504:	e78c      	b.n	80a2420 <__udivmoddi4+0x1c4>
 80a2506:	4681      	mov	r9, r0
 80a2508:	e7b9      	b.n	80a247e <__udivmoddi4+0x222>
 80a250a:	4608      	mov	r0, r1
 80a250c:	e773      	b.n	80a23f6 <__udivmoddi4+0x19a>
 80a250e:	4608      	mov	r0, r1
 80a2510:	e749      	b.n	80a23a6 <__udivmoddi4+0x14a>
 80a2512:	f1ac 0c02 	sub.w	ip, ip, #2
 80a2516:	443d      	add	r5, r7
 80a2518:	e713      	b.n	80a2342 <__udivmoddi4+0xe6>
 80a251a:	3802      	subs	r0, #2
 80a251c:	443c      	add	r4, r7
 80a251e:	e724      	b.n	80a236a <__udivmoddi4+0x10e>

080a2520 <__aeabi_idiv0>:
 80a2520:	4770      	bx	lr
 80a2522:	bf00      	nop

080a2524 <atexit>:
 80a2524:	2300      	movs	r3, #0
 80a2526:	4601      	mov	r1, r0
 80a2528:	461a      	mov	r2, r3
 80a252a:	4618      	mov	r0, r3
 80a252c:	f000 b85e 	b.w	80a25ec <__register_exitproc>

080a2530 <memcpy>:
 80a2530:	440a      	add	r2, r1
 80a2532:	4291      	cmp	r1, r2
 80a2534:	f100 33ff 	add.w	r3, r0, #4294967295
 80a2538:	d100      	bne.n	80a253c <memcpy+0xc>
 80a253a:	4770      	bx	lr
 80a253c:	b510      	push	{r4, lr}
 80a253e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2542:	4291      	cmp	r1, r2
 80a2544:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2548:	d1f9      	bne.n	80a253e <memcpy+0xe>
 80a254a:	bd10      	pop	{r4, pc}

080a254c <memset>:
 80a254c:	4603      	mov	r3, r0
 80a254e:	4402      	add	r2, r0
 80a2550:	4293      	cmp	r3, r2
 80a2552:	d100      	bne.n	80a2556 <memset+0xa>
 80a2554:	4770      	bx	lr
 80a2556:	f803 1b01 	strb.w	r1, [r3], #1
 80a255a:	e7f9      	b.n	80a2550 <memset+0x4>

080a255c <srand>:
 80a255c:	b538      	push	{r3, r4, r5, lr}
 80a255e:	4b0d      	ldr	r3, [pc, #52]	; (80a2594 <srand+0x38>)
 80a2560:	4604      	mov	r4, r0
 80a2562:	681d      	ldr	r5, [r3, #0]
 80a2564:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a2566:	b97b      	cbnz	r3, 80a2588 <srand+0x2c>
 80a2568:	2018      	movs	r0, #24
 80a256a:	f7fe f8fd 	bl	80a0768 <malloc>
 80a256e:	4a0a      	ldr	r2, [pc, #40]	; (80a2598 <srand+0x3c>)
 80a2570:	4b0a      	ldr	r3, [pc, #40]	; (80a259c <srand+0x40>)
 80a2572:	63a8      	str	r0, [r5, #56]	; 0x38
 80a2574:	e9c0 2300 	strd	r2, r3, [r0]
 80a2578:	4b09      	ldr	r3, [pc, #36]	; (80a25a0 <srand+0x44>)
 80a257a:	2201      	movs	r2, #1
 80a257c:	6083      	str	r3, [r0, #8]
 80a257e:	230b      	movs	r3, #11
 80a2580:	8183      	strh	r3, [r0, #12]
 80a2582:	2300      	movs	r3, #0
 80a2584:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2588:	2200      	movs	r2, #0
 80a258a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a258c:	611c      	str	r4, [r3, #16]
 80a258e:	615a      	str	r2, [r3, #20]
 80a2590:	bd38      	pop	{r3, r4, r5, pc}
 80a2592:	bf00      	nop
 80a2594:	20000004 	.word	0x20000004
 80a2598:	abcd330e 	.word	0xabcd330e
 80a259c:	e66d1234 	.word	0xe66d1234
 80a25a0:	0005deec 	.word	0x0005deec

080a25a4 <strdup>:
 80a25a4:	4b02      	ldr	r3, [pc, #8]	; (80a25b0 <strdup+0xc>)
 80a25a6:	4601      	mov	r1, r0
 80a25a8:	6818      	ldr	r0, [r3, #0]
 80a25aa:	f000 b803 	b.w	80a25b4 <_strdup_r>
 80a25ae:	bf00      	nop
 80a25b0:	20000004 	.word	0x20000004

080a25b4 <_strdup_r>:
 80a25b4:	b570      	push	{r4, r5, r6, lr}
 80a25b6:	4604      	mov	r4, r0
 80a25b8:	4608      	mov	r0, r1
 80a25ba:	460d      	mov	r5, r1
 80a25bc:	f000 f80d 	bl	80a25da <strlen>
 80a25c0:	1c46      	adds	r6, r0, #1
 80a25c2:	4631      	mov	r1, r6
 80a25c4:	4620      	mov	r0, r4
 80a25c6:	f7fe f8ef 	bl	80a07a8 <_malloc_r>
 80a25ca:	4604      	mov	r4, r0
 80a25cc:	b118      	cbz	r0, 80a25d6 <_strdup_r+0x22>
 80a25ce:	4632      	mov	r2, r6
 80a25d0:	4629      	mov	r1, r5
 80a25d2:	f7ff ffad 	bl	80a2530 <memcpy>
 80a25d6:	4620      	mov	r0, r4
 80a25d8:	bd70      	pop	{r4, r5, r6, pc}

080a25da <strlen>:
 80a25da:	4603      	mov	r3, r0
 80a25dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a25e0:	2a00      	cmp	r2, #0
 80a25e2:	d1fb      	bne.n	80a25dc <strlen+0x2>
 80a25e4:	1a18      	subs	r0, r3, r0
 80a25e6:	3801      	subs	r0, #1
 80a25e8:	4770      	bx	lr
	...

080a25ec <__register_exitproc>:
 80a25ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a25f0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80a26b0 <__register_exitproc+0xc4>
 80a25f4:	4606      	mov	r6, r0
 80a25f6:	f8d8 0000 	ldr.w	r0, [r8]
 80a25fa:	461f      	mov	r7, r3
 80a25fc:	460d      	mov	r5, r1
 80a25fe:	4691      	mov	r9, r2
 80a2600:	f000 f858 	bl	80a26b4 <__retarget_lock_acquire_recursive>
 80a2604:	4b26      	ldr	r3, [pc, #152]	; (80a26a0 <__register_exitproc+0xb4>)
 80a2606:	681c      	ldr	r4, [r3, #0]
 80a2608:	b934      	cbnz	r4, 80a2618 <__register_exitproc+0x2c>
 80a260a:	4c26      	ldr	r4, [pc, #152]	; (80a26a4 <__register_exitproc+0xb8>)
 80a260c:	601c      	str	r4, [r3, #0]
 80a260e:	4b26      	ldr	r3, [pc, #152]	; (80a26a8 <__register_exitproc+0xbc>)
 80a2610:	b113      	cbz	r3, 80a2618 <__register_exitproc+0x2c>
 80a2612:	681b      	ldr	r3, [r3, #0]
 80a2614:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80a2618:	6863      	ldr	r3, [r4, #4]
 80a261a:	2b1f      	cmp	r3, #31
 80a261c:	dd07      	ble.n	80a262e <__register_exitproc+0x42>
 80a261e:	f8d8 0000 	ldr.w	r0, [r8]
 80a2622:	f000 f849 	bl	80a26b8 <__retarget_lock_release_recursive>
 80a2626:	f04f 30ff 	mov.w	r0, #4294967295
 80a262a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a262e:	b35e      	cbz	r6, 80a2688 <__register_exitproc+0x9c>
 80a2630:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80a2634:	b988      	cbnz	r0, 80a265a <__register_exitproc+0x6e>
 80a2636:	4b1d      	ldr	r3, [pc, #116]	; (80a26ac <__register_exitproc+0xc0>)
 80a2638:	b923      	cbnz	r3, 80a2644 <__register_exitproc+0x58>
 80a263a:	f8d8 0000 	ldr.w	r0, [r8]
 80a263e:	f000 f83a 	bl	80a26b6 <__retarget_lock_release>
 80a2642:	e7f0      	b.n	80a2626 <__register_exitproc+0x3a>
 80a2644:	f44f 7084 	mov.w	r0, #264	; 0x108
 80a2648:	f7fe f88e 	bl	80a0768 <malloc>
 80a264c:	2800      	cmp	r0, #0
 80a264e:	d0f4      	beq.n	80a263a <__register_exitproc+0x4e>
 80a2650:	2300      	movs	r3, #0
 80a2652:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80a2656:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80a265a:	2201      	movs	r2, #1
 80a265c:	6863      	ldr	r3, [r4, #4]
 80a265e:	2e02      	cmp	r6, #2
 80a2660:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80a2664:	fa02 f203 	lsl.w	r2, r2, r3
 80a2668:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80a266c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80a2670:	ea43 0302 	orr.w	r3, r3, r2
 80a2674:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80a2678:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80a267c:	bf02      	ittt	eq
 80a267e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80a2682:	431a      	orreq	r2, r3
 80a2684:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80a2688:	6863      	ldr	r3, [r4, #4]
 80a268a:	f8d8 0000 	ldr.w	r0, [r8]
 80a268e:	1c5a      	adds	r2, r3, #1
 80a2690:	3302      	adds	r3, #2
 80a2692:	6062      	str	r2, [r4, #4]
 80a2694:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80a2698:	f000 f80e 	bl	80a26b8 <__retarget_lock_release_recursive>
 80a269c:	2000      	movs	r0, #0
 80a269e:	e7c4      	b.n	80a262a <__register_exitproc+0x3e>
 80a26a0:	200005d8 	.word	0x200005d8
 80a26a4:	2000054c 	.word	0x2000054c
 80a26a8:	00000000 	.word	0x00000000
 80a26ac:	080a0769 	.word	0x080a0769
 80a26b0:	20000068 	.word	0x20000068

080a26b4 <__retarget_lock_acquire_recursive>:
 80a26b4:	4770      	bx	lr

080a26b6 <__retarget_lock_release>:
 80a26b6:	4770      	bx	lr

080a26b8 <__retarget_lock_release_recursive>:
 80a26b8:	4770      	bx	lr

080a26ba <link_code_end>:
	...

080a26bc <dynalib_user>:
 80a26bc:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a26cc:	0000 0000 4353 3344 2030 7845 6d61 6c70     ....SCD30 Exampl
 80a26dc:	0065 6f63 2832 7070 296d 003a 7420 6d65     e.co2(ppm):. tem
 80a26ec:	2870 2943 003a 6820 6d75 6469 7469 2879     p(C):. humidity(
 80a26fc:	2925 003a 6f4e 6420 7461 0061 7061 0070     %):.No data.app.
 80a270c:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a271c:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a2728 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2730:	0ce9 080a 0cef 080a 0d2d 080a 0cfd 080a     ........-.......
 80a2740:	0ceb 080a                                   ....

080a2744 <_ZTV9IPAddress>:
	...
 80a274c:	1231 080a 1221 080a 1223 080a               1...!...#...

080a2758 <_ZTV9USBSerial>:
	...
 80a2760:	12ef 080a 1355 080a 132d 080a 0a4b 080a     ....U...-...K...
 80a2770:	131f 080a 12f1 080a 1301 080a 134f 080a     ............O...
 80a2780:	1311 080a 12e9 080a                         ........

080a2788 <_ZTV11USARTSerial>:
	...
 80a2790:	147d 080a 14e7 080a 14c3 080a 0a4b 080a     }...........K...
 80a27a0:	1493 080a 14af 080a 14a1 080a 14bd 080a     ................
 80a27b0:	147f 080a 1485 080a                         ........

080a27b8 <_ZTV7TwoWire>:
	...
 80a27c0:	1591 080a 15db 080a 15b3 080a 1593 080a     ................
 80a27d0:	15bb 080a 15c3 080a 15cb 080a 15d3 080a     ................

080a27e0 <_ZTVN5spark9WiFiClassE>:
	...
 80a27e8:	1723 080a 1719 080a 170f 080a 168d 080a     #...............
 80a27f8:	0b03 080a 1703 080a 1781 080a 1789 080a     ................
 80a2808:	16f7 080a 16ef 080a 16e5 080a 16db 080a     ................
 80a2818:	1697 080a                                   ....

080a281c <_ZTVN5spark12NetworkClassE>:
	...
 80a2824:	1741 080a 174b 080a 1755 080a 175f 080a     A...K...U..._...
 80a2834:	1769 080a 1775 080a 1781 080a 1789 080a     i...u...........
 80a2844:	1791 080a 179d 080a 17a5 080a 17af 080a     ................
 80a2854:	17b9 080a                                   ....

080a2858 <_ZSt7nothrow>:
	...

080a2859 <link_const_variable_data_end>:
 80a2859:	00          	.byte	0x00
	...

080a285c <link_constructors_location>:
 80a285c:	080a01fd 	.word	0x080a01fd
 80a2860:	080a07c9 	.word	0x080a07c9
 80a2864:	080a0b1d 	.word	0x080a0b1d
 80a2868:	080a0b2d 	.word	0x080a0b2d
 80a286c:	080a0b7d 	.word	0x080a0b7d
 80a2870:	080a172d 	.word	0x080a172d
 80a2874:	080a1809 	.word	0x080a1809
 80a2878:	080a181d 	.word	0x080a181d

080a287c <link_constructors_end>:
 80a287c:	00000000 	.word	0x00000000
