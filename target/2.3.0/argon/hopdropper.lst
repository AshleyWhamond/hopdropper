
c:/Users/ashkl/Desktop/Deakin_22/SIT_210/Project/hopdropper/hopdropper/target/2.3.0/argon/hopdropper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002084  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d60a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e518  000d60a4  0001e518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000268  2003e588  2003e588  0002e588  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6114  000d6114  00026114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d613c  000d613c  0002613c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001483f3  00000000  00000000  00026140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015fc0  00000000  00000000  0016e533  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002a678  00000000  00000000  001844f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002660  00000000  00000000  001aeb6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000074b8  00000000  00000000  001b11cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00038ad1  00000000  00000000  001b8683  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003684b  00000000  00000000  001f1154  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b6ca  00000000  00000000  0022799f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000681c  00000000  00000000  0033306c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fe50 	bl	d5cd2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fe58 	bl	d5cee <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e518 	.word	0x2003e518
   d4048:	000d60a4 	.word	0x000d60a4
   d404c:	2003e588 	.word	0x2003e588
   d4050:	2003e588 	.word	0x2003e588
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 ff9f 	bl	d4fa0 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6078 	.word	0x000d6078
   d407c:	000d609c 	.word	0x000d609c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b854 	b.w	d412c <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8c9 	bl	d421c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bf3f 	b.w	d4f10 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bcc7 	b.w	d4a24 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bcc5 	b.w	d4a24 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bccb 	b.w	d4a34 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr
	...

000d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40b0:	b513      	push	{r0, r1, r4, lr}
   d40b2:	4b05      	ldr	r3, [pc, #20]	; (d40c8 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40b4:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40b6:	f88d 3000 	strb.w	r3, [sp]
   d40ba:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40bc:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40be:	f001 f8ef 	bl	d52a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40c2:	4620      	mov	r0, r4
   d40c4:	b002      	add	sp, #8
   d40c6:	bd10      	pop	{r4, pc}
   d40c8:	2003e588 	.word	0x2003e588

000d40cc <_Z10getPeakCo2t>:
uint16_t currentCo2 = 0;
uint16_t peakCo2 = 0;
boolean dropHops = false;

uint16_t getPeakCo2(uint16_t co2){
  if(currentCo2 < co2){
   d40cc:	4b03      	ldr	r3, [pc, #12]	; (d40dc <_Z10getPeakCo2t+0x10>)
   d40ce:	881a      	ldrh	r2, [r3, #0]
   d40d0:	4282      	cmp	r2, r0
    currentCo2 = co2;
   d40d2:	bf38      	it	cc
   d40d4:	8018      	strhcc	r0, [r3, #0]
  }
  return currentCo2;
}
   d40d6:	8818      	ldrh	r0, [r3, #0]
   d40d8:	4770      	bx	lr
   d40da:	bf00      	nop
   d40dc:	2003e5a0 	.word	0x2003e5a0

000d40e0 <_Z10turnOffMagv>:


void turnOffMag()
{
  digitalWrite(magnetPower, LOW);
   d40e0:	4b02      	ldr	r3, [pc, #8]	; (d40ec <_Z10turnOffMagv+0xc>)
   d40e2:	2100      	movs	r1, #0
   d40e4:	8818      	ldrh	r0, [r3, #0]
   d40e6:	f001 bd90 	b.w	d5c0a <digitalWrite>
   d40ea:	bf00      	nop
   d40ec:	2003e518 	.word	0x2003e518

000d40f0 <_Z8resetMagv>:
}
void resetMag()
{
  digitalWrite(magnetPower, HIGH);
   d40f0:	4b02      	ldr	r3, [pc, #8]	; (d40fc <_Z8resetMagv+0xc>)
   d40f2:	2101      	movs	r1, #1
   d40f4:	8818      	ldrh	r0, [r3, #0]
   d40f6:	f001 bd88 	b.w	d5c0a <digitalWrite>
   d40fa:	bf00      	nop
   d40fc:	2003e518 	.word	0x2003e518

000d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4100:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4102:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4104:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4106:	b17c      	cbz	r4, d4128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4108:	6863      	ldr	r3, [r4, #4]
   d410a:	3b01      	subs	r3, #1
   d410c:	6063      	str	r3, [r4, #4]
   d410e:	b95b      	cbnz	r3, d4128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4110:	6823      	ldr	r3, [r4, #0]
   d4112:	4620      	mov	r0, r4
   d4114:	689b      	ldr	r3, [r3, #8]
   d4116:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4118:	68a3      	ldr	r3, [r4, #8]
   d411a:	3b01      	subs	r3, #1
   d411c:	60a3      	str	r3, [r4, #8]
   d411e:	b91b      	cbnz	r3, d4128 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4120:	6823      	ldr	r3, [r4, #0]
   d4122:	4620      	mov	r0, r4
   d4124:	68db      	ldr	r3, [r3, #12]
   d4126:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4128:	4628      	mov	r0, r5
   d412a:	bd38      	pop	{r3, r4, r5, pc}

000d412c <setup>:
int sendCo2Level(String command);



void setup()
{
   d412c:	b530      	push	{r4, r5, lr}
   d412e:	b08b      	sub	sp, #44	; 0x2c
  Wire.stretchClock(true);
   d4130:	f001 fd9e 	bl	d5c70 <_Z19__fetch_global_Wirev>
  Wire.begin();
  pinMode(magnetPower, OUTPUT);
   d4134:	4c2e      	ldr	r4, [pc, #184]	; (d41f0 <setup+0xc4>)
  digitalWrite(magnetPower, HIGH);

  Particle.function("sendData", sendCo2Level);

  Particle.publish("co2ppm", "{\"trigger\":" + String(dropHops) + "}");
   d4136:	4d2f      	ldr	r5, [pc, #188]	; (d41f4 <setup+0xc8>)
  Wire.stretchClock(true);
   d4138:	2101      	movs	r1, #1
   d413a:	f001 fbe5 	bl	d5908 <_ZN7TwoWire12stretchClockEb>
  Wire.begin();
   d413e:	f001 fd97 	bl	d5c70 <_Z19__fetch_global_Wirev>
   d4142:	f001 fbe5 	bl	d5910 <_ZN7TwoWire5beginEv>
  pinMode(magnetPower, OUTPUT);
   d4146:	8820      	ldrh	r0, [r4, #0]
   d4148:	2101      	movs	r1, #1
   d414a:	f001 fd4d 	bl	d5be8 <pinMode>
  digitalWrite(magnetPower, HIGH);
   d414e:	8820      	ldrh	r0, [r4, #0]
  Particle.publish("co2ppm", "{\"trigger\":" + String(dropHops) + "}");
   d4150:	4c29      	ldr	r4, [pc, #164]	; (d41f8 <setup+0xcc>)
  digitalWrite(magnetPower, HIGH);
   d4152:	2101      	movs	r1, #1
   d4154:	f001 fd59 	bl	d5c0a <digitalWrite>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4158:	4a28      	ldr	r2, [pc, #160]	; (d41fc <setup+0xd0>)
   d415a:	4929      	ldr	r1, [pc, #164]	; (d4200 <setup+0xd4>)
   d415c:	4829      	ldr	r0, [pc, #164]	; (d4204 <setup+0xd8>)
   d415e:	f000 ffac 	bl	d50ba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4162:	4929      	ldr	r1, [pc, #164]	; (d4208 <setup+0xdc>)
   d4164:	a806      	add	r0, sp, #24
   d4166:	f000 fd84 	bl	d4c72 <_ZN6StringC1EPKc>
  Particle.publish("co2ppm", "{\"trigger\":" + String(dropHops) + "}");
   d416a:	4b28      	ldr	r3, [pc, #160]	; (d420c <setup+0xe0>)
   d416c:	220a      	movs	r2, #10
   d416e:	7819      	ldrb	r1, [r3, #0]
   d4170:	a802      	add	r0, sp, #8
   d4172:	f000 fdbe 	bl	d4cf2 <_ZN6StringC1Eih>
   d4176:	a902      	add	r1, sp, #8
   d4178:	a806      	add	r0, sp, #24
   d417a:	f000 fde4 	bl	d4d46 <_ZplRK15StringSumHelperRK6String>
   d417e:	4629      	mov	r1, r5
   d4180:	f000 fded 	bl	d4d5e <_ZplRK15StringSumHelperPKc>
   d4184:	4621      	mov	r1, r4
   d4186:	6802      	ldr	r2, [r0, #0]
   d4188:	4668      	mov	r0, sp
   d418a:	f7ff ff91 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d418e:	a801      	add	r0, sp, #4
   d4190:	f7ff ffb6 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4194:	a802      	add	r0, sp, #8
   d4196:	f000 fd21 	bl	d4bdc <_ZN6StringD1Ev>
class StringSumHelper : public String
   d419a:	a806      	add	r0, sp, #24
   d419c:	f000 fd1e 	bl	d4bdc <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   d41a0:	491b      	ldr	r1, [pc, #108]	; (d4210 <setup+0xe4>)
   d41a2:	a806      	add	r0, sp, #24
   d41a4:	f000 fd65 	bl	d4c72 <_ZN6StringC1EPKc>
  Particle.publish("co2ppm", "{\"peak\":" + String(peakCo2) + "}");
   d41a8:	4b1a      	ldr	r3, [pc, #104]	; (d4214 <setup+0xe8>)
   d41aa:	220a      	movs	r2, #10
   d41ac:	8819      	ldrh	r1, [r3, #0]
   d41ae:	a802      	add	r0, sp, #8
   d41b0:	f000 fd9f 	bl	d4cf2 <_ZN6StringC1Eih>
   d41b4:	a902      	add	r1, sp, #8
   d41b6:	a806      	add	r0, sp, #24
   d41b8:	f000 fdc5 	bl	d4d46 <_ZplRK15StringSumHelperRK6String>
   d41bc:	4629      	mov	r1, r5
   d41be:	f000 fdce 	bl	d4d5e <_ZplRK15StringSumHelperPKc>
   d41c2:	4621      	mov	r1, r4
   d41c4:	6802      	ldr	r2, [r0, #0]
   d41c6:	4668      	mov	r0, sp
   d41c8:	f7ff ff72 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d41cc:	a801      	add	r0, sp, #4
   d41ce:	f7ff ff97 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d41d2:	a802      	add	r0, sp, #8
   d41d4:	f000 fd02 	bl	d4bdc <_ZN6StringD1Ev>
class StringSumHelper : public String
   d41d8:	a806      	add	r0, sp, #24
   d41da:	f000 fcff 	bl	d4bdc <_ZN6StringD1Ev>


  airSensor.begin(); // This will cause readings to occur every two seconds
   d41de:	f001 fd47 	bl	d5c70 <_Z19__fetch_global_Wirev>
   d41e2:	4601      	mov	r1, r0
   d41e4:	480c      	ldr	r0, [pc, #48]	; (d4218 <setup+0xec>)
   d41e6:	f000 fa21 	bl	d462c <_ZN5SCD305beginER7TwoWire>
}
   d41ea:	b00b      	add	sp, #44	; 0x2c
   d41ec:	bd30      	pop	{r4, r5, pc}
   d41ee:	bf00      	nop
   d41f0:	2003e518 	.word	0x2003e518
   d41f4:	000d5ead 	.word	0x000d5ead
   d41f8:	000d5eaf 	.word	0x000d5eaf
   d41fc:	000d5e98 	.word	0x000d5e98
   d4200:	000d4361 	.word	0x000d4361
   d4204:	000d508f 	.word	0x000d508f
   d4208:	000d5ea1 	.word	0x000d5ea1
   d420c:	2003e5a2 	.word	0x2003e5a2
   d4210:	000d5eb6 	.word	0x000d5eb6
   d4214:	2003e5a4 	.word	0x2003e5a4
   d4218:	2003e58c 	.word	0x2003e58c

000d421c <loop>:

void loop()
{
   d421c:	b530      	push	{r4, r5, lr}
  uint16_t co2 = airSensor.getCO2();
   d421e:	4838      	ldr	r0, [pc, #224]	; (d4300 <loop+0xe4>)

  Particle.publish("co2ppm", "{\"co2\":" + String(co2) + "}");

  peakCo2 = getPeakCo2(co2);
   d4220:	4d38      	ldr	r5, [pc, #224]	; (d4304 <loop+0xe8>)
{
   d4222:	b08b      	sub	sp, #44	; 0x2c
  uint16_t co2 = airSensor.getCO2();
   d4224:	f000 f9a2 	bl	d456c <_ZN5SCD306getCO2Ev>
	StringSumHelper(const char *p) : String(p) {}
   d4228:	4937      	ldr	r1, [pc, #220]	; (d4308 <loop+0xec>)
   d422a:	4604      	mov	r4, r0
   d422c:	a806      	add	r0, sp, #24
   d422e:	f000 fd20 	bl	d4c72 <_ZN6StringC1EPKc>
  Particle.publish("co2ppm", "{\"co2\":" + String(co2) + "}");
   d4232:	220a      	movs	r2, #10
   d4234:	4621      	mov	r1, r4
   d4236:	a802      	add	r0, sp, #8
   d4238:	f000 fd5b 	bl	d4cf2 <_ZN6StringC1Eih>
   d423c:	a902      	add	r1, sp, #8
   d423e:	a806      	add	r0, sp, #24
   d4240:	f000 fd81 	bl	d4d46 <_ZplRK15StringSumHelperRK6String>
   d4244:	4931      	ldr	r1, [pc, #196]	; (d430c <loop+0xf0>)
   d4246:	f000 fd8a 	bl	d4d5e <_ZplRK15StringSumHelperPKc>
   d424a:	4931      	ldr	r1, [pc, #196]	; (d4310 <loop+0xf4>)
   d424c:	6802      	ldr	r2, [r0, #0]
   d424e:	4668      	mov	r0, sp
   d4250:	f7ff ff2e 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4254:	a801      	add	r0, sp, #4
   d4256:	f7ff ff53 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d425a:	a802      	add	r0, sp, #8
   d425c:	f000 fcbe 	bl	d4bdc <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4260:	a806      	add	r0, sp, #24
   d4262:	f000 fcbb 	bl	d4bdc <_ZN6StringD1Ev>
  peakCo2 = getPeakCo2(co2);
   d4266:	4620      	mov	r0, r4
   d4268:	f7ff ff30 	bl	d40cc <_Z10getPeakCo2t>
	StringSumHelper(const char *p) : String(p) {}
   d426c:	4929      	ldr	r1, [pc, #164]	; (d4314 <loop+0xf8>)
   d426e:	8028      	strh	r0, [r5, #0]
   d4270:	a806      	add	r0, sp, #24
   d4272:	f000 fcfe 	bl	d4c72 <_ZN6StringC1EPKc>

  Particle.publish("co2ppm", "{\"peak\":" + String(peakCo2) + "}");
   d4276:	220a      	movs	r2, #10
   d4278:	8829      	ldrh	r1, [r5, #0]
   d427a:	a802      	add	r0, sp, #8
   d427c:	f000 fd39 	bl	d4cf2 <_ZN6StringC1Eih>
   d4280:	a902      	add	r1, sp, #8
   d4282:	a806      	add	r0, sp, #24
   d4284:	f000 fd5f 	bl	d4d46 <_ZplRK15StringSumHelperRK6String>
   d4288:	4920      	ldr	r1, [pc, #128]	; (d430c <loop+0xf0>)
   d428a:	f000 fd68 	bl	d4d5e <_ZplRK15StringSumHelperPKc>
   d428e:	4920      	ldr	r1, [pc, #128]	; (d4310 <loop+0xf4>)
   d4290:	6802      	ldr	r2, [r0, #0]
   d4292:	4668      	mov	r0, sp
   d4294:	f7ff ff0c 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4298:	a801      	add	r0, sp, #4
   d429a:	f7ff ff31 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d429e:	a802      	add	r0, sp, #8
   d42a0:	f000 fc9c 	bl	d4bdc <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42a4:	a806      	add	r0, sp, #24
   d42a6:	f000 fc99 	bl	d4bdc <_ZN6StringD1Ev>

  if (co2 <= peakCo2 / 2){
   d42aa:	882b      	ldrh	r3, [r5, #0]
   d42ac:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   d42b0:	d820      	bhi.n	d42f4 <loop+0xd8>
    dropHops = true;
   d42b2:	4c19      	ldr	r4, [pc, #100]	; (d4318 <loop+0xfc>)
	StringSumHelper(const char *p) : String(p) {}
   d42b4:	4919      	ldr	r1, [pc, #100]	; (d431c <loop+0x100>)
   d42b6:	2301      	movs	r3, #1
   d42b8:	a806      	add	r0, sp, #24
   d42ba:	7023      	strb	r3, [r4, #0]
   d42bc:	f000 fcd9 	bl	d4c72 <_ZN6StringC1EPKc>
    Particle.publish("co2ppm", "{\"trigger\":" + String(dropHops) + "}");
   d42c0:	220a      	movs	r2, #10
   d42c2:	7821      	ldrb	r1, [r4, #0]
   d42c4:	a802      	add	r0, sp, #8
   d42c6:	f000 fd14 	bl	d4cf2 <_ZN6StringC1Eih>
   d42ca:	a902      	add	r1, sp, #8
   d42cc:	a806      	add	r0, sp, #24
   d42ce:	f000 fd3a 	bl	d4d46 <_ZplRK15StringSumHelperRK6String>
   d42d2:	490e      	ldr	r1, [pc, #56]	; (d430c <loop+0xf0>)
   d42d4:	f000 fd43 	bl	d4d5e <_ZplRK15StringSumHelperPKc>
   d42d8:	490d      	ldr	r1, [pc, #52]	; (d4310 <loop+0xf4>)
   d42da:	6802      	ldr	r2, [r0, #0]
   d42dc:	4668      	mov	r0, sp
   d42de:	f7ff fee7 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d42e2:	a801      	add	r0, sp, #4
   d42e4:	f7ff ff0c 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42e8:	a802      	add	r0, sp, #8
   d42ea:	f000 fc77 	bl	d4bdc <_ZN6StringD1Ev>
class StringSumHelper : public String
   d42ee:	a806      	add	r0, sp, #24
   d42f0:	f000 fc74 	bl	d4bdc <_ZN6StringD1Ev>
  }


  delay(60000);
   d42f4:	f64e 2060 	movw	r0, #60000	; 0xea60
   d42f8:	f000 fdc4 	bl	d4e84 <delay>
}
   d42fc:	b00b      	add	sp, #44	; 0x2c
   d42fe:	bd30      	pop	{r4, r5, pc}
   d4300:	2003e58c 	.word	0x2003e58c
   d4304:	2003e5a4 	.word	0x2003e5a4
   d4308:	000d5ebf 	.word	0x000d5ebf
   d430c:	000d5ead 	.word	0x000d5ead
   d4310:	000d5eaf 	.word	0x000d5eaf
   d4314:	000d5eb6 	.word	0x000d5eb6
   d4318:	2003e5a2 	.word	0x2003e5a2
   d431c:	000d5ea1 	.word	0x000d5ea1

000d4320 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>:
    // Constructs succeeded future
    explicit Future(ResultT result = ResultT()) :
            FutureBase<ResultT, ContextT>(std::make_shared<detail::FutureImpl<ResultT, ContextT>>(std::move(result))) {
    }

    ResultT result() const {
   d4320:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d4322:	6804      	ldr	r4, [r0, #0]
        return (application_thread_current(nullptr) != 0);
   d4324:	2000      	movs	r0, #0
   d4326:	f000 fad1 	bl	d48cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d432a:	b120      	cbz	r0, d4336 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d432c:	7863      	ldrb	r3, [r4, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d432e:	b913      	cbnz	r3, d4336 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x16>
        spark_process();
   d4330:	f000 fb58 	bl	d49e4 <spark_process>
    }
   d4334:	e7fa      	b.n	d432c <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0xc>
   d4336:	7863      	ldrb	r3, [r4, #1]
   d4338:	f3bf 8f5b 	dmb	ish
   d433c:	1c65      	adds	r5, r4, #1
        if (this->acquireDone() && this->isSucceeded()) {
   d433e:	b90b      	cbnz	r3, d4344 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x24>
        return std::move(defaultValue);
   d4340:	2000      	movs	r0, #0
        return this->p_->result();
    }
   d4342:	bd38      	pop	{r3, r4, r5, pc}
        return (application_thread_current(nullptr) != 0);
   d4344:	2000      	movs	r0, #0
   d4346:	f000 fac1 	bl	d48cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d434a:	b120      	cbz	r0, d4356 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
   d434c:	782b      	ldrb	r3, [r5, #0]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d434e:	b913      	cbnz	r3, d4356 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x36>
        spark_process();
   d4350:	f000 fb48 	bl	d49e4 <spark_process>
    }
   d4354:	e7fa      	b.n	d434c <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x2c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d4356:	7823      	ldrb	r3, [r4, #0]
        if (this->acquireDone() && this->isSucceeded()) {
   d4358:	2b01      	cmp	r3, #1
   d435a:	d1f1      	bne.n	d4340 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x20>
            return result_;
   d435c:	7b20      	ldrb	r0, [r4, #12]
   d435e:	e7f0      	b.n	d4342 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv+0x22>

000d4360 <_Z12sendCo2Level6String>:

int sendCo2Level (String command) {
   d4360:	b530      	push	{r4, r5, lr}
   d4362:	4604      	mov	r4, r0
   d4364:	b08b      	sub	sp, #44	; 0x2c
  uint16_t co2 = airSensor.getCO2();
   d4366:	4825      	ldr	r0, [pc, #148]	; (d43fc <_Z12sendCo2Level6String+0x9c>)
   d4368:	f000 f900 	bl	d456c <_ZN5SCD306getCO2Ev>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d436c:	4924      	ldr	r1, [pc, #144]	; (d4400 <_Z12sendCo2Level6String+0xa0>)
   d436e:	4605      	mov	r5, r0
   d4370:	4620      	mov	r0, r4
   d4372:	f000 fd09 	bl	d4d88 <_ZNK6String6equalsEPKc>
  if(command == "send"){
   d4376:	b318      	cbz	r0, d43c0 <_Z12sendCo2Level6String+0x60>
	StringSumHelper(const char *p) : String(p) {}
   d4378:	4922      	ldr	r1, [pc, #136]	; (d4404 <_Z12sendCo2Level6String+0xa4>)
   d437a:	a806      	add	r0, sp, #24
   d437c:	f000 fc79 	bl	d4c72 <_ZN6StringC1EPKc>
    bool success = Particle.publish("co2ppm", "{\"co2\":" + String(co2) + "}");
   d4380:	220a      	movs	r2, #10
   d4382:	4629      	mov	r1, r5
   d4384:	a802      	add	r0, sp, #8
   d4386:	f000 fcb4 	bl	d4cf2 <_ZN6StringC1Eih>
   d438a:	a902      	add	r1, sp, #8
   d438c:	a806      	add	r0, sp, #24
   d438e:	f000 fcda 	bl	d4d46 <_ZplRK15StringSumHelperRK6String>
   d4392:	491d      	ldr	r1, [pc, #116]	; (d4408 <_Z12sendCo2Level6String+0xa8>)
   d4394:	f000 fce3 	bl	d4d5e <_ZplRK15StringSumHelperPKc>
   d4398:	491c      	ldr	r1, [pc, #112]	; (d440c <_Z12sendCo2Level6String+0xac>)
   d439a:	6802      	ldr	r2, [r0, #0]
   d439c:	4668      	mov	r0, sp
   d439e:	f7ff fe87 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
    ResultT result(ResultT defaultValue) const {
        return this->p_->result(std::move(defaultValue));
    }

    operator ResultT() const {
        return result();
   d43a2:	4668      	mov	r0, sp
   d43a4:	f7ff ffbc 	bl	d4320 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
      ~__shared_ptr() = default;
   d43a8:	a801      	add	r0, sp, #4
   d43aa:	f7ff fea9 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43ae:	a802      	add	r0, sp, #8
   d43b0:	f000 fc14 	bl	d4bdc <_ZN6StringD1Ev>
class StringSumHelper : public String
   d43b4:	a806      	add	r0, sp, #24
   d43b6:	f000 fc11 	bl	d4bdc <_ZN6StringD1Ev>
    turnOffMag();
    return 1;
  }
  else if(command == "resetMag") {
    resetMag();
    return 1;
   d43ba:	2001      	movs	r0, #1
  }
  else{
    bool success = Particle.publish("error", "1");
    return -1;
  }
}
   d43bc:	b00b      	add	sp, #44	; 0x2c
   d43be:	bd30      	pop	{r4, r5, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d43c0:	4913      	ldr	r1, [pc, #76]	; (d4410 <_Z12sendCo2Level6String+0xb0>)
   d43c2:	4620      	mov	r0, r4
   d43c4:	f000 fce0 	bl	d4d88 <_ZNK6String6equalsEPKc>
  else if(command == "dropMag") {
   d43c8:	b110      	cbz	r0, d43d0 <_Z12sendCo2Level6String+0x70>
    turnOffMag();
   d43ca:	f7ff fe89 	bl	d40e0 <_Z10turnOffMagv>
    return 1;
   d43ce:	e7f4      	b.n	d43ba <_Z12sendCo2Level6String+0x5a>
   d43d0:	4910      	ldr	r1, [pc, #64]	; (d4414 <_Z12sendCo2Level6String+0xb4>)
   d43d2:	4620      	mov	r0, r4
   d43d4:	f000 fcd8 	bl	d4d88 <_ZNK6String6equalsEPKc>
  else if(command == "resetMag") {
   d43d8:	b110      	cbz	r0, d43e0 <_Z12sendCo2Level6String+0x80>
    resetMag();
   d43da:	f7ff fe89 	bl	d40f0 <_Z8resetMagv>
   d43de:	e7ec      	b.n	d43ba <_Z12sendCo2Level6String+0x5a>
    bool success = Particle.publish("error", "1");
   d43e0:	4a0d      	ldr	r2, [pc, #52]	; (d4418 <_Z12sendCo2Level6String+0xb8>)
   d43e2:	490e      	ldr	r1, [pc, #56]	; (d441c <_Z12sendCo2Level6String+0xbc>)
   d43e4:	a806      	add	r0, sp, #24
   d43e6:	f7ff fe63 	bl	d40b0 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d43ea:	a806      	add	r0, sp, #24
   d43ec:	f7ff ff98 	bl	d4320 <_ZNK8particle6FutureIbNS_6detail13FutureContextEE6resultEv>
   d43f0:	a807      	add	r0, sp, #28
   d43f2:	f7ff fe85 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return -1;
   d43f6:	f04f 30ff 	mov.w	r0, #4294967295
   d43fa:	e7df      	b.n	d43bc <_Z12sendCo2Level6String+0x5c>
   d43fc:	2003e58c 	.word	0x2003e58c
   d4400:	000d5ec7 	.word	0x000d5ec7
   d4404:	000d5ebf 	.word	0x000d5ebf
   d4408:	000d5ead 	.word	0x000d5ead
   d440c:	000d5eaf 	.word	0x000d5eaf
   d4410:	000d5ecc 	.word	0x000d5ecc
   d4414:	000d5ed4 	.word	0x000d5ed4
   d4418:	000d5edd 	.word	0x000d5edd
   d441c:	000d5edf 	.word	0x000d5edf

000d4420 <_GLOBAL__sub_I_airSensor>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4420:	4b02      	ldr	r3, [pc, #8]	; (d442c <_GLOBAL__sub_I_airSensor+0xc>)
SCD30 airSensor;
   d4422:	4803      	ldr	r0, [pc, #12]	; (d4430 <_GLOBAL__sub_I_airSensor+0x10>)
   d4424:	2200      	movs	r2, #0
   d4426:	701a      	strb	r2, [r3, #0]
   d4428:	f000 b808 	b.w	d443c <_ZN5SCD30C1Ev>
   d442c:	2003e588 	.word	0x2003e588
   d4430:	2003e58c 	.word	0x2003e58c

000d4434 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4434:	6803      	ldr	r3, [r0, #0]
   d4436:	b2c9      	uxtb	r1, r1
   d4438:	689b      	ldr	r3, [r3, #8]
   d443a:	4718      	bx	r3

000d443c <_ZN5SCD30C1Ev>:
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "SparkFun_SCD30_Arduino_Library.h"

SCD30::SCD30(void)
   d443c:	2200      	movs	r2, #0
   d443e:	6042      	str	r2, [r0, #4]
   d4440:	6082      	str	r2, [r0, #8]
   d4442:	60c2      	str	r2, [r0, #12]
   d4444:	f240 1201 	movw	r2, #257	; 0x101
   d4448:	8202      	strh	r2, [r0, #16]
   d444a:	2201      	movs	r2, #1
   d444c:	7482      	strb	r2, [r0, #18]
{
  // Constructor
}
   d444e:	4770      	bx	lr

000d4450 <_ZN5SCD3012readRegisterEt>:
  return (true); //Success! New data available in globals.
}

//Gets two bytes from SCD30
uint16_t SCD30::readRegister(uint16_t registerAddress)
{
   d4450:	b538      	push	{r3, r4, r5, lr}
   d4452:	4604      	mov	r4, r0
   d4454:	460d      	mov	r5, r1
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   d4456:	6800      	ldr	r0, [r0, #0]
   d4458:	2161      	movs	r1, #97	; 0x61
   d445a:	f001 fa8f 	bl	d597c <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(registerAddress >> 8); //MSB
   d445e:	0a29      	lsrs	r1, r5, #8
   d4460:	6820      	ldr	r0, [r4, #0]
   d4462:	f7ff ffe7 	bl	d4434 <_ZN7TwoWire5writeEi>
  _i2cPort->write(registerAddress & 0xFF); //LSB
   d4466:	6820      	ldr	r0, [r4, #0]
   d4468:	b2e9      	uxtb	r1, r5
   d446a:	f7ff ffe3 	bl	d4434 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d446e:	6820      	ldr	r0, [r4, #0]
   d4470:	f001 fa8b 	bl	d598a <_ZN7TwoWire15endTransmissionEv>
   d4474:	b108      	cbz	r0, d447a <_ZN5SCD3012readRegisterEt+0x2a>
    return (0); //Sensor did not ACK
   d4476:	2000      	movs	r0, #0
    uint8_t msb = _i2cPort->read();
    uint8_t lsb = _i2cPort->read();
    return ((uint16_t)msb << 8 | lsb);
  }
  return (0); //Sensor did not respond
}
   d4478:	bd38      	pop	{r3, r4, r5, pc}
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)2);
   d447a:	6820      	ldr	r0, [r4, #0]
   d447c:	2202      	movs	r2, #2
   d447e:	2161      	movs	r1, #97	; 0x61
   d4480:	f001 fa75 	bl	d596e <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d4484:	6820      	ldr	r0, [r4, #0]
   d4486:	6803      	ldr	r3, [r0, #0]
   d4488:	691b      	ldr	r3, [r3, #16]
   d448a:	4798      	blx	r3
   d448c:	2800      	cmp	r0, #0
   d448e:	d0f2      	beq.n	d4476 <_ZN5SCD3012readRegisterEt+0x26>
    uint8_t msb = _i2cPort->read();
   d4490:	6820      	ldr	r0, [r4, #0]
   d4492:	6803      	ldr	r3, [r0, #0]
   d4494:	695b      	ldr	r3, [r3, #20]
   d4496:	4798      	blx	r3
   d4498:	4605      	mov	r5, r0
    uint8_t lsb = _i2cPort->read();
   d449a:	6820      	ldr	r0, [r4, #0]
   d449c:	6803      	ldr	r3, [r0, #0]
   d449e:	695b      	ldr	r3, [r3, #20]
   d44a0:	4798      	blx	r3
    return ((uint16_t)msb << 8 | lsb);
   d44a2:	b2c3      	uxtb	r3, r0
   d44a4:	ea43 2005 	orr.w	r0, r3, r5, lsl #8
   d44a8:	b280      	uxth	r0, r0
   d44aa:	e7e5      	b.n	d4478 <_ZN5SCD3012readRegisterEt+0x28>

000d44ac <_ZN5SCD3013dataAvailableEv>:
{
   d44ac:	b508      	push	{r3, lr}
  uint16_t response = readRegister(COMMAND_GET_DATA_READY);
   d44ae:	f240 2102 	movw	r1, #514	; 0x202
   d44b2:	f7ff ffcd 	bl	d4450 <_ZN5SCD3012readRegisterEt>
}
   d44b6:	1e43      	subs	r3, r0, #1
   d44b8:	4258      	negs	r0, r3
   d44ba:	4158      	adcs	r0, r3
   d44bc:	bd08      	pop	{r3, pc}

000d44be <_ZN5SCD3015readMeasurementEv>:
{
   d44be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d44c2:	4604      	mov	r4, r0
  if (dataAvailable() == false)
   d44c4:	f7ff fff2 	bl	d44ac <_ZN5SCD3013dataAvailableEv>
   d44c8:	4607      	mov	r7, r0
   d44ca:	b918      	cbnz	r0, d44d4 <_ZN5SCD3015readMeasurementEv+0x16>
    return (false);
   d44cc:	2700      	movs	r7, #0
}
   d44ce:	4638      	mov	r0, r7
   d44d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   d44d4:	6820      	ldr	r0, [r4, #0]
   d44d6:	2161      	movs	r1, #97	; 0x61
   d44d8:	f001 fa50 	bl	d597c <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT >> 8); //MSB
   d44dc:	2103      	movs	r1, #3
   d44de:	6820      	ldr	r0, [r4, #0]
   d44e0:	f7ff ffa8 	bl	d4434 <_ZN7TwoWire5writeEi>
  _i2cPort->write(COMMAND_READ_MEASUREMENT & 0xFF); //LSB
   d44e4:	2100      	movs	r1, #0
   d44e6:	6820      	ldr	r0, [r4, #0]
   d44e8:	f7ff ffa4 	bl	d4434 <_ZN7TwoWire5writeEi>
  if (_i2cPort->endTransmission() != 0)
   d44ec:	6820      	ldr	r0, [r4, #0]
   d44ee:	f001 fa4c 	bl	d598a <_ZN7TwoWire15endTransmissionEv>
   d44f2:	4605      	mov	r5, r0
   d44f4:	2800      	cmp	r0, #0
   d44f6:	d1e9      	bne.n	d44cc <_ZN5SCD3015readMeasurementEv+0xe>
  _i2cPort->requestFrom((uint8_t)SCD30_ADDRESS, (uint8_t)18);
   d44f8:	2212      	movs	r2, #18
   d44fa:	2161      	movs	r1, #97	; 0x61
   d44fc:	6820      	ldr	r0, [r4, #0]
   d44fe:	f001 fa36 	bl	d596e <_ZN7TwoWire11requestFromEhj>
  if (_i2cPort->available())
   d4502:	6820      	ldr	r0, [r4, #0]
   d4504:	6803      	ldr	r3, [r0, #0]
   d4506:	691b      	ldr	r3, [r3, #16]
   d4508:	4798      	blx	r3
   d450a:	4606      	mov	r6, r0
   d450c:	b358      	cbz	r0, d4566 <_ZN5SCD3015readMeasurementEv+0xa8>
  uint32_t tempHumidity = 0;
   d450e:	46a8      	mov	r8, r5
  uint32_t tempTemperature = 0;
   d4510:	462e      	mov	r6, r5
  uint32_t tempCO2 = 0;
   d4512:	46a9      	mov	r9, r5
      byte incoming = _i2cPort->read();
   d4514:	6820      	ldr	r0, [r4, #0]
   d4516:	6803      	ldr	r3, [r0, #0]
   d4518:	695b      	ldr	r3, [r3, #20]
   d451a:	4798      	blx	r3
      switch (x)
   d451c:	b2eb      	uxtb	r3, r5
   d451e:	2b10      	cmp	r3, #16
   d4520:	d80d      	bhi.n	d453e <_ZN5SCD3015readMeasurementEv+0x80>
   d4522:	e8df f003 	tbb	[pc, r3]
   d4526:	0909      	.short	0x0909
   d4528:	0c09090c 	.word	0x0c09090c
   d452c:	180c1818 	.word	0x180c1818
   d4530:	1c1c0c18 	.word	0x1c1c0c18
   d4534:	1c0c      	.short	0x1c0c
   d4536:	1c          	.byte	0x1c
   d4537:	00          	.byte	0x00
          tempCO2 |= incoming;
   d4538:	b2c3      	uxtb	r3, r0
   d453a:	ea43 2909 	orr.w	r9, r3, r9, lsl #8
    for (byte x = 0 ; x < 18 ; x++)
   d453e:	3501      	adds	r5, #1
   d4540:	2d12      	cmp	r5, #18
   d4542:	d1e7      	bne.n	d4514 <_ZN5SCD3015readMeasurementEv+0x56>
  co2HasBeenReported = false;
   d4544:	2300      	movs	r3, #0
  memcpy(&co2, &tempCO2, sizeof(co2));
   d4546:	f8c4 9004 	str.w	r9, [r4, #4]
  memcpy(&temperature, &tempTemperature, sizeof(temperature));
   d454a:	60a6      	str	r6, [r4, #8]
  memcpy(&humidity, &tempHumidity, sizeof(humidity));
   d454c:	f8c4 800c 	str.w	r8, [r4, #12]
  co2HasBeenReported = false;
   d4550:	8223      	strh	r3, [r4, #16]
  temperatureHasBeenReported = false;
   d4552:	74a3      	strb	r3, [r4, #18]
  return (true); //Success! New data available in globals.
   d4554:	e7bb      	b.n	d44ce <_ZN5SCD3015readMeasurementEv+0x10>
          tempTemperature |= incoming;
   d4556:	b2c3      	uxtb	r3, r0
   d4558:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
          break;
   d455c:	e7ef      	b.n	d453e <_ZN5SCD3015readMeasurementEv+0x80>
          tempHumidity |= incoming;
   d455e:	b2c3      	uxtb	r3, r0
   d4560:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
          break;
   d4564:	e7eb      	b.n	d453e <_ZN5SCD3015readMeasurementEv+0x80>
  uint32_t tempHumidity = 0;
   d4566:	4680      	mov	r8, r0
  uint32_t tempCO2 = 0;
   d4568:	4681      	mov	r9, r0
   d456a:	e7eb      	b.n	d4544 <_ZN5SCD3015readMeasurementEv+0x86>

000d456c <_ZN5SCD306getCO2Ev>:
{
   d456c:	b510      	push	{r4, lr}
  if (co2HasBeenReported == true) //Trigger a new read
   d456e:	7c03      	ldrb	r3, [r0, #16]
{
   d4570:	4604      	mov	r4, r0
  if (co2HasBeenReported == true) //Trigger a new read
   d4572:	b10b      	cbz	r3, d4578 <_ZN5SCD306getCO2Ev+0xc>
    readMeasurement(); //Pull in new co2, humidity, and temp into global vars
   d4574:	f7ff ffa3 	bl	d44be <_ZN5SCD3015readMeasurementEv>
  return (uint16_t)co2; //Cut off decimal as co2 is 0 to 10,000
   d4578:	edd4 7a01 	vldr	s15, [r4, #4]
   d457c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  co2HasBeenReported = true;
   d4580:	2301      	movs	r3, #1
   d4582:	7423      	strb	r3, [r4, #16]
}
   d4584:	ee17 3a90 	vmov	r3, s15
   d4588:	b298      	uxth	r0, r3
   d458a:	bd10      	pop	{r4, pc}

000d458c <_ZN5SCD3011computeCRC8EPhh>:
//x^8+x^5+x^4+1 = 0x31
uint8_t SCD30::computeCRC8(uint8_t data[], uint8_t len)
{
  uint8_t crc = 0xFF; //Init with 0xFF

  for (uint8_t x = 0 ; x < len ; x++)
   d458c:	440a      	add	r2, r1
  uint8_t crc = 0xFF; //Init with 0xFF
   d458e:	20ff      	movs	r0, #255	; 0xff
  for (uint8_t x = 0 ; x < len ; x++)
   d4590:	428a      	cmp	r2, r1
   d4592:	d011      	beq.n	d45b8 <_ZN5SCD3011computeCRC8EPhh+0x2c>
  {
    crc ^= data[x]; // XOR-in the next input byte
   d4594:	f811 3b01 	ldrb.w	r3, [r1], #1
   d4598:	4058      	eors	r0, r3
   d459a:	2308      	movs	r3, #8

    for (uint8_t i = 0 ; i < 8 ; i++)
    {
      if ((crc & 0x80) != 0)
   d459c:	f010 0f80 	tst.w	r0, #128	; 0x80
   d45a0:	f103 33ff 	add.w	r3, r3, #4294967295
   d45a4:	ea4f 0040 	mov.w	r0, r0, lsl #1
        crc = (uint8_t)((crc << 1) ^ 0x31);
   d45a8:	bf18      	it	ne
   d45aa:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
    for (uint8_t i = 0 ; i < 8 ; i++)
   d45ae:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
      else
        crc <<= 1;
   d45b2:	b2c0      	uxtb	r0, r0
    for (uint8_t i = 0 ; i < 8 ; i++)
   d45b4:	d1f2      	bne.n	d459c <_ZN5SCD3011computeCRC8EPhh+0x10>
   d45b6:	e7eb      	b.n	d4590 <_ZN5SCD3011computeCRC8EPhh+0x4>
    }
  }

  return crc; //No output reflection
}
   d45b8:	4770      	bx	lr

000d45ba <_ZN5SCD3011sendCommandEtt>:
{
   d45ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  data[0] = arguments >> 8;
   d45bc:	ba53      	rev16	r3, r2
{
   d45be:	460e      	mov	r6, r1
   d45c0:	4615      	mov	r5, r2
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d45c2:	a901      	add	r1, sp, #4
   d45c4:	2202      	movs	r2, #2
{
   d45c6:	4604      	mov	r4, r0
  data[0] = arguments >> 8;
   d45c8:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d45cc:	f7ff ffde 	bl	d458c <_ZN5SCD3011computeCRC8EPhh>
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   d45d0:	2161      	movs	r1, #97	; 0x61
  uint8_t crc = computeCRC8(data, 2); //Calc CRC on the arguments only, not the command
   d45d2:	4607      	mov	r7, r0
  _i2cPort->beginTransmission(SCD30_ADDRESS);
   d45d4:	6820      	ldr	r0, [r4, #0]
   d45d6:	f001 f9d1 	bl	d597c <_ZN7TwoWire17beginTransmissionEi>
  _i2cPort->write(command >> 8); //MSB
   d45da:	0a31      	lsrs	r1, r6, #8
   d45dc:	6820      	ldr	r0, [r4, #0]
   d45de:	f7ff ff29 	bl	d4434 <_ZN7TwoWire5writeEi>
  _i2cPort->write(command & 0xFF); //LSB
   d45e2:	b2f1      	uxtb	r1, r6
   d45e4:	6820      	ldr	r0, [r4, #0]
   d45e6:	f7ff ff25 	bl	d4434 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments >> 8); //MSB
   d45ea:	0a29      	lsrs	r1, r5, #8
   d45ec:	6820      	ldr	r0, [r4, #0]
   d45ee:	f7ff ff21 	bl	d4434 <_ZN7TwoWire5writeEi>
  _i2cPort->write(arguments & 0xFF); //LSB
   d45f2:	b2e9      	uxtb	r1, r5
   d45f4:	6820      	ldr	r0, [r4, #0]
   d45f6:	f7ff ff1d 	bl	d4434 <_ZN7TwoWire5writeEi>
  _i2cPort->write(crc);
   d45fa:	6820      	ldr	r0, [r4, #0]
   d45fc:	6803      	ldr	r3, [r0, #0]
   d45fe:	4639      	mov	r1, r7
   d4600:	689b      	ldr	r3, [r3, #8]
   d4602:	4798      	blx	r3
  if (_i2cPort->endTransmission() != 0)
   d4604:	6820      	ldr	r0, [r4, #0]
   d4606:	f001 f9c0 	bl	d598a <_ZN7TwoWire15endTransmissionEv>
}
   d460a:	fab0 f080 	clz	r0, r0
   d460e:	0940      	lsrs	r0, r0, #5
   d4610:	b003      	add	sp, #12
   d4612:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4614 <_ZN5SCD3014beginMeasuringEt>:
{
   d4614:	460a      	mov	r2, r1
  return(sendCommand(COMMAND_CONTINUOUS_MEASUREMENT, pressureOffset));
   d4616:	2110      	movs	r1, #16
   d4618:	f7ff bfcf 	b.w	d45ba <_ZN5SCD3011sendCommandEtt>

000d461c <_ZN5SCD3014beginMeasuringEv>:
  return(beginMeasuring(0));
   d461c:	2100      	movs	r1, #0
   d461e:	f7ff bff9 	b.w	d4614 <_ZN5SCD3014beginMeasuringEt>

000d4622 <_ZN5SCD3022setMeasurementIntervalEt>:
{
   d4622:	460a      	mov	r2, r1
  sendCommand(COMMAND_SET_MEASUREMENT_INTERVAL, interval);
   d4624:	f44f 418c 	mov.w	r1, #17920	; 0x4600
   d4628:	f7ff bfc7 	b.w	d45ba <_ZN5SCD3011sendCommandEtt>

000d462c <_ZN5SCD305beginER7TwoWire>:
{
   d462c:	b538      	push	{r3, r4, r5, lr}
   d462e:	4604      	mov	r4, r0
   d4630:	4608      	mov	r0, r1
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   d4632:	6021      	str	r1, [r4, #0]
  _i2cPort->begin();
   d4634:	f001 f96c 	bl	d5910 <_ZN7TwoWire5beginEv>
  if(beginMeasuring() == true) //Start continuous measurements
   d4638:	4620      	mov	r0, r4
   d463a:	f7ff ffef 	bl	d461c <_ZN5SCD3014beginMeasuringEv>
   d463e:	4605      	mov	r5, r0
   d4640:	b148      	cbz	r0, d4656 <_ZN5SCD305beginER7TwoWire+0x2a>
	setMeasurementInterval(2); //2 seconds between measurements
   d4642:	2102      	movs	r1, #2
   d4644:	4620      	mov	r0, r4
   d4646:	f7ff ffec 	bl	d4622 <_ZN5SCD3022setMeasurementIntervalEt>
    sendCommand(COMMAND_AUTOMATIC_SELF_CALIBRATION, 1); //Activate continuous ASC
   d464a:	2201      	movs	r2, #1
   d464c:	f245 3106 	movw	r1, #21254	; 0x5306
   d4650:	4620      	mov	r0, r4
   d4652:	f7ff ffb2 	bl	d45ba <_ZN5SCD3011sendCommandEtt>
}
   d4656:	4628      	mov	r0, r5
   d4658:	bd38      	pop	{r3, r4, r5, pc}
	...

000d465c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d465c:	b508      	push	{r3, lr}
   d465e:	4b02      	ldr	r3, [pc, #8]	; (d4668 <netdb_freeaddrinfo+0xc>)
   d4660:	681b      	ldr	r3, [r3, #0]
   d4662:	689b      	ldr	r3, [r3, #8]
   d4664:	9301      	str	r3, [sp, #4]
   d4666:	bd08      	pop	{r3, pc}
   d4668:	00030268 	.word	0x00030268

000d466c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d466c:	b508      	push	{r3, lr}
   d466e:	4b02      	ldr	r3, [pc, #8]	; (d4678 <netdb_getaddrinfo+0xc>)
   d4670:	681b      	ldr	r3, [r3, #0]
   d4672:	68db      	ldr	r3, [r3, #12]
   d4674:	9301      	str	r3, [sp, #4]
   d4676:	bd08      	pop	{r3, pc}
   d4678:	00030268 	.word	0x00030268

000d467c <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d467c:	b508      	push	{r3, lr}
   d467e:	4b02      	ldr	r3, [pc, #8]	; (d4688 <HAL_Pin_Mode+0xc>)
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	689b      	ldr	r3, [r3, #8]
   d4684:	9301      	str	r3, [sp, #4]
   d4686:	bd08      	pop	{r3, pc}
   d4688:	0003022c 	.word	0x0003022c

000d468c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <HAL_Get_Pin_Mode+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	68db      	ldr	r3, [r3, #12]
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	0003022c 	.word	0x0003022c

000d469c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <HAL_GPIO_Write+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	691b      	ldr	r3, [r3, #16]
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	0003022c 	.word	0x0003022c

000d46ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_RNG_GetRandomNumber+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	685b      	ldr	r3, [r3, #4]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030218 	.word	0x00030218

000d46bc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	695b      	ldr	r3, [r3, #20]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030218 	.word	0x00030218

000d46cc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <os_mutex_recursive_create+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	00030248 	.word	0x00030248

000d46dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <inet_inet_ntop+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	695b      	ldr	r3, [r3, #20]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	00030264 	.word	0x00030264

000d46ec <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <hal_usart_init+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	681b      	ldr	r3, [r3, #0]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	0003023c 	.word	0x0003023c

000d46fc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <hal_usart_write+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	68db      	ldr	r3, [r3, #12]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	0003023c 	.word	0x0003023c

000d470c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <hal_usart_available+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	691b      	ldr	r3, [r3, #16]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	0003023c 	.word	0x0003023c

000d471c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <hal_usart_read+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	695b      	ldr	r3, [r3, #20]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	0003023c 	.word	0x0003023c

000d472c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <hal_usart_peek+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	699b      	ldr	r3, [r3, #24]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	0003023c 	.word	0x0003023c

000d473c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <hal_usart_flush+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	69db      	ldr	r3, [r3, #28]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	0003023c 	.word	0x0003023c

000d474c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <hal_usart_is_enabled+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6a1b      	ldr	r3, [r3, #32]
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	0003023c 	.word	0x0003023c

000d475c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <hal_usart_available_data_for_write+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	0003023c 	.word	0x0003023c

000d476c <hal_i2c_stretch_clock>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <hal_i2c_stretch_clock+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	689b      	ldr	r3, [r3, #8]
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030228 	.word	0x00030228

000d477c <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <hal_i2c_begin+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	68db      	ldr	r3, [r3, #12]
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030228 	.word	0x00030228

000d478c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <hal_i2c_begin_transmission+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	699b      	ldr	r3, [r3, #24]
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030228 	.word	0x00030228

000d479c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <hal_i2c_end_transmission+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	69db      	ldr	r3, [r3, #28]
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030228 	.word	0x00030228

000d47ac <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <hal_i2c_write+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	6a1b      	ldr	r3, [r3, #32]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030228 	.word	0x00030228

000d47bc <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <hal_i2c_available+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030228 	.word	0x00030228

000d47cc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <hal_i2c_read+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030228 	.word	0x00030228

000d47dc <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <hal_i2c_peek+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030228 	.word	0x00030228

000d47ec <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <hal_i2c_flush+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030228 	.word	0x00030228

000d47fc <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <hal_i2c_is_enabled+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030228 	.word	0x00030228

000d480c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <hal_i2c_init+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030228 	.word	0x00030228

000d481c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <hal_i2c_request_ex+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030228 	.word	0x00030228

000d482c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <hal_spi_init+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	69db      	ldr	r3, [r3, #28]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030230 	.word	0x00030230

000d483c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <hal_spi_is_enabled+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6a1b      	ldr	r3, [r3, #32]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030230 	.word	0x00030230

000d484c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <HAL_USB_USART_Init+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	681b      	ldr	r3, [r3, #0]
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	0003024c 	.word	0x0003024c

000d485c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <HAL_USB_USART_Available_Data+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	691b      	ldr	r3, [r3, #16]
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	0003024c 	.word	0x0003024c

000d486c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	695b      	ldr	r3, [r3, #20]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003024c 	.word	0x0003024c

000d487c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <HAL_USB_USART_Receive_Data+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	699b      	ldr	r3, [r3, #24]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003024c 	.word	0x0003024c

000d488c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <HAL_USB_USART_Send_Data+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	69db      	ldr	r3, [r3, #28]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003024c 	.word	0x0003024c

000d489c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <HAL_USB_USART_Flush_Data+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	6a1b      	ldr	r3, [r3, #32]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003024c 	.word	0x0003024c

000d48ac <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <set_system_mode+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	685b      	ldr	r3, [r3, #4]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	00030220 	.word	0x00030220

000d48bc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <system_delay_ms+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	695b      	ldr	r3, [r3, #20]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	00030220 	.word	0x00030220

000d48cc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <application_thread_current+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	00030220 	.word	0x00030220

000d48dc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <application_thread_invoke+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	00030220 	.word	0x00030220

000d48ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b03      	ldr	r3, [pc, #12]	; (d48fc <system_ctrl_set_app_request_handler+0x10>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d48f6:	9301      	str	r3, [sp, #4]
   d48f8:	bd08      	pop	{r3, pc}
   d48fa:	0000      	.short	0x0000
   d48fc:	00030220 	.word	0x00030220

000d4900 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b03      	ldr	r3, [pc, #12]	; (d4910 <system_ctrl_set_result+0x10>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d490a:	9301      	str	r3, [sp, #4]
   d490c:	bd08      	pop	{r3, pc}
   d490e:	0000      	.short	0x0000
   d4910:	00030220 	.word	0x00030220

000d4914 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <network_connect+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	685b      	ldr	r3, [r3, #4]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030240 	.word	0x00030240

000d4924 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <network_connecting+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	689b      	ldr	r3, [r3, #8]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030240 	.word	0x00030240

000d4934 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <network_disconnect+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	68db      	ldr	r3, [r3, #12]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030240 	.word	0x00030240

000d4944 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <network_ready+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	691b      	ldr	r3, [r3, #16]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030240 	.word	0x00030240

000d4954 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <network_on+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	695b      	ldr	r3, [r3, #20]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030240 	.word	0x00030240

000d4964 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <network_off+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	699b      	ldr	r3, [r3, #24]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030240 	.word	0x00030240

000d4974 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <network_listen+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	69db      	ldr	r3, [r3, #28]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030240 	.word	0x00030240

000d4984 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <network_listening+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6a1b      	ldr	r3, [r3, #32]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030240 	.word	0x00030240

000d4994 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <network_set_listen_timeout+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030240 	.word	0x00030240

000d49a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <network_get_listen_timeout+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030240 	.word	0x00030240

000d49b4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <network_is_on+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030240 	.word	0x00030240

000d49c4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <network_is_off+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030240 	.word	0x00030240

000d49d4 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <spark_function+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	685b      	ldr	r3, [r3, #4]
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030244 	.word	0x00030244

000d49e4 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <spark_process+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	689b      	ldr	r3, [r3, #8]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030244 	.word	0x00030244

000d49f4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <spark_cloud_flag_connected+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	695b      	ldr	r3, [r3, #20]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030244 	.word	0x00030244

000d4a04 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <spark_send_event+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	6a1b      	ldr	r3, [r3, #32]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030244 	.word	0x00030244

000d4a14 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030244 	.word	0x00030244

000d4a24 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <malloc+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	681b      	ldr	r3, [r3, #0]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	0003021c 	.word	0x0003021c

000d4a34 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <free+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	685b      	ldr	r3, [r3, #4]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	0003021c 	.word	0x0003021c

000d4a44 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <realloc+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	689b      	ldr	r3, [r3, #8]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	0003021c 	.word	0x0003021c

000d4a54 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <abort+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	0003021c 	.word	0x0003021c

000d4a64 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <_malloc_r+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	0003021c 	.word	0x0003021c

000d4a74 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <newlib_impure_ptr_callback+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003021c 	.word	0x0003021c

000d4a84 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4a84:	2200      	movs	r2, #0
   d4a86:	6840      	ldr	r0, [r0, #4]
   d4a88:	4611      	mov	r1, r2
   d4a8a:	f7ff bf7b 	b.w	d4984 <network_listening>

000d4a8e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4a8e:	2200      	movs	r2, #0
   d4a90:	6840      	ldr	r0, [r0, #4]
   d4a92:	4611      	mov	r1, r2
   d4a94:	f7ff bf86 	b.w	d49a4 <network_get_listen_timeout>

000d4a98 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4a98:	6840      	ldr	r0, [r0, #4]
   d4a9a:	2200      	movs	r2, #0
   d4a9c:	f7ff bf7a 	b.w	d4994 <network_set_listen_timeout>

000d4aa0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4aa0:	6840      	ldr	r0, [r0, #4]
   d4aa2:	2200      	movs	r2, #0
   d4aa4:	f081 0101 	eor.w	r1, r1, #1
   d4aa8:	f7ff bf64 	b.w	d4974 <network_listen>

000d4aac <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4aac:	2300      	movs	r3, #0
   d4aae:	6840      	ldr	r0, [r0, #4]
   d4ab0:	461a      	mov	r2, r3
   d4ab2:	4619      	mov	r1, r3
   d4ab4:	f7ff bf56 	b.w	d4964 <network_off>

000d4ab8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4ab8:	2300      	movs	r3, #0
   d4aba:	6840      	ldr	r0, [r0, #4]
   d4abc:	461a      	mov	r2, r3
   d4abe:	4619      	mov	r1, r3
   d4ac0:	f7ff bf48 	b.w	d4954 <network_on>

000d4ac4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4ac4:	2200      	movs	r2, #0
   d4ac6:	6840      	ldr	r0, [r0, #4]
   d4ac8:	4611      	mov	r1, r2
   d4aca:	f7ff bf3b 	b.w	d4944 <network_ready>

000d4ace <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4ace:	2200      	movs	r2, #0
   d4ad0:	6840      	ldr	r0, [r0, #4]
   d4ad2:	4611      	mov	r1, r2
   d4ad4:	f7ff bf26 	b.w	d4924 <network_connecting>

000d4ad8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ad8:	6840      	ldr	r0, [r0, #4]
   d4ada:	2200      	movs	r2, #0
   d4adc:	2102      	movs	r1, #2
   d4ade:	f7ff bf29 	b.w	d4934 <network_disconnect>

000d4ae2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4ae2:	2300      	movs	r3, #0
   d4ae4:	6840      	ldr	r0, [r0, #4]
   d4ae6:	461a      	mov	r2, r3
   d4ae8:	f7ff bf14 	b.w	d4914 <network_connect>

000d4aec <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4aec:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4aee:	2203      	movs	r2, #3
   d4af0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4af2:	4a02      	ldr	r2, [pc, #8]	; (d4afc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4af4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4af6:	4770      	bx	lr
   d4af8:	2003e5a8 	.word	0x2003e5a8
   d4afc:	000d5ef0 	.word	0x000d5ef0

000d4b00 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4b00:	b510      	push	{r4, lr}
   d4b02:	4604      	mov	r4, r0
   d4b04:	4608      	mov	r0, r1
{
    _spi = spi;
   d4b06:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4b08:	f7ff fe90 	bl	d482c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4b0c:	2300      	movs	r3, #0
   d4b0e:	6063      	str	r3, [r4, #4]
}
   d4b10:	4620      	mov	r0, r4
   d4b12:	bd10      	pop	{r4, pc}

000d4b14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4b14:	4b05      	ldr	r3, [pc, #20]	; (d4b2c <_GLOBAL__sub_I_System+0x18>)
   d4b16:	2202      	movs	r2, #2
   d4b18:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b1a:	4b05      	ldr	r3, [pc, #20]	; (d4b30 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4b1c:	4a05      	ldr	r2, [pc, #20]	; (d4b34 <_GLOBAL__sub_I_System+0x20>)
   d4b1e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d4b20:	2000      	movs	r0, #0
   d4b22:	6018      	str	r0, [r3, #0]
   d4b24:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4b26:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b28:	f7ff bec0 	b.w	d48ac <set_system_mode>
   d4b2c:	2003e5bc 	.word	0x2003e5bc
   d4b30:	2003e5b0 	.word	0x2003e5b0
   d4b34:	ffff0000 	.word	0xffff0000

000d4b38 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d4b38:	b510      	push	{r4, lr}
   d4b3a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d4b3c:	f001 f933 	bl	d5da6 <strlen>
   d4b40:	3801      	subs	r0, #1
   d4b42:	1823      	adds	r3, r4, r0
   d4b44:	4620      	mov	r0, r4
	while(i<j){
   d4b46:	4283      	cmp	r3, r0
   d4b48:	d906      	bls.n	d4b58 <_Z11str_reversePc+0x20>
		c = *i;
   d4b4a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d4b4c:	7819      	ldrb	r1, [r3, #0]
   d4b4e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d4b52:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d4b56:	e7f6      	b.n	d4b46 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d4b58:	bd10      	pop	{r4, pc}

000d4b5a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4b5a:	b570      	push	{r4, r5, r6, lr}
   d4b5c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d4b5e:	1e91      	subs	r1, r2, #2
   d4b60:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d4b62:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d4b64:	d822      	bhi.n	d4bac <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d4b66:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d4b68:	b16d      	cbz	r5, d4b86 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d4b6a:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d4b6e:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d4b72:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d4b74:	2d09      	cmp	r5, #9
                *ptr += '0';
   d4b76:	bf94      	ite	ls
   d4b78:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d4b7a:	3157      	addhi	r1, #87	; 0x57
   d4b7c:	b2c9      	uxtb	r1, r1
   d4b7e:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d4b82:	4635      	mov	r5, r6
	while(a){
   d4b84:	e7f0      	b.n	d4b68 <ultoa+0xe>
   d4b86:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d4b88:	4423      	add	r3, r4
            *ptr++ = '0';
   d4b8a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d4b8c:	4293      	cmp	r3, r2
   d4b8e:	d902      	bls.n	d4b96 <ultoa+0x3c>
            *ptr++ = '0';
   d4b90:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d4b94:	e7fa      	b.n	d4b8c <ultoa+0x32>
   d4b96:	1a1a      	subs	r2, r3, r0
   d4b98:	4283      	cmp	r3, r0
   d4b9a:	bf38      	it	cc
   d4b9c:	2200      	movcc	r2, #0

	*ptr = '\0';
   d4b9e:	2300      	movs	r3, #0
   d4ba0:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d4ba2:	4620      	mov	r0, r4
   d4ba4:	f7ff ffc8 	bl	d4b38 <_Z11str_reversePc>
	return buffer;
   d4ba8:	4620      	mov	r0, r4
}
   d4baa:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d4bac:	2000      	movs	r0, #0
   d4bae:	e7fc      	b.n	d4baa <ultoa+0x50>

000d4bb0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4bb0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d4bb2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d4bb4:	460c      	mov	r4, r1
   d4bb6:	4615      	mov	r5, r2
	if(a<0){
   d4bb8:	da0e      	bge.n	d4bd8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d4bbe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d4bc2:	bf14      	ite	ne
   d4bc4:	4258      	negne	r0, r3
   d4bc6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d4bc8:	2301      	movs	r3, #1
		*buffer = '-';
   d4bca:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d4bcc:	462a      	mov	r2, r5
   d4bce:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d4bd0:	f7ff ffc3 	bl	d4b5a <ultoa>
	}
	return buffer;
}
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d4bd8:	2301      	movs	r3, #1
   d4bda:	e7f9      	b.n	d4bd0 <itoa+0x20>

000d4bdc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4bdc:	b510      	push	{r4, lr}
   d4bde:	4604      	mov	r4, r0
{
	free(buffer);
   d4be0:	6800      	ldr	r0, [r0, #0]
   d4be2:	f7ff ff27 	bl	d4a34 <free>
}
   d4be6:	4620      	mov	r0, r4
   d4be8:	bd10      	pop	{r4, pc}

000d4bea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4bea:	b510      	push	{r4, lr}
   d4bec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4bee:	6800      	ldr	r0, [r0, #0]
   d4bf0:	b108      	cbz	r0, d4bf6 <_ZN6String10invalidateEv+0xc>
   d4bf2:	f7ff ff1f 	bl	d4a34 <free>
	buffer = NULL;
   d4bf6:	2300      	movs	r3, #0
	capacity = len = 0;
   d4bf8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4bfc:	6023      	str	r3, [r4, #0]
}
   d4bfe:	bd10      	pop	{r4, pc}

000d4c00 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4c00:	b538      	push	{r3, r4, r5, lr}
   d4c02:	4604      	mov	r4, r0
   d4c04:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4c06:	6800      	ldr	r0, [r0, #0]
   d4c08:	3101      	adds	r1, #1
   d4c0a:	f7ff ff1b 	bl	d4a44 <realloc>
	if (newbuffer) {
   d4c0e:	b110      	cbz	r0, d4c16 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4c10:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4c14:	2001      	movs	r0, #1
	}
	return 0;
}
   d4c16:	bd38      	pop	{r3, r4, r5, pc}

000d4c18 <_ZN6String7reserveEj>:
{
   d4c18:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4c1a:	6803      	ldr	r3, [r0, #0]
{
   d4c1c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4c1e:	b123      	cbz	r3, d4c2a <_ZN6String7reserveEj+0x12>
   d4c20:	6843      	ldr	r3, [r0, #4]
   d4c22:	428b      	cmp	r3, r1
   d4c24:	d301      	bcc.n	d4c2a <_ZN6String7reserveEj+0x12>
   d4c26:	2001      	movs	r0, #1
}
   d4c28:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	f7ff ffe8 	bl	d4c00 <_ZN6String12changeBufferEj>
   d4c30:	2800      	cmp	r0, #0
   d4c32:	d0f9      	beq.n	d4c28 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4c34:	68a3      	ldr	r3, [r4, #8]
   d4c36:	2b00      	cmp	r3, #0
   d4c38:	d1f5      	bne.n	d4c26 <_ZN6String7reserveEj+0xe>
   d4c3a:	6822      	ldr	r2, [r4, #0]
   d4c3c:	7013      	strb	r3, [r2, #0]
   d4c3e:	e7f2      	b.n	d4c26 <_ZN6String7reserveEj+0xe>

000d4c40 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4c42:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4c44:	4611      	mov	r1, r2
   d4c46:	9201      	str	r2, [sp, #4]
{
   d4c48:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4c4a:	f7ff ffe5 	bl	d4c18 <_ZN6String7reserveEj>
   d4c4e:	9a01      	ldr	r2, [sp, #4]
   d4c50:	b928      	cbnz	r0, d4c5e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4c52:	4620      	mov	r0, r4
   d4c54:	f7ff ffc9 	bl	d4bea <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4c58:	4620      	mov	r0, r4
   d4c5a:	b003      	add	sp, #12
   d4c5c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4c5e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c60:	4629      	mov	r1, r5
   d4c62:	6820      	ldr	r0, [r4, #0]
   d4c64:	f001 f835 	bl	d5cd2 <memcpy>
	buffer[len] = 0;
   d4c68:	6822      	ldr	r2, [r4, #0]
   d4c6a:	68a3      	ldr	r3, [r4, #8]
   d4c6c:	2100      	movs	r1, #0
   d4c6e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4c70:	e7f2      	b.n	d4c58 <_ZN6String4copyEPKcj+0x18>

000d4c72 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4c72:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4c74:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4c76:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4c7a:	4604      	mov	r4, r0
	len = 0;
   d4c7c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c7e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4c80:	b141      	cbz	r1, d4c94 <_ZN6StringC1EPKc+0x22>
   d4c82:	4608      	mov	r0, r1
   d4c84:	9101      	str	r1, [sp, #4]
   d4c86:	f001 f88e 	bl	d5da6 <strlen>
   d4c8a:	9901      	ldr	r1, [sp, #4]
   d4c8c:	4602      	mov	r2, r0
   d4c8e:	4620      	mov	r0, r4
   d4c90:	f7ff ffd6 	bl	d4c40 <_ZN6String4copyEPKcj>
}
   d4c94:	4620      	mov	r0, r4
   d4c96:	b002      	add	sp, #8
   d4c98:	bd10      	pop	{r4, pc}

000d4c9a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4c9a:	4288      	cmp	r0, r1
{
   d4c9c:	b510      	push	{r4, lr}
   d4c9e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4ca0:	d005      	beq.n	d4cae <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4ca2:	680b      	ldr	r3, [r1, #0]
   d4ca4:	b12b      	cbz	r3, d4cb2 <_ZN6StringaSERKS_+0x18>
   d4ca6:	688a      	ldr	r2, [r1, #8]
   d4ca8:	4619      	mov	r1, r3
   d4caa:	f7ff ffc9 	bl	d4c40 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4cae:	4620      	mov	r0, r4
   d4cb0:	bd10      	pop	{r4, pc}
	else invalidate();
   d4cb2:	f7ff ff9a 	bl	d4bea <_ZN6String10invalidateEv>
   d4cb6:	e7fa      	b.n	d4cae <_ZN6StringaSERKS_+0x14>

000d4cb8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d4cb8:	b510      	push	{r4, lr}
	buffer = NULL;
   d4cba:	2300      	movs	r3, #0
String::String(const String &value)
   d4cbc:	4604      	mov	r4, r0
	capacity = 0;
   d4cbe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d4cc2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4cc4:	7303      	strb	r3, [r0, #12]
	*this = value;
   d4cc6:	f7ff ffe8 	bl	d4c9a <_ZN6StringaSERKS_>
}
   d4cca:	4620      	mov	r0, r4
   d4ccc:	bd10      	pop	{r4, pc}

000d4cce <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4cce:	b513      	push	{r0, r1, r4, lr}
   d4cd0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4cd2:	b159      	cbz	r1, d4cec <_ZN6StringaSEPKc+0x1e>
   d4cd4:	4608      	mov	r0, r1
   d4cd6:	9101      	str	r1, [sp, #4]
   d4cd8:	f001 f865 	bl	d5da6 <strlen>
   d4cdc:	9901      	ldr	r1, [sp, #4]
   d4cde:	4602      	mov	r2, r0
   d4ce0:	4620      	mov	r0, r4
   d4ce2:	f7ff ffad 	bl	d4c40 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4ce6:	4620      	mov	r0, r4
   d4ce8:	b002      	add	sp, #8
   d4cea:	bd10      	pop	{r4, pc}
	else invalidate();
   d4cec:	f7ff ff7d 	bl	d4bea <_ZN6String10invalidateEv>
   d4cf0:	e7f9      	b.n	d4ce6 <_ZN6StringaSEPKc+0x18>

000d4cf2 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d4cf2:	b510      	push	{r4, lr}
   d4cf4:	4604      	mov	r4, r0
   d4cf6:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d4cf8:	2300      	movs	r3, #0
	capacity = 0;
   d4cfa:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d4cfe:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d4d00:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d4d02:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d4d04:	a901      	add	r1, sp, #4
   d4d06:	f7ff ff53 	bl	d4bb0 <itoa>
	*this = buf;
   d4d0a:	a901      	add	r1, sp, #4
   d4d0c:	4620      	mov	r0, r4
   d4d0e:	f7ff ffde 	bl	d4cce <_ZN6StringaSEPKc>
}
   d4d12:	4620      	mov	r0, r4
   d4d14:	b00a      	add	sp, #40	; 0x28
   d4d16:	bd10      	pop	{r4, pc}

000d4d18 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4d18:	b570      	push	{r4, r5, r6, lr}
   d4d1a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4d1c:	460e      	mov	r6, r1
   d4d1e:	b909      	cbnz	r1, d4d24 <_ZN6String6concatEPKcj+0xc>
   d4d20:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4d22:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4d24:	b16a      	cbz	r2, d4d42 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4d26:	6884      	ldr	r4, [r0, #8]
   d4d28:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4d2a:	4621      	mov	r1, r4
   d4d2c:	f7ff ff74 	bl	d4c18 <_ZN6String7reserveEj>
   d4d30:	2800      	cmp	r0, #0
   d4d32:	d0f5      	beq.n	d4d20 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4d34:	6828      	ldr	r0, [r5, #0]
   d4d36:	68ab      	ldr	r3, [r5, #8]
   d4d38:	4631      	mov	r1, r6
   d4d3a:	4418      	add	r0, r3
   d4d3c:	f001 f80e 	bl	d5d5c <strcpy>
	len = newlen;
   d4d40:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d4d42:	2001      	movs	r0, #1
   d4d44:	e7ed      	b.n	d4d22 <_ZN6String6concatEPKcj+0xa>

000d4d46 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4d46:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4d48:	688a      	ldr	r2, [r1, #8]
   d4d4a:	6809      	ldr	r1, [r1, #0]
{
   d4d4c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4d4e:	f7ff ffe3 	bl	d4d18 <_ZN6String6concatEPKcj>
   d4d52:	b910      	cbnz	r0, d4d5a <_ZplRK15StringSumHelperRK6String+0x14>
   d4d54:	4620      	mov	r0, r4
   d4d56:	f7ff ff48 	bl	d4bea <_ZN6String10invalidateEv>
	return a;
}
   d4d5a:	4620      	mov	r0, r4
   d4d5c:	bd10      	pop	{r4, pc}

000d4d5e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d4d5e:	b513      	push	{r0, r1, r4, lr}
   d4d60:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4d62:	b929      	cbnz	r1, d4d70 <_ZplRK15StringSumHelperPKc+0x12>
   d4d64:	4620      	mov	r0, r4
   d4d66:	f7ff ff40 	bl	d4bea <_ZN6String10invalidateEv>
	return a;
}
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	b002      	add	sp, #8
   d4d6e:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d4d70:	4608      	mov	r0, r1
   d4d72:	9101      	str	r1, [sp, #4]
   d4d74:	f001 f817 	bl	d5da6 <strlen>
   d4d78:	9901      	ldr	r1, [sp, #4]
   d4d7a:	4602      	mov	r2, r0
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f7ff ffcb 	bl	d4d18 <_ZN6String6concatEPKcj>
   d4d82:	2800      	cmp	r0, #0
   d4d84:	d0ee      	beq.n	d4d64 <_ZplRK15StringSumHelperPKc+0x6>
   d4d86:	e7f0      	b.n	d4d6a <_ZplRK15StringSumHelperPKc+0xc>

000d4d88 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4d88:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4d8a:	6882      	ldr	r2, [r0, #8]
   d4d8c:	b93a      	cbnz	r2, d4d9e <_ZNK6String6equalsEPKc+0x16>
   d4d8e:	b121      	cbz	r1, d4d9a <_ZNK6String6equalsEPKc+0x12>
   d4d90:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d4d92:	fab0 f080 	clz	r0, r0
   d4d96:	0940      	lsrs	r0, r0, #5
   d4d98:	e000      	b.n	d4d9c <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4d9a:	2001      	movs	r0, #1
}
   d4d9c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4d9e:	6800      	ldr	r0, [r0, #0]
   d4da0:	b909      	cbnz	r1, d4da6 <_ZNK6String6equalsEPKc+0x1e>
   d4da2:	7800      	ldrb	r0, [r0, #0]
   d4da4:	e7f5      	b.n	d4d92 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d4da6:	f000 ffcf 	bl	d5d48 <strcmp>
   d4daa:	e7f2      	b.n	d4d92 <_ZNK6String6equalsEPKc+0xa>

000d4dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d4dac:	680b      	ldr	r3, [r1, #0]
   d4dae:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d4db0:	b113      	cbz	r3, d4db8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d4db2:	685a      	ldr	r2, [r3, #4]
   d4db4:	3201      	adds	r2, #1
   d4db6:	605a      	str	r2, [r3, #4]
      }
   d4db8:	4770      	bx	lr
	...

000d4dbc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4dbc:	4802      	ldr	r0, [pc, #8]	; (d4dc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d4dbe:	2300      	movs	r3, #0
   d4dc0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4dc2:	f7ff bc83 	b.w	d46cc <os_mutex_recursive_create>
   d4dc6:	bf00      	nop
   d4dc8:	2003e5c0 	.word	0x2003e5c0

000d4dcc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4dce:	4606      	mov	r6, r0
   d4dd0:	460d      	mov	r5, r1
  size_t n = 0;
   d4dd2:	188f      	adds	r7, r1, r2
   d4dd4:	2400      	movs	r4, #0
  while (size--) {
   d4dd6:	42bd      	cmp	r5, r7
   d4dd8:	d00c      	beq.n	d4df4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4dda:	6833      	ldr	r3, [r6, #0]
   d4ddc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4de0:	689b      	ldr	r3, [r3, #8]
   d4de2:	4630      	mov	r0, r6
   d4de4:	4798      	blx	r3
     if (chunk>=0)
   d4de6:	1e03      	subs	r3, r0, #0
   d4de8:	db01      	blt.n	d4dee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4dea:	441c      	add	r4, r3
  while (size--) {
   d4dec:	e7f3      	b.n	d4dd6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4dee:	2c00      	cmp	r4, #0
   d4df0:	bf08      	it	eq
   d4df2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4df4:	4620      	mov	r0, r4
   d4df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4df8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4df8:	b513      	push	{r0, r1, r4, lr}
   d4dfa:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4dfc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4dfe:	b159      	cbz	r1, d4e18 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4e00:	9101      	str	r1, [sp, #4]
   d4e02:	f000 ffd0 	bl	d5da6 <strlen>
   d4e06:	6823      	ldr	r3, [r4, #0]
   d4e08:	9901      	ldr	r1, [sp, #4]
   d4e0a:	68db      	ldr	r3, [r3, #12]
   d4e0c:	4602      	mov	r2, r0
   d4e0e:	4620      	mov	r0, r4
    }
   d4e10:	b002      	add	sp, #8
   d4e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4e16:	4718      	bx	r3
    }
   d4e18:	b002      	add	sp, #8
   d4e1a:	bd10      	pop	{r4, pc}

000d4e1c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4e1c:	6803      	ldr	r3, [r0, #0]
   d4e1e:	689b      	ldr	r3, [r3, #8]
   d4e20:	4718      	bx	r3

000d4e22 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4e22:	b530      	push	{r4, r5, lr}
   d4e24:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4e26:	2300      	movs	r3, #0
   d4e28:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4e2c:	2a01      	cmp	r2, #1
   d4e2e:	bf98      	it	ls
   d4e30:	220a      	movls	r2, #10
   d4e32:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4e34:	460d      	mov	r5, r1
   d4e36:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4e3a:	fb01 5312 	mls	r3, r1, r2, r5
   d4e3e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e42:	2b09      	cmp	r3, #9
   d4e44:	bf94      	ite	ls
   d4e46:	3330      	addls	r3, #48	; 0x30
   d4e48:	3337      	addhi	r3, #55	; 0x37
   d4e4a:	b2db      	uxtb	r3, r3
  } while(n);
   d4e4c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4e4e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4e52:	d9ef      	bls.n	d4e34 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4e54:	4621      	mov	r1, r4
   d4e56:	f7ff ffcf 	bl	d4df8 <_ZN5Print5writeEPKc>
}
   d4e5a:	b00b      	add	sp, #44	; 0x2c
   d4e5c:	bd30      	pop	{r4, r5, pc}
	...

000d4e60 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e60:	4b01      	ldr	r3, [pc, #4]	; (d4e68 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e62:	4a02      	ldr	r2, [pc, #8]	; (d4e6c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e64:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4e66:	4770      	bx	lr
   d4e68:	2003e5c4 	.word	0x2003e5c4
   d4e6c:	000d5f24 	.word	0x000d5f24

000d4e70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e70:	4b02      	ldr	r3, [pc, #8]	; (d4e7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e72:	681a      	ldr	r2, [r3, #0]
   d4e74:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e76:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4e78:	4770      	bx	lr
   d4e7a:	bf00      	nop
   d4e7c:	2003e51c 	.word	0x2003e51c
   d4e80:	2003e5c8 	.word	0x2003e5c8

000d4e84 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e84:	2100      	movs	r1, #0
   d4e86:	f7ff bd19 	b.w	d48bc <system_delay_ms>

000d4e8a <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4e8a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4e8c:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4e8e:	4604      	mov	r4, r0
      if (_M_manager)
   d4e90:	b113      	cbz	r3, d4e98 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e92:	2203      	movs	r2, #3
   d4e94:	4601      	mov	r1, r0
   d4e96:	4798      	blx	r3
    }
   d4e98:	4620      	mov	r0, r4
   d4e9a:	bd10      	pop	{r4, pc}

000d4e9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
   d4e9c:	b513      	push	{r0, r1, r4, lr}
   d4e9e:	460b      	mov	r3, r1
   d4ea0:	4602      	mov	r2, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4ea2:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4ea6:	466c      	mov	r4, sp
   d4ea8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4eac:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4eb0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4eb4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d4eb8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4ebc:	b002      	add	sp, #8
   d4ebe:	bd10      	pop	{r4, pc}

000d4ec0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4ec0:	4b01      	ldr	r3, [pc, #4]	; (d4ec8 <_GLOBAL__sub_I_RGB+0x8>)
   d4ec2:	2200      	movs	r2, #0
   d4ec4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d4ec6:	4770      	bx	lr
   d4ec8:	2003e5cc 	.word	0x2003e5cc

000d4ecc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4ecc:	4b01      	ldr	r3, [pc, #4]	; (d4ed4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4ece:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4ed0:	4770      	bx	lr
   d4ed2:	bf00      	nop
   d4ed4:	2003e520 	.word	0x2003e520

000d4ed8 <serialEventRun>:
{
   d4ed8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4eda:	4b0b      	ldr	r3, [pc, #44]	; (d4f08 <serialEventRun+0x30>)
   d4edc:	b143      	cbz	r3, d4ef0 <serialEventRun+0x18>
   d4ede:	f000 fc21 	bl	d5724 <_Z16_fetch_usbserialv>
   d4ee2:	6803      	ldr	r3, [r0, #0]
   d4ee4:	691b      	ldr	r3, [r3, #16]
   d4ee6:	4798      	blx	r3
   d4ee8:	2800      	cmp	r0, #0
   d4eea:	dd01      	ble.n	d4ef0 <serialEventRun+0x18>
        serialEvent();
   d4eec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4ef0:	4b06      	ldr	r3, [pc, #24]	; (d4f0c <serialEventRun+0x34>)
   d4ef2:	b143      	cbz	r3, d4f06 <serialEventRun+0x2e>
   d4ef4:	f000 fc90 	bl	d5818 <_Z22__fetch_global_Serial1v>
   d4ef8:	6803      	ldr	r3, [r0, #0]
   d4efa:	691b      	ldr	r3, [r3, #16]
   d4efc:	4798      	blx	r3
   d4efe:	2800      	cmp	r0, #0
   d4f00:	dd01      	ble.n	d4f06 <serialEventRun+0x2e>
        serialEvent1();
   d4f02:	f3af 8000 	nop.w
}
   d4f06:	bd08      	pop	{r3, pc}
	...

000d4f10 <_post_loop>:
{
   d4f10:	b508      	push	{r3, lr}
	serialEventRun();
   d4f12:	f7ff ffe1 	bl	d4ed8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4f16:	f7ff fbd1 	bl	d46bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4f1a:	4b01      	ldr	r3, [pc, #4]	; (d4f20 <_post_loop+0x10>)
   d4f1c:	6018      	str	r0, [r3, #0]
}
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	2003e738 	.word	0x2003e738

000d4f24 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4f24:	4805      	ldr	r0, [pc, #20]	; (d4f3c <_Z33system_initialize_user_backup_ramv+0x18>)
   d4f26:	4a06      	ldr	r2, [pc, #24]	; (d4f40 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d4f28:	4906      	ldr	r1, [pc, #24]	; (d4f44 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d4f2a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4f2c:	1a12      	subs	r2, r2, r0
   d4f2e:	f000 fed0 	bl	d5cd2 <memcpy>
    __backup_sram_signature = signature;
   d4f32:	4b05      	ldr	r3, [pc, #20]	; (d4f48 <_Z33system_initialize_user_backup_ramv+0x24>)
   d4f34:	4a05      	ldr	r2, [pc, #20]	; (d4f4c <_Z33system_initialize_user_backup_ramv+0x28>)
   d4f36:	601a      	str	r2, [r3, #0]
}
   d4f38:	bd08      	pop	{r3, pc}
   d4f3a:	bf00      	nop
   d4f3c:	2003f400 	.word	0x2003f400
   d4f40:	2003f404 	.word	0x2003f404
   d4f44:	000d60a0 	.word	0x000d60a0
   d4f48:	2003f400 	.word	0x2003f400
   d4f4c:	9a271c1e 	.word	0x9a271c1e

000d4f50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4f50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f52:	2300      	movs	r3, #0
   d4f54:	9300      	str	r3, [sp, #0]
   d4f56:	461a      	mov	r2, r3
   d4f58:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f5c:	f7ff fcd0 	bl	d4900 <system_ctrl_set_result>
}
   d4f60:	b003      	add	sp, #12
   d4f62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f68 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d4f68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d4f6a:	8843      	ldrh	r3, [r0, #2]
   d4f6c:	2b0a      	cmp	r3, #10
   d4f6e:	d008      	beq.n	d4f82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4f70:	2b50      	cmp	r3, #80	; 0x50
   d4f72:	d10b      	bne.n	d4f8c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4f74:	4b09      	ldr	r3, [pc, #36]	; (d4f9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d4f76:	681b      	ldr	r3, [r3, #0]
   d4f78:	b14b      	cbz	r3, d4f8e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d4f7a:	b003      	add	sp, #12
   d4f7c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4f80:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4f82:	f7ff ffe5 	bl	d4f50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d4f86:	b003      	add	sp, #12
   d4f88:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4f8c:	2300      	movs	r3, #0
   d4f8e:	9300      	str	r3, [sp, #0]
   d4f90:	461a      	mov	r2, r3
   d4f92:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4f96:	f7ff fcb3 	bl	d4900 <system_ctrl_set_result>
}
   d4f9a:	e7f4      	b.n	d4f86 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4f9c:	2003e5e0 	.word	0x2003e5e0

000d4fa0 <module_user_init_hook>:
{
   d4fa0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4fa2:	4812      	ldr	r0, [pc, #72]	; (d4fec <module_user_init_hook+0x4c>)
   d4fa4:	2100      	movs	r1, #0
   d4fa6:	f7ff fd65 	bl	d4a74 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d4faa:	4b11      	ldr	r3, [pc, #68]	; (d4ff0 <module_user_init_hook+0x50>)
   d4fac:	681a      	ldr	r2, [r3, #0]
   d4fae:	4b11      	ldr	r3, [pc, #68]	; (d4ff4 <module_user_init_hook+0x54>)
   d4fb0:	429a      	cmp	r2, r3
   d4fb2:	4b11      	ldr	r3, [pc, #68]	; (d4ff8 <module_user_init_hook+0x58>)
   d4fb4:	bf0c      	ite	eq
   d4fb6:	2201      	moveq	r2, #1
   d4fb8:	2200      	movne	r2, #0
   d4fba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4fbc:	d001      	beq.n	d4fc2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d4fbe:	f7ff ffb1 	bl	d4f24 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4fc2:	f7ff fb73 	bl	d46ac <HAL_RNG_GetRandomNumber>
   d4fc6:	4604      	mov	r4, r0
    srand(seed);
   d4fc8:	f000 fe9a 	bl	d5d00 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4fcc:	4b0b      	ldr	r3, [pc, #44]	; (d4ffc <module_user_init_hook+0x5c>)
   d4fce:	b113      	cbz	r3, d4fd6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d4fd6:	2100      	movs	r1, #0
   d4fd8:	4808      	ldr	r0, [pc, #32]	; (d4ffc <module_user_init_hook+0x5c>)
   d4fda:	f7ff fd1b 	bl	d4a14 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4fe2:	4807      	ldr	r0, [pc, #28]	; (d5000 <module_user_init_hook+0x60>)
   d4fe4:	2100      	movs	r1, #0
   d4fe6:	f7ff bc81 	b.w	d48ec <system_ctrl_set_app_request_handler>
   d4fea:	bf00      	nop
   d4fec:	000d4ecd 	.word	0x000d4ecd
   d4ff0:	2003f400 	.word	0x2003f400
   d4ff4:	9a271c1e 	.word	0x9a271c1e
   d4ff8:	2003e5dc 	.word	0x2003e5dc
   d4ffc:	00000000 	.word	0x00000000
   d5000:	000d4f69 	.word	0x000d4f69

000d5004 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5004:	4770      	bx	lr

000d5006 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5006:	2000      	movs	r0, #0
   d5008:	4770      	bx	lr

000d500a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d500a:	b510      	push	{r4, lr}
   d500c:	2110      	movs	r1, #16
   d500e:	4604      	mov	r4, r0
   d5010:	f000 fe52 	bl	d5cb8 <_ZdlPvj>
   d5014:	4620      	mov	r0, r4
   d5016:	bd10      	pop	{r4, pc}

000d5018 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5018:	b508      	push	{r3, lr}
      { delete this; }
   d501a:	f7ff fff6 	bl	d500a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d501e:	bd08      	pop	{r3, pc}

000d5020 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5020:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5022:	2200      	movs	r2, #0
   d5024:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5028:	6002      	str	r2, [r0, #0]
   d502a:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d502c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d502e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5030:	680c      	ldr	r4, [r1, #0]
   d5032:	8085      	strh	r5, [r0, #4]
   d5034:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5036:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5038:	bd30      	pop	{r4, r5, pc}

000d503a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d503a:	b510      	push	{r4, lr}
   d503c:	4604      	mov	r4, r0
    free((void*)msg_);
   d503e:	6800      	ldr	r0, [r0, #0]
   d5040:	f7ff fcf8 	bl	d4a34 <free>
}
   d5044:	4620      	mov	r0, r4
   d5046:	bd10      	pop	{r4, pc}

000d5048 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5048:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d504a:	68c4      	ldr	r4, [r0, #12]
   d504c:	b1f4      	cbz	r4, d508c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d504e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5050:	2b02      	cmp	r3, #2
   d5052:	d103      	bne.n	d505c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5054:	f104 000c 	add.w	r0, r4, #12
   d5058:	f7ff ffef 	bl	d503a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d505c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d505e:	b135      	cbz	r5, d506e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5060:	4628      	mov	r0, r5
   d5062:	f7ff ff12 	bl	d4e8a <_ZNSt14_Function_baseD1Ev>
   d5066:	2110      	movs	r1, #16
   d5068:	4628      	mov	r0, r5
   d506a:	f000 fe25 	bl	d5cb8 <_ZdlPvj>
   d506e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5070:	b135      	cbz	r5, d5080 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5072:	4628      	mov	r0, r5
   d5074:	f7ff ff09 	bl	d4e8a <_ZNSt14_Function_baseD1Ev>
   d5078:	2110      	movs	r1, #16
   d507a:	4628      	mov	r0, r5
   d507c:	f000 fe1c 	bl	d5cb8 <_ZdlPvj>
   d5080:	4620      	mov	r0, r4
   d5082:	2114      	movs	r1, #20
   d5084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5088:	f000 be16 	b.w	d5cb8 <_ZdlPvj>
   d508c:	bd38      	pop	{r3, r4, r5, pc}

000d508e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
    }
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful, clearSession);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d508e:	b510      	push	{r4, lr}
   d5090:	b088      	sub	sp, #32
   d5092:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5094:	4668      	mov	r0, sp
   d5096:	f7ff fdec 	bl	d4c72 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d509a:	4669      	mov	r1, sp
   d509c:	a804      	add	r0, sp, #16
   d509e:	f7ff fe0b 	bl	d4cb8 <_ZN6StringC1ERKS_>
   d50a2:	a804      	add	r0, sp, #16
   d50a4:	47a0      	blx	r4
   d50a6:	4604      	mov	r4, r0
   d50a8:	a804      	add	r0, sp, #16
   d50aa:	f7ff fd97 	bl	d4bdc <_ZN6StringD1Ev>
    String p(param);
   d50ae:	4668      	mov	r0, sp
   d50b0:	f7ff fd94 	bl	d4bdc <_ZN6StringD1Ev>
}
   d50b4:	4620      	mov	r0, r4
   d50b6:	b008      	add	sp, #32
   d50b8:	bd10      	pop	{r4, pc}

000d50ba <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d50ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d50bc:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d50be:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d50c2:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d50c4:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d50c6:	461a      	mov	r2, r3
   d50c8:	4669      	mov	r1, sp
   d50ca:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d50cc:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d50d0:	f8ad 4000 	strh.w	r4, [sp]
   d50d4:	f7ff fc7e 	bl	d49d4 <spark_function>
}
   d50d8:	b004      	add	sp, #16
   d50da:	bd10      	pop	{r4, pc}

000d50dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d50dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d50de:	460e      	mov	r6, r1
   d50e0:	4604      	mov	r4, r0
   d50e2:	f856 3b04 	ldr.w	r3, [r6], #4
   d50e6:	9300      	str	r3, [sp, #0]
   d50e8:	460d      	mov	r5, r1
   d50ea:	a801      	add	r0, sp, #4
   d50ec:	4631      	mov	r1, r6
   d50ee:	f7ff fe5d 	bl	d4dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d50f2:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d50f4:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d50f6:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d50f8:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d50fa:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d50fc:	2300      	movs	r3, #0
   d50fe:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5100:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5102:	f7fe fffd 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5106:	4630      	mov	r0, r6
   d5108:	f7fe fffa 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d510c:	4628      	mov	r0, r5
   d510e:	2108      	movs	r1, #8
   d5110:	f000 fdd2 	bl	d5cb8 <_ZdlPvj>
        return p;
    }
   d5114:	4620      	mov	r0, r4
   d5116:	b002      	add	sp, #8
   d5118:	bd70      	pop	{r4, r5, r6, pc}

000d511a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d511a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d511c:	b510      	push	{r4, lr}
      if (_M_empty())
   d511e:	b90a      	cbnz	r2, d5124 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5120:	f000 fdce 	bl	d5cc0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   d5124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5128:	68c3      	ldr	r3, [r0, #12]
   d512a:	4718      	bx	r3

000d512c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d512c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d512e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5130:	f100 0110 	add.w	r1, r0, #16
   d5134:	f7ff fff1 	bl	d511a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5138:	bd08      	pop	{r3, pc}

000d513a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d513a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d513c:	b510      	push	{r4, lr}
      if (_M_empty())
   d513e:	b90a      	cbnz	r2, d5144 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5140:	f000 fdbe 	bl	d5cc0 <_ZSt25__throw_bad_function_callv>
    }
   d5144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5148:	68c3      	ldr	r3, [r0, #12]
   d514a:	4718      	bx	r3

000d514c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d514c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d514e:	6800      	ldr	r0, [r0, #0]
   d5150:	f100 0110 	add.w	r1, r0, #16
   d5154:	f7ff fff1 	bl	d513a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5158:	bd08      	pop	{r3, pc}
	...

000d515c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d515c:	b538      	push	{r3, r4, r5, lr}
   d515e:	2300      	movs	r3, #0
   d5160:	4604      	mov	r4, r0
   d5162:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5164:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5166:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5168:	f7fe ff93 	bl	d4092 <_Znwj>
   d516c:	b128      	cbz	r0, d517a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d516e:	2301      	movs	r3, #1
   d5170:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5174:	4b02      	ldr	r3, [pc, #8]	; (d5180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5176:	6003      	str	r3, [r0, #0]
   d5178:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d517a:	6020      	str	r0, [r4, #0]
	}
   d517c:	4620      	mov	r0, r4
   d517e:	bd38      	pop	{r3, r4, r5, pc}
   d5180:	000d5f4c 	.word	0x000d5f4c

000d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5184:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5186:	2300      	movs	r3, #0
   d5188:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d518a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d518c:	4604      	mov	r4, r0
   d518e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5190:	b12b      	cbz	r3, d519e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5192:	2202      	movs	r2, #2
   d5194:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5196:	68eb      	ldr	r3, [r5, #12]
   d5198:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d519a:	68ab      	ldr	r3, [r5, #8]
   d519c:	60a3      	str	r3, [r4, #8]
    }
   d519e:	4620      	mov	r0, r4
   d51a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d51a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d51a6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d51a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d51aa:	4668      	mov	r0, sp
   d51ac:	f7ff ff38 	bl	d5020 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d51b0:	f04f 0302 	mov.w	r3, #2
   d51b4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d51b8:	2a00      	cmp	r2, #0
   d51ba:	d103      	bne.n	d51c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d51bc:	e8c4 3f41 	strexb	r1, r3, [r4]
   d51c0:	2900      	cmp	r1, #0
   d51c2:	d1f7      	bne.n	d51b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d51c4:	d125      	bne.n	d5212 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d51c6:	f104 050c 	add.w	r5, r4, #12
   d51ca:	4669      	mov	r1, sp
   d51cc:	4628      	mov	r0, r5
   d51ce:	f7ff ff27 	bl	d5020 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d51d2:	f3bf 8f5b 	dmb	ish
   d51d6:	2301      	movs	r3, #1
   d51d8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d51da:	2000      	movs	r0, #0
   d51dc:	f104 0308 	add.w	r3, r4, #8
   d51e0:	f3bf 8f5b 	dmb	ish
   d51e4:	e853 6f00 	ldrex	r6, [r3]
   d51e8:	e843 0200 	strex	r2, r0, [r3]
   d51ec:	2a00      	cmp	r2, #0
   d51ee:	d1f9      	bne.n	d51e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d51f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d51f4:	b16e      	cbz	r6, d5212 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d51f6:	f7ff fb69 	bl	d48cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d51fa:	b178      	cbz	r0, d521c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d51fc:	4629      	mov	r1, r5
   d51fe:	4630      	mov	r0, r6
   d5200:	f7ff ff8b 	bl	d511a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5204:	4630      	mov	r0, r6
   d5206:	f7ff fe40 	bl	d4e8a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d520a:	2110      	movs	r1, #16
   d520c:	4630      	mov	r0, r6
   d520e:	f000 fd53 	bl	d5cb8 <_ZdlPvj>
        p_->setError(std::move(error));
   d5212:	4668      	mov	r0, sp
   d5214:	f7ff ff11 	bl	d503a <_ZN8particle5ErrorD1Ev>
    }
   d5218:	b009      	add	sp, #36	; 0x24
   d521a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d521c:	4631      	mov	r1, r6
   d521e:	a802      	add	r0, sp, #8
   d5220:	f7ff ffb0 	bl	d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5224:	68e0      	ldr	r0, [r4, #12]
   d5226:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d522a:	b108      	cbz	r0, d5230 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d522c:	f000 fd9e 	bl	d5d6c <strdup>
        type_(type) {
   d5230:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5232:	2010      	movs	r0, #16
   d5234:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5238:	f7fe ff2b 	bl	d4092 <_Znwj>
   d523c:	4605      	mov	r5, r0
   d523e:	b1e8      	cbz	r0, d527c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5240:	2700      	movs	r7, #0
   d5242:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5244:	2018      	movs	r0, #24
   d5246:	f7fe ff24 	bl	d4092 <_Znwj>
   d524a:	4604      	mov	r4, r0
   d524c:	b188      	cbz	r0, d5272 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d524e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5250:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5252:	a802      	add	r0, sp, #8
   d5254:	f7ff fe22 	bl	d4e9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5258:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d525a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d525c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d525e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5260:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5262:	a906      	add	r1, sp, #24
   d5264:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5266:	60e3      	str	r3, [r4, #12]
   d5268:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d526c:	9205      	str	r2, [sp, #20]
   d526e:	f7ff fed7 	bl	d5020 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5272:	4b08      	ldr	r3, [pc, #32]	; (d5294 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5274:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5276:	4b08      	ldr	r3, [pc, #32]	; (d5298 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5278:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d527a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d527c:	a806      	add	r0, sp, #24
   d527e:	f7ff fedc 	bl	d503a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5282:	a802      	add	r0, sp, #8
   d5284:	f7ff fe01 	bl	d4e8a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5288:	2200      	movs	r2, #0
   d528a:	4629      	mov	r1, r5
   d528c:	4803      	ldr	r0, [pc, #12]	; (d529c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d528e:	f7ff fb25 	bl	d48dc <application_thread_invoke>
   d5292:	e7b7      	b.n	d5204 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5294:	000d512d 	.word	0x000d512d
   d5298:	000d53c5 	.word	0x000d53c5
   d529c:	000d5865 	.word	0x000d5865

000d52a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d52a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d52a4:	b08a      	sub	sp, #40	; 0x28
   d52a6:	4605      	mov	r5, r0
   d52a8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d52ac:	460c      	mov	r4, r1
   d52ae:	4617      	mov	r7, r2
   d52b0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d52b2:	f7ff fb9f 	bl	d49f4 <spark_cloud_flag_connected>
   d52b6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d52b8:	4682      	mov	sl, r0
   d52ba:	bb38      	cbnz	r0, d530c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d52bc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d52c0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d52c2:	a905      	add	r1, sp, #20
   d52c4:	4630      	mov	r0, r6
   d52c6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d52ca:	f7ff fea9 	bl	d5020 <_ZN8particle5ErrorC1EOS0_>
   d52ce:	2014      	movs	r0, #20
   d52d0:	f7fe fedf 	bl	d4092 <_Znwj>
   d52d4:	4604      	mov	r4, r0
   d52d6:	b148      	cbz	r0, d52ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d52d8:	2302      	movs	r3, #2
   d52da:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52dc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d52de:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d52e2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d52e4:	4631      	mov	r1, r6
   d52e6:	300c      	adds	r0, #12
   d52e8:	f7ff fe9a 	bl	d5020 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d52ec:	4628      	mov	r0, r5
	: __shared_count(__p)
   d52ee:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d52f0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d52f4:	f7ff ff32 	bl	d515c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d52f8:	4630      	mov	r0, r6
   d52fa:	f7ff fe9e 	bl	d503a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d52fe:	a805      	add	r0, sp, #20
   d5300:	f7ff fe9b 	bl	d503a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5304:	4628      	mov	r0, r5
   d5306:	b00a      	add	sp, #40	; 0x28
   d5308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d530c:	230c      	movs	r3, #12
   d530e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5312:	2014      	movs	r0, #20
   d5314:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5318:	9307      	str	r3, [sp, #28]
   d531a:	f7fe feba 	bl	d4092 <_Znwj>
   d531e:	4601      	mov	r1, r0
   d5320:	b128      	cbz	r0, d532e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5322:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5326:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d532a:	f880 a001 	strb.w	sl, [r0, #1]
   d532e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5330:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5332:	f7ff ff13 	bl	d515c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5336:	4b22      	ldr	r3, [pc, #136]	; (d53c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5338:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d533a:	2008      	movs	r0, #8
   d533c:	f7fe fea9 	bl	d4092 <_Znwj>
   d5340:	4682      	mov	sl, r0
   d5342:	b128      	cbz	r0, d5350 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5344:	9b03      	ldr	r3, [sp, #12]
   d5346:	f840 3b04 	str.w	r3, [r0], #4
   d534a:	a904      	add	r1, sp, #16
   d534c:	f7ff fd2e 	bl	d4dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5350:	9600      	str	r6, [sp, #0]
   d5352:	fa5f f389 	uxtb.w	r3, r9
   d5356:	4642      	mov	r2, r8
   d5358:	4639      	mov	r1, r7
   d535a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d535c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5360:	f7ff fb50 	bl	d4a04 <spark_send_event>
   d5364:	b9b8      	cbnz	r0, d5396 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5366:	9b03      	ldr	r3, [sp, #12]
   d5368:	785b      	ldrb	r3, [r3, #1]
   d536a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d536e:	b993      	cbnz	r3, d5396 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5370:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5374:	a905      	add	r1, sp, #20
   d5376:	a803      	add	r0, sp, #12
   d5378:	9205      	str	r2, [sp, #20]
   d537a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d537e:	f7ff ff11 	bl	d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5382:	a805      	add	r0, sp, #20
   d5384:	f7ff fe59 	bl	d503a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5388:	a805      	add	r0, sp, #20
   d538a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d538c:	f7ff fea6 	bl	d50dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5390:	a806      	add	r0, sp, #24
   d5392:	f7fe feb5 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5396:	9b03      	ldr	r3, [sp, #12]
   d5398:	9305      	str	r3, [sp, #20]
   d539a:	a904      	add	r1, sp, #16
   d539c:	a806      	add	r0, sp, #24
   d539e:	f7ff fd05 	bl	d4dac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d53a2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d53a4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d53a6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d53a8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d53aa:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d53ac:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d53ae:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d53b0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d53b2:	f7fe fea5 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d53b6:	a804      	add	r0, sp, #16
   d53b8:	f7fe fea2 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d53bc:	e7a2      	b.n	d5304 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d53be:	bf00      	nop
   d53c0:	000d5489 	.word	0x000d5489

000d53c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d53c4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d53c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53c8:	4605      	mov	r5, r0
	  switch (__op)
   d53ca:	d007      	beq.n	d53dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d53cc:	2a03      	cmp	r2, #3
   d53ce:	d018      	beq.n	d5402 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d53d0:	2a01      	cmp	r2, #1
   d53d2:	d101      	bne.n	d53d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d53d4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d53d6:	6003      	str	r3, [r0, #0]
	}
   d53d8:	2000      	movs	r0, #0
   d53da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d53dc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d53de:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d53e0:	f7fe fe57 	bl	d4092 <_Znwj>
   d53e4:	4604      	mov	r4, r0
   d53e6:	b150      	cbz	r0, d53fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d53e8:	4631      	mov	r1, r6
   d53ea:	f7ff fecb 	bl	d5184 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d53ee:	6930      	ldr	r0, [r6, #16]
   d53f0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d53f4:	b108      	cbz	r0, d53fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d53f6:	f000 fcb9 	bl	d5d6c <strdup>
        type_(type) {
   d53fa:	6120      	str	r0, [r4, #16]
   d53fc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d53fe:	602c      	str	r4, [r5, #0]
	}
   d5400:	e7ea      	b.n	d53d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5402:	6804      	ldr	r4, [r0, #0]
   d5404:	2c00      	cmp	r4, #0
   d5406:	d0e7      	beq.n	d53d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5408:	f104 0010 	add.w	r0, r4, #16
   d540c:	f7ff fe15 	bl	d503a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5410:	4620      	mov	r0, r4
   d5412:	f7ff fd3a 	bl	d4e8a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5416:	2118      	movs	r1, #24
   d5418:	4620      	mov	r0, r4
   d541a:	f000 fc4d 	bl	d5cb8 <_ZdlPvj>
   d541e:	e7db      	b.n	d53d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5420 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5420:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5422:	2300      	movs	r3, #0
   d5424:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5426:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5428:	4604      	mov	r4, r0
   d542a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d542c:	b12b      	cbz	r3, d543a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d542e:	2202      	movs	r2, #2
   d5430:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5432:	68eb      	ldr	r3, [r5, #12]
   d5434:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5436:	68ab      	ldr	r3, [r5, #8]
   d5438:	60a3      	str	r3, [r4, #8]
    }
   d543a:	4620      	mov	r0, r4
   d543c:	bd38      	pop	{r3, r4, r5, pc}

000d543e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d543e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5440:	b570      	push	{r4, r5, r6, lr}
   d5442:	4604      	mov	r4, r0
	  switch (__op)
   d5444:	d007      	beq.n	d5456 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5446:	2a03      	cmp	r2, #3
   d5448:	d012      	beq.n	d5470 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d544a:	2a01      	cmp	r2, #1
   d544c:	d101      	bne.n	d5452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d544e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5450:	6003      	str	r3, [r0, #0]
	}
   d5452:	2000      	movs	r0, #0
   d5454:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5456:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5458:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d545a:	f7fe fe1a 	bl	d4092 <_Znwj>
   d545e:	4605      	mov	r5, r0
   d5460:	b120      	cbz	r0, d546c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5462:	4631      	mov	r1, r6
   d5464:	f7ff ffdc 	bl	d5420 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5468:	7c33      	ldrb	r3, [r6, #16]
   d546a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d546c:	6025      	str	r5, [r4, #0]
	}
   d546e:	e7f0      	b.n	d5452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5470:	6804      	ldr	r4, [r0, #0]
   d5472:	2c00      	cmp	r4, #0
   d5474:	d0ed      	beq.n	d5452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5476:	4620      	mov	r0, r4
   d5478:	f7ff fd07 	bl	d4e8a <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d547c:	2114      	movs	r1, #20
   d547e:	4620      	mov	r0, r4
   d5480:	f000 fc1a 	bl	d5cb8 <_ZdlPvj>
   d5484:	e7e5      	b.n	d5452 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5488 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5488:	b5f0      	push	{r4, r5, r6, r7, lr}
   d548a:	b089      	sub	sp, #36	; 0x24
   d548c:	4604      	mov	r4, r0
   d548e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5490:	a801      	add	r0, sp, #4
   d5492:	4611      	mov	r1, r2
   d5494:	f7ff fe22 	bl	d50dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5498:	b1a4      	cbz	r4, d54c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d549a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d549c:	b11d      	cbz	r5, d54a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d549e:	4628      	mov	r0, r5
   d54a0:	f000 fc64 	bl	d5d6c <strdup>
   d54a4:	4605      	mov	r5, r0
   d54a6:	a801      	add	r0, sp, #4
   d54a8:	a903      	add	r1, sp, #12
        type_(type) {
   d54aa:	9503      	str	r5, [sp, #12]
   d54ac:	f8ad 4010 	strh.w	r4, [sp, #16]
   d54b0:	f7ff fe78 	bl	d51a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d54b4:	a803      	add	r0, sp, #12
   d54b6:	f7ff fdc0 	bl	d503a <_ZN8particle5ErrorD1Ev>
   d54ba:	a802      	add	r0, sp, #8
   d54bc:	f7fe fe20 	bl	d4100 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d54c0:	b009      	add	sp, #36	; 0x24
   d54c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d54c4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d54c6:	2301      	movs	r3, #1
   d54c8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d54cc:	2a00      	cmp	r2, #0
   d54ce:	d103      	bne.n	d54d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d54d0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d54d4:	2900      	cmp	r1, #0
   d54d6:	d1f7      	bne.n	d54c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d54d8:	d1ef      	bne.n	d54ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d54da:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d54dc:	f3bf 8f5b 	dmb	ish
   d54e0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d54e2:	1d2b      	adds	r3, r5, #4
   d54e4:	f3bf 8f5b 	dmb	ish
   d54e8:	e853 6f00 	ldrex	r6, [r3]
   d54ec:	e843 4200 	strex	r2, r4, [r3]
   d54f0:	2a00      	cmp	r2, #0
   d54f2:	d1f9      	bne.n	d54e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d54f4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d54f8:	2e00      	cmp	r6, #0
   d54fa:	d0de      	beq.n	d54ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d54fc:	4620      	mov	r0, r4
   d54fe:	f7ff f9e5 	bl	d48cc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5502:	4607      	mov	r7, r0
   d5504:	b160      	cbz	r0, d5520 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5506:	f105 010c 	add.w	r1, r5, #12
   d550a:	4630      	mov	r0, r6
   d550c:	f7ff fe15 	bl	d513a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d5510:	4630      	mov	r0, r6
   d5512:	f7ff fcba 	bl	d4e8a <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5516:	2110      	movs	r1, #16
   d5518:	4630      	mov	r0, r6
   d551a:	f000 fbcd 	bl	d5cb8 <_ZdlPvj>
   d551e:	e7cc      	b.n	d54ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5520:	4631      	mov	r1, r6
   d5522:	a803      	add	r0, sp, #12
   d5524:	f7ff ff7c 	bl	d5420 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5528:	7b2b      	ldrb	r3, [r5, #12]
   d552a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d552e:	2010      	movs	r0, #16
   d5530:	f7fe fdaf 	bl	d4092 <_Znwj>
   d5534:	4605      	mov	r5, r0
   d5536:	b1d0      	cbz	r0, d556e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d5538:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d553a:	2014      	movs	r0, #20
   d553c:	f7fe fda9 	bl	d4092 <_Znwj>
   d5540:	4604      	mov	r4, r0
   d5542:	b178      	cbz	r0, d5564 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d5544:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5546:	4601      	mov	r1, r0
   d5548:	a803      	add	r0, sp, #12
   d554a:	f7ff fca7 	bl	d4e9c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d554e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5550:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5552:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5554:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d5556:	9205      	str	r2, [sp, #20]
   d5558:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d555a:	60e3      	str	r3, [r4, #12]
   d555c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d5560:	9206      	str	r2, [sp, #24]
   d5562:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5564:	4b06      	ldr	r3, [pc, #24]	; (d5580 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d5566:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5568:	4b06      	ldr	r3, [pc, #24]	; (d5584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d556a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d556c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d556e:	a803      	add	r0, sp, #12
   d5570:	f7ff fc8b 	bl	d4e8a <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5574:	2200      	movs	r2, #0
   d5576:	4629      	mov	r1, r5
   d5578:	4803      	ldr	r0, [pc, #12]	; (d5588 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d557a:	f7ff f9af 	bl	d48dc <application_thread_invoke>
   d557e:	e7c7      	b.n	d5510 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d5580:	000d514d 	.word	0x000d514d
   d5584:	000d543f 	.word	0x000d543f
   d5588:	000d5865 	.word	0x000d5865

000d558c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d558c:	4770      	bx	lr

000d558e <_ZN9IPAddressD0Ev>:
   d558e:	b510      	push	{r4, lr}
   d5590:	2118      	movs	r1, #24
   d5592:	4604      	mov	r4, r0
   d5594:	f000 fb90 	bl	d5cb8 <_ZdlPvj>
   d5598:	4620      	mov	r0, r4
   d559a:	bd10      	pop	{r4, pc}

000d559c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d559c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d559e:	7d03      	ldrb	r3, [r0, #20]
   d55a0:	2b06      	cmp	r3, #6
{
   d55a2:	b08d      	sub	sp, #52	; 0x34
   d55a4:	460e      	mov	r6, r1
   d55a6:	f100 0704 	add.w	r7, r0, #4
   d55aa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d55ae:	d012      	beq.n	d55d6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d55b0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d55b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d55b8:	220a      	movs	r2, #10
   d55ba:	4630      	mov	r0, r6
   d55bc:	f7ff fc31 	bl	d4e22 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d55c0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d55c2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d55c4:	d019      	beq.n	d55fa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d55c6:	2c00      	cmp	r4, #0
   d55c8:	d0f4      	beq.n	d55b4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d55ca:	212e      	movs	r1, #46	; 0x2e
   d55cc:	4630      	mov	r0, r6
   d55ce:	f7ff fc25 	bl	d4e1c <_ZN5Print5printEc>
   d55d2:	4404      	add	r4, r0
   d55d4:	e7ee      	b.n	d55b4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55d6:	232f      	movs	r3, #47	; 0x2f
   d55d8:	466a      	mov	r2, sp
   d55da:	4639      	mov	r1, r7
   d55dc:	200a      	movs	r0, #10
		buf[0] = 0;
   d55de:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d55e2:	f7ff f87b 	bl	d46dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d55e6:	4668      	mov	r0, sp
   d55e8:	f000 fbdd 	bl	d5da6 <strlen>
   d55ec:	6833      	ldr	r3, [r6, #0]
   d55ee:	4602      	mov	r2, r0
   d55f0:	68db      	ldr	r3, [r3, #12]
   d55f2:	4669      	mov	r1, sp
   d55f4:	4630      	mov	r0, r6
   d55f6:	4798      	blx	r3
   d55f8:	4604      	mov	r4, r0
    }
    return n;
}
   d55fa:	4620      	mov	r0, r4
   d55fc:	b00d      	add	sp, #52	; 0x34
   d55fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5600 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5600:	b510      	push	{r4, lr}
   d5602:	4b05      	ldr	r3, [pc, #20]	; (d5618 <_ZN9IPAddressC1Ev+0x18>)
   d5604:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5606:	2211      	movs	r2, #17
   d5608:	f840 3b04 	str.w	r3, [r0], #4
   d560c:	2100      	movs	r1, #0
   d560e:	f000 fb6e 	bl	d5cee <memset>
}
   d5612:	4620      	mov	r0, r4
   d5614:	bd10      	pop	{r4, pc}
   d5616:	bf00      	nop
   d5618:	000d5f68 	.word	0x000d5f68

000d561c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d561c:	4603      	mov	r3, r0
   d561e:	4a07      	ldr	r2, [pc, #28]	; (d563c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5620:	b510      	push	{r4, lr}
   d5622:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5626:	f101 0210 	add.w	r2, r1, #16
   d562a:	f851 4b04 	ldr.w	r4, [r1], #4
   d562e:	f843 4b04 	str.w	r4, [r3], #4
   d5632:	4291      	cmp	r1, r2
   d5634:	d1f9      	bne.n	d562a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5636:	780a      	ldrb	r2, [r1, #0]
   d5638:	701a      	strb	r2, [r3, #0]
}
   d563a:	bd10      	pop	{r4, pc}
   d563c:	000d5f68 	.word	0x000d5f68

000d5640 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d5640:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5642:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5646:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d564a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d564e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d5652:	2304      	movs	r3, #4
   d5654:	6041      	str	r1, [r0, #4]
   d5656:	7503      	strb	r3, [r0, #20]
}
   d5658:	bd10      	pop	{r4, pc}

000d565a <_ZN9IPAddressaSEPKh>:
{
   d565a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d565c:	78cb      	ldrb	r3, [r1, #3]
   d565e:	9300      	str	r3, [sp, #0]
   d5660:	788b      	ldrb	r3, [r1, #2]
   d5662:	784a      	ldrb	r2, [r1, #1]
   d5664:	7809      	ldrb	r1, [r1, #0]
   d5666:	f7ff ffeb 	bl	d5640 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d566a:	b002      	add	sp, #8
   d566c:	bd10      	pop	{r4, pc}

000d566e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d566e:	7441      	strb	r1, [r0, #17]
}
   d5670:	4770      	bx	lr

000d5672 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5672:	4770      	bx	lr

000d5674 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5674:	4770      	bx	lr

000d5676 <_ZN9USBSerial4readEv>:
{
   d5676:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5678:	2100      	movs	r1, #0
   d567a:	7c00      	ldrb	r0, [r0, #16]
   d567c:	f7ff f8fe 	bl	d487c <HAL_USB_USART_Receive_Data>
}
   d5680:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5684:	bd08      	pop	{r3, pc}

000d5686 <_ZN9USBSerial4peekEv>:
{
   d5686:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5688:	2101      	movs	r1, #1
   d568a:	7c00      	ldrb	r0, [r0, #16]
   d568c:	f7ff f8f6 	bl	d487c <HAL_USB_USART_Receive_Data>
}
   d5690:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5694:	bd08      	pop	{r3, pc}

000d5696 <_ZN9USBSerial17availableForWriteEv>:
{
   d5696:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5698:	7c00      	ldrb	r0, [r0, #16]
   d569a:	f7ff f8e7 	bl	d486c <HAL_USB_USART_Available_Data_For_Write>
}
   d569e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56a2:	bd08      	pop	{r3, pc}

000d56a4 <_ZN9USBSerial9availableEv>:
{
   d56a4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d56a6:	7c00      	ldrb	r0, [r0, #16]
   d56a8:	f7ff f8d8 	bl	d485c <HAL_USB_USART_Available_Data>
}
   d56ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d56b0:	bd08      	pop	{r3, pc}

000d56b2 <_ZN9USBSerial5writeEh>:
{
   d56b2:	b513      	push	{r0, r1, r4, lr}
   d56b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56b6:	7c00      	ldrb	r0, [r0, #16]
{
   d56b8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d56ba:	f7ff f8d7 	bl	d486c <HAL_USB_USART_Available_Data_For_Write>
   d56be:	2800      	cmp	r0, #0
   d56c0:	9901      	ldr	r1, [sp, #4]
   d56c2:	dc01      	bgt.n	d56c8 <_ZN9USBSerial5writeEh+0x16>
   d56c4:	7c60      	ldrb	r0, [r4, #17]
   d56c6:	b120      	cbz	r0, d56d2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d56c8:	7c20      	ldrb	r0, [r4, #16]
   d56ca:	f7ff f8df 	bl	d488c <HAL_USB_USART_Send_Data>
   d56ce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d56d2:	b002      	add	sp, #8
   d56d4:	bd10      	pop	{r4, pc}

000d56d6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d56d6:	7c00      	ldrb	r0, [r0, #16]
   d56d8:	f7ff b8e0 	b.w	d489c <HAL_USB_USART_Flush_Data>

000d56dc <_ZN9USBSerialD0Ev>:
   d56dc:	b510      	push	{r4, lr}
   d56de:	2114      	movs	r1, #20
   d56e0:	4604      	mov	r4, r0
   d56e2:	f000 fae9 	bl	d5cb8 <_ZdlPvj>
   d56e6:	4620      	mov	r0, r4
   d56e8:	bd10      	pop	{r4, pc}
	...

000d56ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d56ec:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d56ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d56f2:	4604      	mov	r4, r0
   d56f4:	4608      	mov	r0, r1
   d56f6:	2100      	movs	r1, #0
   d56f8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d56fc:	4b04      	ldr	r3, [pc, #16]	; (d5710 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d56fe:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5700:	2301      	movs	r3, #1
  _serial = serial;
   d5702:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5704:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5706:	4611      	mov	r1, r2
   d5708:	f7ff f8a0 	bl	d484c <HAL_USB_USART_Init>
}
   d570c:	4620      	mov	r0, r4
   d570e:	bd10      	pop	{r4, pc}
   d5710:	000d5f7c 	.word	0x000d5f7c

000d5714 <_Z19acquireSerialBufferv>:
{
   d5714:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5716:	2214      	movs	r2, #20
{
   d5718:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d571a:	2100      	movs	r1, #0
   d571c:	f000 fae7 	bl	d5cee <memset>
}
   d5720:	4620      	mov	r0, r4
   d5722:	bd10      	pop	{r4, pc}

000d5724 <_Z16_fetch_usbserialv>:
{
   d5724:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5726:	4c0f      	ldr	r4, [pc, #60]	; (d5764 <_Z16_fetch_usbserialv+0x40>)
{
   d5728:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d572a:	a803      	add	r0, sp, #12
   d572c:	f7ff fff2 	bl	d5714 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5730:	7821      	ldrb	r1, [r4, #0]
   d5732:	f3bf 8f5b 	dmb	ish
   d5736:	f011 0101 	ands.w	r1, r1, #1
   d573a:	d10f      	bne.n	d575c <_Z16_fetch_usbserialv+0x38>
   d573c:	4620      	mov	r0, r4
   d573e:	9101      	str	r1, [sp, #4]
   d5740:	f7fe fcad 	bl	d409e <__cxa_guard_acquire>
   d5744:	9901      	ldr	r1, [sp, #4]
   d5746:	b148      	cbz	r0, d575c <_Z16_fetch_usbserialv+0x38>
   d5748:	aa03      	add	r2, sp, #12
   d574a:	4807      	ldr	r0, [pc, #28]	; (d5768 <_Z16_fetch_usbserialv+0x44>)
   d574c:	f7ff ffce 	bl	d56ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5750:	4620      	mov	r0, r4
   d5752:	f7fe fca9 	bl	d40a8 <__cxa_guard_release>
   d5756:	4805      	ldr	r0, [pc, #20]	; (d576c <_Z16_fetch_usbserialv+0x48>)
   d5758:	f000 fab5 	bl	d5cc6 <atexit>
	return _usbserial;
}
   d575c:	4802      	ldr	r0, [pc, #8]	; (d5768 <_Z16_fetch_usbserialv+0x44>)
   d575e:	b008      	add	sp, #32
   d5760:	bd10      	pop	{r4, pc}
   d5762:	bf00      	nop
   d5764:	2003e5e4 	.word	0x2003e5e4
   d5768:	2003e5e8 	.word	0x2003e5e8
   d576c:	000d5673 	.word	0x000d5673

000d5770 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d5770:	4770      	bx	lr

000d5772 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5772:	7441      	strb	r1, [r0, #17]
}
   d5774:	4770      	bx	lr

000d5776 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5776:	4770      	bx	lr

000d5778 <_ZN11USARTSerial17availableForWriteEv>:
{
   d5778:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d577a:	7c00      	ldrb	r0, [r0, #16]
   d577c:	f7fe ffee 	bl	d475c <hal_usart_available_data_for_write>
}
   d5780:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5784:	bd08      	pop	{r3, pc}

000d5786 <_ZN11USARTSerial9availableEv>:
{
   d5786:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5788:	7c00      	ldrb	r0, [r0, #16]
   d578a:	f7fe ffbf 	bl	d470c <hal_usart_available>
}
   d578e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5792:	bd08      	pop	{r3, pc}

000d5794 <_ZN11USARTSerial4peekEv>:
{
   d5794:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5796:	7c00      	ldrb	r0, [r0, #16]
   d5798:	f7fe ffc8 	bl	d472c <hal_usart_peek>
}
   d579c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d57a0:	bd08      	pop	{r3, pc}

000d57a2 <_ZN11USARTSerial4readEv>:
{
   d57a2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d57a4:	7c00      	ldrb	r0, [r0, #16]
   d57a6:	f7fe ffb9 	bl	d471c <hal_usart_read>
}
   d57aa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d57ae:	bd08      	pop	{r3, pc}

000d57b0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d57b0:	7c00      	ldrb	r0, [r0, #16]
   d57b2:	f7fe bfc3 	b.w	d473c <hal_usart_flush>

000d57b6 <_ZN11USARTSerial5writeEh>:
{
   d57b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d57b8:	7c45      	ldrb	r5, [r0, #17]
{
   d57ba:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d57bc:	b12d      	cbz	r5, d57ca <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d57be:	7c20      	ldrb	r0, [r4, #16]
}
   d57c0:	b003      	add	sp, #12
   d57c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d57c6:	f7fe bf99 	b.w	d46fc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d57ca:	7c00      	ldrb	r0, [r0, #16]
   d57cc:	9101      	str	r1, [sp, #4]
   d57ce:	f7fe ffc5 	bl	d475c <hal_usart_available_data_for_write>
   d57d2:	2800      	cmp	r0, #0
   d57d4:	9901      	ldr	r1, [sp, #4]
   d57d6:	dcf2      	bgt.n	d57be <_ZN11USARTSerial5writeEh+0x8>
}
   d57d8:	4628      	mov	r0, r5
   d57da:	b003      	add	sp, #12
   d57dc:	bd30      	pop	{r4, r5, pc}

000d57de <_ZN11USARTSerialD0Ev>:
   d57de:	b510      	push	{r4, lr}
   d57e0:	2114      	movs	r1, #20
   d57e2:	4604      	mov	r4, r0
   d57e4:	f000 fa68 	bl	d5cb8 <_ZdlPvj>
   d57e8:	4620      	mov	r0, r4
   d57ea:	bd10      	pop	{r4, pc}

000d57ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d57ec:	b510      	push	{r4, lr}
   d57ee:	f04f 0c00 	mov.w	ip, #0
   d57f2:	4604      	mov	r4, r0
   d57f4:	4608      	mov	r0, r1
   d57f6:	4611      	mov	r1, r2
   d57f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d57fc:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5800:	4a04      	ldr	r2, [pc, #16]	; (d5814 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5802:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5804:	2201      	movs	r2, #1
  _serial = serial;
   d5806:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5808:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d580a:	461a      	mov	r2, r3
   d580c:	f7fe ff6e 	bl	d46ec <hal_usart_init>
}
   d5810:	4620      	mov	r0, r4
   d5812:	bd10      	pop	{r4, pc}
   d5814:	000d5fac 	.word	0x000d5fac

000d5818 <_Z22__fetch_global_Serial1v>:
{
   d5818:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d581a:	4c0d      	ldr	r4, [pc, #52]	; (d5850 <_Z22__fetch_global_Serial1v+0x38>)
   d581c:	7821      	ldrb	r1, [r4, #0]
   d581e:	f3bf 8f5b 	dmb	ish
   d5822:	f011 0101 	ands.w	r1, r1, #1
   d5826:	d110      	bne.n	d584a <_Z22__fetch_global_Serial1v+0x32>
   d5828:	4620      	mov	r0, r4
   d582a:	9101      	str	r1, [sp, #4]
   d582c:	f7fe fc37 	bl	d409e <__cxa_guard_acquire>
   d5830:	9901      	ldr	r1, [sp, #4]
   d5832:	b150      	cbz	r0, d584a <_Z22__fetch_global_Serial1v+0x32>
   d5834:	4b07      	ldr	r3, [pc, #28]	; (d5854 <_Z22__fetch_global_Serial1v+0x3c>)
   d5836:	4a08      	ldr	r2, [pc, #32]	; (d5858 <_Z22__fetch_global_Serial1v+0x40>)
   d5838:	4808      	ldr	r0, [pc, #32]	; (d585c <_Z22__fetch_global_Serial1v+0x44>)
   d583a:	f7ff ffd7 	bl	d57ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d583e:	4620      	mov	r0, r4
   d5840:	f7fe fc32 	bl	d40a8 <__cxa_guard_release>
   d5844:	4806      	ldr	r0, [pc, #24]	; (d5860 <_Z22__fetch_global_Serial1v+0x48>)
   d5846:	f000 fa3e 	bl	d5cc6 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d584a:	4804      	ldr	r0, [pc, #16]	; (d585c <_Z22__fetch_global_Serial1v+0x44>)
   d584c:	b002      	add	sp, #8
   d584e:	bd10      	pop	{r4, pc}
   d5850:	2003e5fc 	.word	0x2003e5fc
   d5854:	2003e684 	.word	0x2003e684
   d5858:	2003e600 	.word	0x2003e600
   d585c:	2003e708 	.word	0x2003e708
   d5860:	000d5777 	.word	0x000d5777

000d5864 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5864:	b510      	push	{r4, lr}
      if (_M_empty())
   d5866:	6883      	ldr	r3, [r0, #8]
   d5868:	4604      	mov	r4, r0
   d586a:	b90b      	cbnz	r3, d5870 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d586c:	f000 fa28 	bl	d5cc0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5870:	68c3      	ldr	r3, [r0, #12]
   d5872:	4798      	blx	r3
      if (_M_manager)
   d5874:	68a3      	ldr	r3, [r4, #8]
   d5876:	b11b      	cbz	r3, d5880 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5878:	2203      	movs	r2, #3
   d587a:	4621      	mov	r1, r4
   d587c:	4620      	mov	r0, r4
   d587e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5880:	4620      	mov	r0, r4
   d5882:	2110      	movs	r1, #16
}
   d5884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5888:	f000 ba16 	b.w	d5cb8 <_ZdlPvj>

000d588c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d588c:	4770      	bx	lr

000d588e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d588e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5890:	4606      	mov	r6, r0
   d5892:	4615      	mov	r5, r2
   d5894:	460c      	mov	r4, r1
   d5896:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5898:	42bc      	cmp	r4, r7
   d589a:	d006      	beq.n	d58aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d589c:	6833      	ldr	r3, [r6, #0]
   d589e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d58a2:	689b      	ldr	r3, [r3, #8]
   d58a4:	4630      	mov	r0, r6
   d58a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d58a8:	e7f6      	b.n	d5898 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d58aa:	4628      	mov	r0, r5
   d58ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d58ae:	7c00      	ldrb	r0, [r0, #16]
   d58b0:	2200      	movs	r2, #0
   d58b2:	f7fe bf7b 	b.w	d47ac <hal_i2c_write>

000d58b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d58b6:	7c00      	ldrb	r0, [r0, #16]
   d58b8:	2100      	movs	r1, #0
   d58ba:	f7fe bf7f 	b.w	d47bc <hal_i2c_available>

000d58be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d58be:	7c00      	ldrb	r0, [r0, #16]
   d58c0:	2100      	movs	r1, #0
   d58c2:	f7fe bf83 	b.w	d47cc <hal_i2c_read>

000d58c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d58c6:	7c00      	ldrb	r0, [r0, #16]
   d58c8:	2100      	movs	r1, #0
   d58ca:	f7fe bf87 	b.w	d47dc <hal_i2c_peek>

000d58ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d58ce:	7c00      	ldrb	r0, [r0, #16]
   d58d0:	2100      	movs	r1, #0
   d58d2:	f7fe bf8b 	b.w	d47ec <hal_i2c_flush>

000d58d6 <_ZN7TwoWireD0Ev>:
   d58d6:	b510      	push	{r4, lr}
   d58d8:	2114      	movs	r1, #20
   d58da:	4604      	mov	r4, r0
   d58dc:	f000 f9ec 	bl	d5cb8 <_ZdlPvj>
   d58e0:	4620      	mov	r0, r4
   d58e2:	bd10      	pop	{r4, pc}

000d58e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d58e4:	b510      	push	{r4, lr}
   d58e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d58ea:	4604      	mov	r4, r0
   d58ec:	4608      	mov	r0, r1
   d58ee:	2100      	movs	r1, #0
   d58f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d58f4:	4b03      	ldr	r3, [pc, #12]	; (d5904 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d58f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d58f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d58fa:	4611      	mov	r1, r2
   d58fc:	f7fe ff86 	bl	d480c <hal_i2c_init>
}
   d5900:	4620      	mov	r0, r4
   d5902:	bd10      	pop	{r4, pc}
   d5904:	000d5fdc 	.word	0x000d5fdc

000d5908 <_ZN7TwoWire12stretchClockEb>:
  hal_i2c_stretch_clock(_i2c, stretch, NULL);
   d5908:	7c00      	ldrb	r0, [r0, #16]
   d590a:	2200      	movs	r2, #0
   d590c:	f7fe bf2e 	b.w	d476c <hal_i2c_stretch_clock>

000d5910 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5910:	2300      	movs	r3, #0
   d5912:	7c00      	ldrb	r0, [r0, #16]
   d5914:	461a      	mov	r2, r3
   d5916:	4619      	mov	r1, r3
   d5918:	f7fe bf30 	b.w	d477c <hal_i2c_begin>

000d591c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d591c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d591e:	2200      	movs	r2, #0
   d5920:	2314      	movs	r3, #20
   d5922:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5926:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d592a:	780b      	ldrb	r3, [r1, #0]
   d592c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5930:	684b      	ldr	r3, [r1, #4]
   d5932:	9303      	str	r3, [sp, #12]
   d5934:	68cb      	ldr	r3, [r1, #12]
   d5936:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5938:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d593a:	7a0b      	ldrb	r3, [r1, #8]
   d593c:	9305      	str	r3, [sp, #20]
   d593e:	a901      	add	r1, sp, #4
   d5940:	f7fe ff6c 	bl	d481c <hal_i2c_request_ex>
}
   d5944:	b007      	add	sp, #28
   d5946:	f85d fb04 	ldr.w	pc, [sp], #4

000d594a <_ZN7TwoWire11requestFromEhjh>:
{
   d594a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d594c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d594e:	f88d 1000 	strb.w	r1, [sp]
   d5952:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5956:	9103      	str	r1, [sp, #12]
   d5958:	bf18      	it	ne
   d595a:	2301      	movne	r3, #1
   d595c:	4669      	mov	r1, sp
    size_ = size;
   d595e:	9201      	str	r2, [sp, #4]
   d5960:	f88d 3008 	strb.w	r3, [sp, #8]
   d5964:	f7ff ffda 	bl	d591c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5968:	b005      	add	sp, #20
   d596a:	f85d fb04 	ldr.w	pc, [sp], #4

000d596e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d596e:	2301      	movs	r3, #1
   d5970:	f7ff bfeb 	b.w	d594a <_ZN7TwoWire11requestFromEhjh>

000d5974 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5974:	7c00      	ldrb	r0, [r0, #16]
   d5976:	2200      	movs	r2, #0
   d5978:	f7fe bf08 	b.w	d478c <hal_i2c_begin_transmission>

000d597c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d597c:	b2c9      	uxtb	r1, r1
   d597e:	f7ff bff9 	b.w	d5974 <_ZN7TwoWire17beginTransmissionEh>

000d5982 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5982:	7c00      	ldrb	r0, [r0, #16]
   d5984:	2200      	movs	r2, #0
   d5986:	f7fe bf09 	b.w	d479c <hal_i2c_end_transmission>

000d598a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d598a:	2101      	movs	r1, #1
   d598c:	f7ff bff9 	b.w	d5982 <_ZN7TwoWire15endTransmissionEh>

000d5990 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5990:	2200      	movs	r2, #0
   d5992:	6840      	ldr	r0, [r0, #4]
   d5994:	4611      	mov	r1, r2
   d5996:	f7fe bfd5 	b.w	d4944 <network_ready>

000d599a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d599a:	2200      	movs	r2, #0
   d599c:	6840      	ldr	r0, [r0, #4]
   d599e:	4611      	mov	r1, r2
   d59a0:	f7fe bff0 	b.w	d4984 <network_listening>

000d59a4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d59a4:	2200      	movs	r2, #0
   d59a6:	6840      	ldr	r0, [r0, #4]
   d59a8:	4611      	mov	r1, r2
   d59aa:	f7fe bffb 	b.w	d49a4 <network_get_listen_timeout>

000d59ae <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d59ae:	6840      	ldr	r0, [r0, #4]
   d59b0:	2200      	movs	r2, #0
   d59b2:	f7fe bfef 	b.w	d4994 <network_set_listen_timeout>

000d59b6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d59b6:	6840      	ldr	r0, [r0, #4]
   d59b8:	2200      	movs	r2, #0
   d59ba:	f081 0101 	eor.w	r1, r1, #1
   d59be:	f7fe bfd9 	b.w	d4974 <network_listen>

000d59c2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d59c2:	2300      	movs	r3, #0
   d59c4:	6840      	ldr	r0, [r0, #4]
   d59c6:	461a      	mov	r2, r3
   d59c8:	4619      	mov	r1, r3
   d59ca:	f7fe bfcb 	b.w	d4964 <network_off>

000d59ce <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d59ce:	2300      	movs	r3, #0
   d59d0:	6840      	ldr	r0, [r0, #4]
   d59d2:	461a      	mov	r2, r3
   d59d4:	4619      	mov	r1, r3
   d59d6:	f7fe bfbd 	b.w	d4954 <network_on>

000d59da <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d59da:	2200      	movs	r2, #0
   d59dc:	6840      	ldr	r0, [r0, #4]
   d59de:	4611      	mov	r1, r2
   d59e0:	f7fe bfa0 	b.w	d4924 <network_connecting>

000d59e4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d59e4:	6840      	ldr	r0, [r0, #4]
   d59e6:	2200      	movs	r2, #0
   d59e8:	2102      	movs	r1, #2
   d59ea:	f7fe bfa3 	b.w	d4934 <network_disconnect>

000d59ee <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d59ee:	2300      	movs	r3, #0
   d59f0:	6840      	ldr	r0, [r0, #4]
   d59f2:	461a      	mov	r2, r3
   d59f4:	f7fe bf8e 	b.w	d4914 <network_connect>

000d59f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d59f8:	4b02      	ldr	r3, [pc, #8]	; (d5a04 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d59fa:	2204      	movs	r2, #4
   d59fc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d59fe:	4a02      	ldr	r2, [pc, #8]	; (d5a08 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5a00:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5a02:	4770      	bx	lr
   d5a04:	2003e71c 	.word	0x2003e71c
   d5a08:	000d6004 	.word	0x000d6004

000d5a0c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5a0c:	2300      	movs	r3, #0
   d5a0e:	6840      	ldr	r0, [r0, #4]
   d5a10:	461a      	mov	r2, r3
   d5a12:	f7fe bf7f 	b.w	d4914 <network_connect>

000d5a16 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5a16:	6840      	ldr	r0, [r0, #4]
   d5a18:	2200      	movs	r2, #0
   d5a1a:	2102      	movs	r1, #2
   d5a1c:	f7fe bf8a 	b.w	d4934 <network_disconnect>

000d5a20 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5a20:	2200      	movs	r2, #0
   d5a22:	6840      	ldr	r0, [r0, #4]
   d5a24:	4611      	mov	r1, r2
   d5a26:	f7fe bf7d 	b.w	d4924 <network_connecting>

000d5a2a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5a2a:	2200      	movs	r2, #0
   d5a2c:	6840      	ldr	r0, [r0, #4]
   d5a2e:	4611      	mov	r1, r2
   d5a30:	f7fe bf88 	b.w	d4944 <network_ready>

000d5a34 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5a34:	2300      	movs	r3, #0
   d5a36:	6840      	ldr	r0, [r0, #4]
   d5a38:	461a      	mov	r2, r3
   d5a3a:	4619      	mov	r1, r3
   d5a3c:	f7fe bf8a 	b.w	d4954 <network_on>

000d5a40 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5a40:	2300      	movs	r3, #0
   d5a42:	6840      	ldr	r0, [r0, #4]
   d5a44:	461a      	mov	r2, r3
   d5a46:	4619      	mov	r1, r3
   d5a48:	f7fe bf8c 	b.w	d4964 <network_off>

000d5a4c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d5a4c:	6840      	ldr	r0, [r0, #4]
   d5a4e:	2100      	movs	r1, #0
   d5a50:	f7fe bfb0 	b.w	d49b4 <network_is_on>

000d5a54 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5a54:	6840      	ldr	r0, [r0, #4]
   d5a56:	2100      	movs	r1, #0
   d5a58:	f7fe bfb4 	b.w	d49c4 <network_is_off>

000d5a5c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5a5c:	6840      	ldr	r0, [r0, #4]
   d5a5e:	2200      	movs	r2, #0
   d5a60:	f081 0101 	eor.w	r1, r1, #1
   d5a64:	f7fe bf86 	b.w	d4974 <network_listen>

000d5a68 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5a68:	6840      	ldr	r0, [r0, #4]
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	f7fe bf92 	b.w	d4994 <network_set_listen_timeout>

000d5a70 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5a70:	2200      	movs	r2, #0
   d5a72:	6840      	ldr	r0, [r0, #4]
   d5a74:	4611      	mov	r1, r2
   d5a76:	f7fe bf95 	b.w	d49a4 <network_get_listen_timeout>

000d5a7a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5a7a:	2200      	movs	r2, #0
   d5a7c:	6840      	ldr	r0, [r0, #4]
   d5a7e:	4611      	mov	r1, r2
   d5a80:	f7fe bf80 	b.w	d4984 <network_listening>

000d5a84 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5a84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5a88:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d5a8a:	b095      	sub	sp, #84	; 0x54
   d5a8c:	4616      	mov	r6, r2
   d5a8e:	460d      	mov	r5, r1
   d5a90:	4607      	mov	r7, r0
    IPAddress addr;
   d5a92:	f7ff fdb5 	bl	d5600 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d5a96:	4621      	mov	r1, r4
   d5a98:	2218      	movs	r2, #24
   d5a9a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d5a9c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5a9e:	f000 f926 	bl	d5cee <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5aa2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d5aa4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5aa8:	4621      	mov	r1, r4
   d5aaa:	466b      	mov	r3, sp
   d5aac:	aa0c      	add	r2, sp, #48	; 0x30
   d5aae:	4630      	mov	r0, r6
   d5ab0:	f7fe fddc 	bl	d466c <netdb_getaddrinfo>
    if (!r) {
   d5ab4:	4604      	mov	r4, r0
   d5ab6:	2800      	cmp	r0, #0
   d5ab8:	d146      	bne.n	d5b48 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5aba:	4602      	mov	r2, r0
   d5abc:	2101      	movs	r1, #1
   d5abe:	6868      	ldr	r0, [r5, #4]
   d5ac0:	f7fe ff40 	bl	d4944 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ac4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5ac6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ac8:	4622      	mov	r2, r4
   d5aca:	6868      	ldr	r0, [r5, #4]
   d5acc:	f7fe ff3a 	bl	d4944 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ad0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5ad2:	4681      	mov	r9, r0
        bool ok = false;
   d5ad4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ad6:	2e00      	cmp	r6, #0
   d5ad8:	d036      	beq.n	d5b48 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d5ada:	2900      	cmp	r1, #0
   d5adc:	d134      	bne.n	d5b48 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5ade:	6873      	ldr	r3, [r6, #4]
   d5ae0:	2b02      	cmp	r3, #2
   d5ae2:	d003      	beq.n	d5aec <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5ae4:	2b0a      	cmp	r3, #10
   d5ae6:	d00b      	beq.n	d5b00 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5ae8:	69f6      	ldr	r6, [r6, #28]
   d5aea:	e7f4      	b.n	d5ad6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d5aec:	f1b8 0f00 	cmp.w	r8, #0
   d5af0:	d004      	beq.n	d5afc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5af2:	6971      	ldr	r1, [r6, #20]
   d5af4:	4638      	mov	r0, r7
   d5af6:	3104      	adds	r1, #4
   d5af8:	f7ff fdaf 	bl	d565a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d5afc:	4641      	mov	r1, r8
   d5afe:	e7f3      	b.n	d5ae8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5b00:	f1b9 0f00 	cmp.w	r9, #0
   d5b04:	d101      	bne.n	d5b0a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5b06:	4649      	mov	r1, r9
   d5b08:	e7ee      	b.n	d5ae8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5b0a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5b0c:	2210      	movs	r2, #16
   d5b0e:	a801      	add	r0, sp, #4
   d5b10:	f000 f8ed 	bl	d5cee <memset>
                    a.v = 6;
   d5b14:	2306      	movs	r3, #6
   d5b16:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b1a:	ad01      	add	r5, sp, #4
   d5b1c:	f104 0308 	add.w	r3, r4, #8
   d5b20:	3418      	adds	r4, #24
   d5b22:	6818      	ldr	r0, [r3, #0]
   d5b24:	6859      	ldr	r1, [r3, #4]
   d5b26:	462a      	mov	r2, r5
   d5b28:	c203      	stmia	r2!, {r0, r1}
   d5b2a:	3308      	adds	r3, #8
   d5b2c:	42a3      	cmp	r3, r4
   d5b2e:	4615      	mov	r5, r2
   d5b30:	d1f7      	bne.n	d5b22 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d5b32:	a901      	add	r1, sp, #4
   d5b34:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5b36:	ad07      	add	r5, sp, #28
   d5b38:	f7ff fd70 	bl	d561c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b3e:	1d3c      	adds	r4, r7, #4
   d5b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b42:	682b      	ldr	r3, [r5, #0]
   d5b44:	7023      	strb	r3, [r4, #0]
   d5b46:	e7de      	b.n	d5b06 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5b48:	9800      	ldr	r0, [sp, #0]
   d5b4a:	f7fe fd87 	bl	d465c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5b4e:	4638      	mov	r0, r7
   d5b50:	b015      	add	sp, #84	; 0x54
   d5b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5b58 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5b58:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5b5a:	4a03      	ldr	r2, [pc, #12]	; (d5b68 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5b5c:	601a      	str	r2, [r3, #0]
   d5b5e:	2200      	movs	r2, #0
   d5b60:	605a      	str	r2, [r3, #4]

} // spark
   d5b62:	4770      	bx	lr
   d5b64:	2003e724 	.word	0x2003e724
   d5b68:	000d6040 	.word	0x000d6040

000d5b6c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5b6c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5b6e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5b70:	d902      	bls.n	d5b78 <pinAvailable+0xc>
    return false;
   d5b72:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5b74:	b002      	add	sp, #8
   d5b76:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5b78:	f1a0 030b 	sub.w	r3, r0, #11
   d5b7c:	2b02      	cmp	r3, #2
   d5b7e:	d81a      	bhi.n	d5bb6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5b80:	4c17      	ldr	r4, [pc, #92]	; (d5be0 <pinAvailable+0x74>)
   d5b82:	7821      	ldrb	r1, [r4, #0]
   d5b84:	f3bf 8f5b 	dmb	ish
   d5b88:	f011 0101 	ands.w	r1, r1, #1
   d5b8c:	d10b      	bne.n	d5ba6 <pinAvailable+0x3a>
   d5b8e:	4620      	mov	r0, r4
   d5b90:	9101      	str	r1, [sp, #4]
   d5b92:	f7fe fa84 	bl	d409e <__cxa_guard_acquire>
   d5b96:	9901      	ldr	r1, [sp, #4]
   d5b98:	b128      	cbz	r0, d5ba6 <pinAvailable+0x3a>
   d5b9a:	4812      	ldr	r0, [pc, #72]	; (d5be4 <pinAvailable+0x78>)
   d5b9c:	f7fe ffb0 	bl	d4b00 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5ba0:	4620      	mov	r0, r4
   d5ba2:	f7fe fa81 	bl	d40a8 <__cxa_guard_release>
   d5ba6:	4b0f      	ldr	r3, [pc, #60]	; (d5be4 <pinAvailable+0x78>)
   d5ba8:	7818      	ldrb	r0, [r3, #0]
   d5baa:	f7fe fe47 	bl	d483c <hal_spi_is_enabled>
   d5bae:	2800      	cmp	r0, #0
   d5bb0:	d1df      	bne.n	d5b72 <pinAvailable+0x6>
  return true; // 'pin' is available
   d5bb2:	2001      	movs	r0, #1
   d5bb4:	e7de      	b.n	d5b74 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5bb6:	2801      	cmp	r0, #1
   d5bb8:	d809      	bhi.n	d5bce <pinAvailable+0x62>
   d5bba:	f000 f859 	bl	d5c70 <_Z19__fetch_global_Wirev>
   d5bbe:	2100      	movs	r1, #0
   d5bc0:	7c00      	ldrb	r0, [r0, #16]
   d5bc2:	f7fe fe1b 	bl	d47fc <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5bc6:	f080 0001 	eor.w	r0, r0, #1
   d5bca:	b2c0      	uxtb	r0, r0
   d5bcc:	e7d2      	b.n	d5b74 <pinAvailable+0x8>
   d5bce:	3809      	subs	r0, #9
   d5bd0:	2801      	cmp	r0, #1
   d5bd2:	d8ee      	bhi.n	d5bb2 <pinAvailable+0x46>
   d5bd4:	f7ff fe20 	bl	d5818 <_Z22__fetch_global_Serial1v>
   d5bd8:	7c00      	ldrb	r0, [r0, #16]
   d5bda:	f7fe fdb7 	bl	d474c <hal_usart_is_enabled>
   d5bde:	e7f2      	b.n	d5bc6 <pinAvailable+0x5a>
   d5be0:	2003e72c 	.word	0x2003e72c
   d5be4:	2003e730 	.word	0x2003e730

000d5be8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5be8:	2823      	cmp	r0, #35	; 0x23
{
   d5bea:	b538      	push	{r3, r4, r5, lr}
   d5bec:	4604      	mov	r4, r0
   d5bee:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5bf0:	d80a      	bhi.n	d5c08 <pinMode+0x20>
   d5bf2:	29ff      	cmp	r1, #255	; 0xff
   d5bf4:	d008      	beq.n	d5c08 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5bf6:	f7ff ffb9 	bl	d5b6c <pinAvailable>
   d5bfa:	b128      	cbz	r0, d5c08 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5bfc:	4629      	mov	r1, r5
   d5bfe:	4620      	mov	r0, r4
}
   d5c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5c04:	f7fe bd3a 	b.w	d467c <HAL_Pin_Mode>
}
   d5c08:	bd38      	pop	{r3, r4, r5, pc}

000d5c0a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5c0a:	b538      	push	{r3, r4, r5, lr}
   d5c0c:	4604      	mov	r4, r0
   d5c0e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5c10:	f7fe fd3c 	bl	d468c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5c14:	28ff      	cmp	r0, #255	; 0xff
   d5c16:	d010      	beq.n	d5c3a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5c18:	2806      	cmp	r0, #6
   d5c1a:	d804      	bhi.n	d5c26 <digitalWrite+0x1c>
   d5c1c:	234d      	movs	r3, #77	; 0x4d
   d5c1e:	fa23 f000 	lsr.w	r0, r3, r0
   d5c22:	07c3      	lsls	r3, r0, #31
   d5c24:	d409      	bmi.n	d5c3a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5c26:	4620      	mov	r0, r4
   d5c28:	f7ff ffa0 	bl	d5b6c <pinAvailable>
   d5c2c:	b128      	cbz	r0, d5c3a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5c2e:	4629      	mov	r1, r5
   d5c30:	4620      	mov	r0, r4
}
   d5c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5c36:	f7fe bd31 	b.w	d469c <HAL_GPIO_Write>
}
   d5c3a:	bd38      	pop	{r3, r4, r5, pc}

000d5c3c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c3c:	4770      	bx	lr
	...

000d5c40 <_Z17acquireWireBufferv>:
{
   d5c40:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5c42:	2300      	movs	r3, #0
   d5c44:	2520      	movs	r5, #32
   d5c46:	8043      	strh	r3, [r0, #2]
   d5c48:	2314      	movs	r3, #20
{
   d5c4a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5c4c:	8003      	strh	r3, [r0, #0]
   d5c4e:	6085      	str	r5, [r0, #8]
   d5c50:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c52:	4906      	ldr	r1, [pc, #24]	; (d5c6c <_Z17acquireWireBufferv+0x2c>)
   d5c54:	4628      	mov	r0, r5
   d5c56:	f000 f831 	bl	d5cbc <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c5a:	4904      	ldr	r1, [pc, #16]	; (d5c6c <_Z17acquireWireBufferv+0x2c>)
	};
   d5c5c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5c5e:	4628      	mov	r0, r5
   d5c60:	f000 f82c 	bl	d5cbc <_ZnajRKSt9nothrow_t>
	};
   d5c64:	60e0      	str	r0, [r4, #12]
}
   d5c66:	4620      	mov	r0, r4
   d5c68:	bd38      	pop	{r3, r4, r5, pc}
   d5c6a:	bf00      	nop
   d5c6c:	000d6074 	.word	0x000d6074

000d5c70 <_Z19__fetch_global_Wirev>:
{
   d5c70:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c72:	4d0e      	ldr	r5, [pc, #56]	; (d5cac <_Z19__fetch_global_Wirev+0x3c>)
   d5c74:	7829      	ldrb	r1, [r5, #0]
   d5c76:	f3bf 8f5b 	dmb	ish
   d5c7a:	f011 0401 	ands.w	r4, r1, #1
{
   d5c7e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5c80:	d111      	bne.n	d5ca6 <_Z19__fetch_global_Wirev+0x36>
   d5c82:	4628      	mov	r0, r5
   d5c84:	f7fe fa0b 	bl	d409e <__cxa_guard_acquire>
   d5c88:	b168      	cbz	r0, d5ca6 <_Z19__fetch_global_Wirev+0x36>
   d5c8a:	a801      	add	r0, sp, #4
   d5c8c:	f7ff ffd8 	bl	d5c40 <_Z17acquireWireBufferv>
   d5c90:	aa01      	add	r2, sp, #4
   d5c92:	4621      	mov	r1, r4
   d5c94:	4806      	ldr	r0, [pc, #24]	; (d5cb0 <_Z19__fetch_global_Wirev+0x40>)
   d5c96:	f7ff fe25 	bl	d58e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5c9a:	4628      	mov	r0, r5
   d5c9c:	f7fe fa04 	bl	d40a8 <__cxa_guard_release>
   d5ca0:	4804      	ldr	r0, [pc, #16]	; (d5cb4 <_Z19__fetch_global_Wirev+0x44>)
   d5ca2:	f000 f810 	bl	d5cc6 <atexit>
	return wire;
}
   d5ca6:	4802      	ldr	r0, [pc, #8]	; (d5cb0 <_Z19__fetch_global_Wirev+0x40>)
   d5ca8:	b007      	add	sp, #28
   d5caa:	bd30      	pop	{r4, r5, pc}
   d5cac:	2003e73c 	.word	0x2003e73c
   d5cb0:	2003e740 	.word	0x2003e740
   d5cb4:	000d5c3d 	.word	0x000d5c3d

000d5cb8 <_ZdlPvj>:
   d5cb8:	f7fe b9ef 	b.w	d409a <_ZdlPv>

000d5cbc <_ZnajRKSt9nothrow_t>:
   d5cbc:	f7fe b9eb 	b.w	d4096 <_Znaj>

000d5cc0 <_ZSt25__throw_bad_function_callv>:
   d5cc0:	b508      	push	{r3, lr}
   d5cc2:	f7fe fec7 	bl	d4a54 <abort>

000d5cc6 <atexit>:
   d5cc6:	2300      	movs	r3, #0
   d5cc8:	4601      	mov	r1, r0
   d5cca:	461a      	mov	r2, r3
   d5ccc:	4618      	mov	r0, r3
   d5cce:	f000 b873 	b.w	d5db8 <__register_exitproc>

000d5cd2 <memcpy>:
   d5cd2:	440a      	add	r2, r1
   d5cd4:	4291      	cmp	r1, r2
   d5cd6:	f100 33ff 	add.w	r3, r0, #4294967295
   d5cda:	d100      	bne.n	d5cde <memcpy+0xc>
   d5cdc:	4770      	bx	lr
   d5cde:	b510      	push	{r4, lr}
   d5ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5ce8:	4291      	cmp	r1, r2
   d5cea:	d1f9      	bne.n	d5ce0 <memcpy+0xe>
   d5cec:	bd10      	pop	{r4, pc}

000d5cee <memset>:
   d5cee:	4402      	add	r2, r0
   d5cf0:	4603      	mov	r3, r0
   d5cf2:	4293      	cmp	r3, r2
   d5cf4:	d100      	bne.n	d5cf8 <memset+0xa>
   d5cf6:	4770      	bx	lr
   d5cf8:	f803 1b01 	strb.w	r1, [r3], #1
   d5cfc:	e7f9      	b.n	d5cf2 <memset+0x4>
	...

000d5d00 <srand>:
   d5d00:	b538      	push	{r3, r4, r5, lr}
   d5d02:	4b0d      	ldr	r3, [pc, #52]	; (d5d38 <srand+0x38>)
   d5d04:	681d      	ldr	r5, [r3, #0]
   d5d06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5d08:	4604      	mov	r4, r0
   d5d0a:	b97b      	cbnz	r3, d5d2c <srand+0x2c>
   d5d0c:	2018      	movs	r0, #24
   d5d0e:	f7fe fe89 	bl	d4a24 <malloc>
   d5d12:	4a0a      	ldr	r2, [pc, #40]	; (d5d3c <srand+0x3c>)
   d5d14:	4b0a      	ldr	r3, [pc, #40]	; (d5d40 <srand+0x40>)
   d5d16:	63a8      	str	r0, [r5, #56]	; 0x38
   d5d18:	e9c0 2300 	strd	r2, r3, [r0]
   d5d1c:	4b09      	ldr	r3, [pc, #36]	; (d5d44 <srand+0x44>)
   d5d1e:	6083      	str	r3, [r0, #8]
   d5d20:	230b      	movs	r3, #11
   d5d22:	8183      	strh	r3, [r0, #12]
   d5d24:	2201      	movs	r2, #1
   d5d26:	2300      	movs	r3, #0
   d5d28:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5d2c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5d2e:	2200      	movs	r2, #0
   d5d30:	611c      	str	r4, [r3, #16]
   d5d32:	615a      	str	r2, [r3, #20]
   d5d34:	bd38      	pop	{r3, r4, r5, pc}
   d5d36:	bf00      	nop
   d5d38:	2003e520 	.word	0x2003e520
   d5d3c:	abcd330e 	.word	0xabcd330e
   d5d40:	e66d1234 	.word	0xe66d1234
   d5d44:	0005deec 	.word	0x0005deec

000d5d48 <strcmp>:
   d5d48:	f810 2b01 	ldrb.w	r2, [r0], #1
   d5d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d5d50:	2a01      	cmp	r2, #1
   d5d52:	bf28      	it	cs
   d5d54:	429a      	cmpcs	r2, r3
   d5d56:	d0f7      	beq.n	d5d48 <strcmp>
   d5d58:	1ad0      	subs	r0, r2, r3
   d5d5a:	4770      	bx	lr

000d5d5c <strcpy>:
   d5d5c:	4603      	mov	r3, r0
   d5d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5d62:	f803 2b01 	strb.w	r2, [r3], #1
   d5d66:	2a00      	cmp	r2, #0
   d5d68:	d1f9      	bne.n	d5d5e <strcpy+0x2>
   d5d6a:	4770      	bx	lr

000d5d6c <strdup>:
   d5d6c:	4b02      	ldr	r3, [pc, #8]	; (d5d78 <strdup+0xc>)
   d5d6e:	4601      	mov	r1, r0
   d5d70:	6818      	ldr	r0, [r3, #0]
   d5d72:	f000 b803 	b.w	d5d7c <_strdup_r>
   d5d76:	bf00      	nop
   d5d78:	2003e520 	.word	0x2003e520

000d5d7c <_strdup_r>:
   d5d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5d7e:	4604      	mov	r4, r0
   d5d80:	4608      	mov	r0, r1
   d5d82:	460d      	mov	r5, r1
   d5d84:	f000 f80f 	bl	d5da6 <strlen>
   d5d88:	1c42      	adds	r2, r0, #1
   d5d8a:	4611      	mov	r1, r2
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	9201      	str	r2, [sp, #4]
   d5d90:	f7fe fe68 	bl	d4a64 <_malloc_r>
   d5d94:	4604      	mov	r4, r0
   d5d96:	b118      	cbz	r0, d5da0 <_strdup_r+0x24>
   d5d98:	9a01      	ldr	r2, [sp, #4]
   d5d9a:	4629      	mov	r1, r5
   d5d9c:	f7ff ff99 	bl	d5cd2 <memcpy>
   d5da0:	4620      	mov	r0, r4
   d5da2:	b003      	add	sp, #12
   d5da4:	bd30      	pop	{r4, r5, pc}

000d5da6 <strlen>:
   d5da6:	4603      	mov	r3, r0
   d5da8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5dac:	2a00      	cmp	r2, #0
   d5dae:	d1fb      	bne.n	d5da8 <strlen+0x2>
   d5db0:	1a18      	subs	r0, r3, r0
   d5db2:	3801      	subs	r0, #1
   d5db4:	4770      	bx	lr
	...

000d5db8 <__register_exitproc>:
   d5db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5dbc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d5e78 <__register_exitproc+0xc0>
   d5dc0:	4606      	mov	r6, r0
   d5dc2:	f8d8 0000 	ldr.w	r0, [r8]
   d5dc6:	461f      	mov	r7, r3
   d5dc8:	460d      	mov	r5, r1
   d5dca:	4691      	mov	r9, r2
   d5dcc:	f000 f856 	bl	d5e7c <__retarget_lock_acquire_recursive>
   d5dd0:	4b25      	ldr	r3, [pc, #148]	; (d5e68 <__register_exitproc+0xb0>)
   d5dd2:	681c      	ldr	r4, [r3, #0]
   d5dd4:	b934      	cbnz	r4, d5de4 <__register_exitproc+0x2c>
   d5dd6:	4c25      	ldr	r4, [pc, #148]	; (d5e6c <__register_exitproc+0xb4>)
   d5dd8:	601c      	str	r4, [r3, #0]
   d5dda:	4b25      	ldr	r3, [pc, #148]	; (d5e70 <__register_exitproc+0xb8>)
   d5ddc:	b113      	cbz	r3, d5de4 <__register_exitproc+0x2c>
   d5dde:	681b      	ldr	r3, [r3, #0]
   d5de0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d5de4:	6863      	ldr	r3, [r4, #4]
   d5de6:	2b1f      	cmp	r3, #31
   d5de8:	dd07      	ble.n	d5dfa <__register_exitproc+0x42>
   d5dea:	f8d8 0000 	ldr.w	r0, [r8]
   d5dee:	f000 f847 	bl	d5e80 <__retarget_lock_release_recursive>
   d5df2:	f04f 30ff 	mov.w	r0, #4294967295
   d5df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d5dfa:	b34e      	cbz	r6, d5e50 <__register_exitproc+0x98>
   d5dfc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d5e00:	b988      	cbnz	r0, d5e26 <__register_exitproc+0x6e>
   d5e02:	4b1c      	ldr	r3, [pc, #112]	; (d5e74 <__register_exitproc+0xbc>)
   d5e04:	b923      	cbnz	r3, d5e10 <__register_exitproc+0x58>
   d5e06:	f8d8 0000 	ldr.w	r0, [r8]
   d5e0a:	f000 f838 	bl	d5e7e <__retarget_lock_release>
   d5e0e:	e7f0      	b.n	d5df2 <__register_exitproc+0x3a>
   d5e10:	f44f 7084 	mov.w	r0, #264	; 0x108
   d5e14:	f7fe fe06 	bl	d4a24 <malloc>
   d5e18:	2800      	cmp	r0, #0
   d5e1a:	d0f4      	beq.n	d5e06 <__register_exitproc+0x4e>
   d5e1c:	2300      	movs	r3, #0
   d5e1e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d5e22:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d5e26:	6863      	ldr	r3, [r4, #4]
   d5e28:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d5e2c:	2201      	movs	r2, #1
   d5e2e:	409a      	lsls	r2, r3
   d5e30:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d5e34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d5e38:	4313      	orrs	r3, r2
   d5e3a:	2e02      	cmp	r6, #2
   d5e3c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d5e40:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d5e44:	bf02      	ittt	eq
   d5e46:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d5e4a:	431a      	orreq	r2, r3
   d5e4c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d5e50:	6863      	ldr	r3, [r4, #4]
   d5e52:	f8d8 0000 	ldr.w	r0, [r8]
   d5e56:	1c5a      	adds	r2, r3, #1
   d5e58:	3302      	adds	r3, #2
   d5e5a:	6062      	str	r2, [r4, #4]
   d5e5c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5e60:	f000 f80e 	bl	d5e80 <__retarget_lock_release_recursive>
   d5e64:	2000      	movs	r0, #0
   d5e66:	e7c6      	b.n	d5df6 <__register_exitproc+0x3e>
   d5e68:	2003e7e0 	.word	0x2003e7e0
   d5e6c:	2003e754 	.word	0x2003e754
   d5e70:	00000000 	.word	0x00000000
   d5e74:	000d4a25 	.word	0x000d4a25
   d5e78:	2003e584 	.word	0x2003e584

000d5e7c <__retarget_lock_acquire_recursive>:
   d5e7c:	4770      	bx	lr

000d5e7e <__retarget_lock_release>:
   d5e7e:	4770      	bx	lr

000d5e80 <__retarget_lock_release_recursive>:
   d5e80:	4770      	bx	lr

000d5e82 <link_code_end>:
	...

000d5e84 <dynalib_user>:
   d5e84:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5e94:	0000 0000 6573 646e 6144 6174 7b00 7422     ....sendData.{"t
   d5ea4:	6972 6767 7265 3a22 7d00 6300 326f 7070     rigger":.}.co2pp
   d5eb4:	006d 227b 6570 6b61 3a22 7b00 6322 326f     m.{"peak":.{"co2
   d5ec4:	3a22 7300 6e65 0064 7264 706f 614d 0067     ":.send.dropMag.
   d5ed4:	6572 6573 4d74 6761 3100 6500 7272 726f     resetMag.1.error
   d5ee4:	0000 0000                                   ....

000d5ee8 <_ZTVN5spark13EthernetClassE>:
	...
   d5ef0:	4ae3 000d 4ad9 000d 4acf 000d 4ac5 000d     .J...J...J...J..
   d5f00:	4ab9 000d 4aad 000d 5a4d 000d 5a55 000d     .J...J..MZ..UZ..
   d5f10:	4aa1 000d 4a99 000d 4a8f 000d 4a85 000d     .J...J...J...J..
   d5f20:	5a85 000d 7061 0070 5925 252d 2d6d 6425     .Z..app.%Y-%m-%d
   d5f30:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d5f40:	6d69 0065                                   ime.

000d5f44 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5f4c:	5005 000d 500b 000d 5049 000d 5019 000d     .P...P..IP...P..
   d5f5c:	5007 000d                                   .P..

000d5f60 <_ZTV9IPAddress>:
	...
   d5f68:	559d 000d 558d 000d 558f 000d               .U...U...U..

000d5f74 <_ZTV9USBSerial>:
	...
   d5f7c:	5675 000d 56dd 000d 56b3 000d 4dcd 000d     uV...V...V...M..
   d5f8c:	56a5 000d 5677 000d 5687 000d 56d7 000d     .V..wV...V...V..
   d5f9c:	5697 000d 566f 000d                         .V..oV..

000d5fa4 <_ZTV11USARTSerial>:
	...
   d5fac:	5771 000d 57df 000d 57b7 000d 4dcd 000d     qW...W...W...M..
   d5fbc:	5787 000d 57a3 000d 5795 000d 57b1 000d     .W...W...W...W..
   d5fcc:	5773 000d 5779 000d                         sW..yW..

000d5fd4 <_ZTV7TwoWire>:
	...
   d5fdc:	588d 000d 58d7 000d 58af 000d 588f 000d     .X...X...X...X..
   d5fec:	58b7 000d 58bf 000d 58c7 000d 58cf 000d     .X...X...X...X..

000d5ffc <_ZTVN5spark9WiFiClassE>:
	...
   d6004:	59ef 000d 59e5 000d 59db 000d 5991 000d     .Y...Y...Y...Y..
   d6014:	59cf 000d 59c3 000d 5a4d 000d 5a55 000d     .Y...Y..MZ..UZ..
   d6024:	59b7 000d 59af 000d 59a5 000d 599b 000d     .Y...Y...Y...Y..
   d6034:	5a85 000d                                   .Z..

000d6038 <_ZTVN5spark12NetworkClassE>:
	...
   d6040:	5a0d 000d 5a17 000d 5a21 000d 5a2b 000d     .Z...Z..!Z..+Z..
   d6050:	5a35 000d 5a41 000d 5a4d 000d 5a55 000d     5Z..AZ..MZ..UZ..
   d6060:	5a5d 000d 5a69 000d 5a71 000d 5a7b 000d     ]Z..iZ..qZ..{Z..
   d6070:	5a85 000d                                   .Z..

000d6074 <_ZSt7nothrow>:
	...

000d6075 <link_const_variable_data_end>:
   d6075:	00          	.byte	0x00
	...

000d6078 <link_constructors_location>:
   d6078:	000d4421 	.word	0x000d4421
   d607c:	000d4aed 	.word	0x000d4aed
   d6080:	000d4b15 	.word	0x000d4b15
   d6084:	000d4dbd 	.word	0x000d4dbd
   d6088:	000d4e61 	.word	0x000d4e61
   d608c:	000d4e71 	.word	0x000d4e71
   d6090:	000d4ec1 	.word	0x000d4ec1
   d6094:	000d59f9 	.word	0x000d59f9
   d6098:	000d5b59 	.word	0x000d5b59

000d609c <link_constructors_end>:
   d609c:	00000000 	.word	0x00000000
